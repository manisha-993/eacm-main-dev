//
// TEMPLATE: DATABASE.TXT (@date)
//
//Licensed Materials -- Property of IBM
//
// (C) Copyright IBM Corp. 2001,2012  All Rights Reserved.
// The source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U.S. Copyright office.
//
// See revision 1.1085 in cvs for previous changes, file was too big
// $Log: database.txt,v $
// Revision 1.1091  2015/03/11 15:48:55  stimpsow
// RTC1119727 - add support for second ods
//
// Revision 1.1090  2015/03/06 07:17:48  wangyul
// jdbc change to supprot type2 and type4
//
// Revision 1.1090  2015/03/04 10:57:45  luis
// support jdbc type2 and type4
//
// Revision 1.1089  2014/02/24 15:00:45  wendy
// RCQ285768 - view cached XML in JUI
//
// Revision 1.1088  2012/11/28 17:59:31  wendy
// force getnow methods to return ISO format, don't drop trailing 0s
//
// Revision 1.1087  2012/11/09 12:18:18  wendy
// update comments
//
// Revision 1.1086  2012/11/08 22:02:36  wendy
// moved blob handling to new class
//
// 

package COM.ibm.opicmpdh.middleware;

// JDBC classes
import java.sql.*;
// Text (for DecimalFormat)
//import java.text.DecimalFormat;
// DB2 UDB JDBC classes
//import COM.ibm.db2.jdbc.app.*;
// IO classes (PrintWriter)
import java.io.*;
// For Vector + Hashtable + Properties
import java.util.*;
// The OPICM classes
import COM.ibm.opicmpdh.objects.*;
//import COM.ibm.opicmpdh.middleware.*;
import COM.ibm.opicmpdh.transactions.*;
//import COM.ibm.opicmpdh.translation.*;
// The eannounce classes
import COM.ibm.eannounce.objects.*;
import COM.ibm.eannounce.report.EANNetChanges;
import swat.*;
import javax.mail.internet.InternetAddress;

/**
 * Provides capability to connect to a database (via JDBC) and execute OPICM stored procedures
 *
 * @author     davidbig
 * @created    April 25, 2003
 * @version
 * @date
 * @see        DatabasePool
 * @see        RemoteDatabase
 * @see        MiddlewareServerProperties
 */
public final class Database {
    public static String c_strBuildTimeStamp = "@date";
    
    protected static String c_strNow = null;
    protected static String c_strForever = null;
    protected static String c_strEpoch = null;

    // Class constants
    /**
     *  Description of the Field
     */
    public final static String CURRENT_VERSION_LITERAL;
    public final static String LOGOUT = "LOGOUTINDICATOR";
    
    // Class initialization code
    static {
        D.isplay("EACM Middleware Database <" + c_strBuildTimeStamp + ">");
        CURRENT_VERSION_LITERAL =MiddlewareServerProperties.getVersionLiteral();

		c_strForever = "9999-12-31-00.00.00.000000";
        c_strEpoch = "1980-01-01-00.00.00.000000";
        
        // Load the JDBC driver
        D.ebug(D.EBUG_DETAIL, "Loading IBM JDBC driver for DB2");

        try {
           Class.forName(MiddlewareServerProperties.getJdbcDriverClassName()).newInstance();
        } catch (ClassNotFoundException x) {
            D.ebug(D.EBUG_ERR, x + " ");
        } catch (InstantiationException x) {
            D.ebug(D.EBUG_ERR, x + " ");
        } catch (IllegalAccessException x) {
            D.ebug(D.EBUG_ERR, x + " ");
        }
    }
    
    private final static String CLASS_BRAND = "$Id: database.txt,v 1.1091 2015/03/11 15:48:55 stimpsow Exp $";
    // Class variables
    private static int c_iInstanceCount = 0;
    private static String c_strServerLDAP = null;
    private static boolean c_bUsageLogging = false;
    private static boolean c_bHasPDH = false;
    private static boolean c_bHasODS = false;
    private static boolean c_bHasODS2 = false;  //RTC1119727  
    // !!! references to this must be changed to TranID or OPENID !!!
    private static int DUMMY_INT = 0;


    // Instance variables
    // count of total transactions
    // count of transaction THIS connection
    // time in total transactions
    // time in transactions THIS connection
    // A simple list of objects that can be reused
    private boolean m_bTrace = false;
    /**
     *  Description of the Field
     */
    protected long m_lConnectStart = 0;
    /**
     *  Description of the Field
     */
    protected long m_lLockStart = 0;
    /**
     *  Description of the Field
     */
    protected long m_lLockCount = 0;
    /**
     *  Description of the Field
     */
    protected String m_strPurpose = "new";
    /**
     *  Description of the Field
     */
    protected boolean m_bForceReconnect = false;
    /**
     *  Description of the Field
     */
    //protected OPICMList m_olObjectPool = new OPICMList();
    // Database connection information
    private String m_strPDHDB = null;
    private String m_strPDHUser = null;
    private String m_strPDHPassword = null;
    private String m_strODSDB = null;
    private String m_strODSUser = null;
    private String m_strODSPassword = null;
    private String m_strODS2DB = null;  //RTC1119727
    private String m_strODS2User = null; //RTC1119727
    private String m_strODS2Password = null; //RTC1119727
    // Used for display and debug log messages
    //private D m_display = new D();
    // The instance name of middleware
    private String m_strInstanceName = "database";
    // Set by the database pool to identify connectionIDs when handed out
    private int m_iConnectionID = 0;
    // The database connection handle
    private Connection m_conPDHHandle = null;
    private Connection m_conODSHandle = null;
    private Connection m_conODS2Handle = null;   //RTC1119727 
    // The handle to the Statement
    private Statement m_rstmtHandle = null;
    // The handle to the CallableStatement
    private CallableStatement m_cstmtHandle = null;
    // The handle to the PreparedStatement
    private PreparedStatement m_pstmtHandle = null;
    // Prefix the log output with this value [if set]
    private String m_strLogPrefix = "";

    /**
     * Main method which performs a simple test of this class
     *
     * @param  args           The command line arguments
     * @exception  Exception
     */
    public static void main(String[] args) throws Exception {

        Database testDB = new Database();
        ReturnStatus returnStatus = new ReturnStatus(-1);

        D.isplay(Database.getVersion());
        D.ebug(D.EBUG_DETAIL, "in main:Return Status = " + returnStatus);

        ResultSet rsPDHTest = testDB.callGBL2028(returnStatus);

        while (rsPDHTest.next()) {
            D.ebug(D.EBUG_DETAIL, "PDH now     ==" + rsPDHTest.getString(1).trim() + "==");
            D.ebug(D.EBUG_DETAIL, "PDH forever ==" + rsPDHTest.getString(2).trim() + "==");
            D.ebug(D.EBUG_DETAIL, "PDH epoch   ==" + rsPDHTest.getString(3).trim() + "==");
        }

        rsPDHTest.close();
        testDB.commit();
        D.ebug(D.EBUG_DETAIL, "in main:Return Status = " + returnStatus);

        if (c_bHasODS) {
            ResultSet rsODSTest = testDB.callGBL9999(returnStatus);

            while (rsODSTest.next()) {
                D.ebug(D.EBUG_DETAIL, "ODS now     ==" + rsODSTest.getString(1).trim() + "==");
                D.ebug(D.EBUG_DETAIL, "ODS forever ==" + rsODSTest.getString(2).trim() + "==");
                D.ebug(D.EBUG_DETAIL, "ODS epoch   ==" + rsODSTest.getString(3).trim() + "==");
            }

            rsODSTest.close();
            testDB.commit();
        }
    }
    /**
     * Construct the Database object, load the JDBC driver for DB2 and enable/disable tracing - does not connect; takes parameters from middleware.properties file
     */
//  ### this will need to change for WASPool Adapter or perhaps create bogus constructor with string or something which does nothing
    public Database() {
        this(MiddlewareServerProperties.getPDHDatabaseURL(), MiddlewareServerProperties.getPDHDatabaseUser(), 
        MiddlewareServerProperties.getPDHDatabasePassword(), 
        MiddlewareServerProperties.getODSDatabaseURL(), 
        MiddlewareServerProperties.getODSDatabaseUser(), 
        MiddlewareServerProperties.getODSDatabasePassword(),
        MiddlewareServerProperties.getODS2DatabaseURL(), //RTC1119727
        MiddlewareServerProperties.getODS2DatabaseUser(), 
        MiddlewareServerProperties.getODS2DatabasePassword());
    }
    /**
     * Properties have changed, change appropriate behaviours
     */
    protected final void reloadProperties() {
    }
    /**
     * Construct the Database object, load the JDBC driver for DB2 and enable/disable tracing - does not connect
     *
     * @param  strPDHDB        Description of the Parameter
     * @param  strPDHUser      Description of the Parameter
     * @param  strPDHPassword  Description of the Parameter
     */
    public Database(String strPDHDB, String strPDHUser, String strPDHPassword) {
        this(strPDHDB, strPDHUser, strPDHPassword, "", "", "","","","");
    }
    public Database(String strPDHDB, String strPDHUser, String strPDHPassword, 
    		String strODSDB, String strODSUser, String strODSPassword){
    	  this(strPDHDB, strPDHUser, strPDHPassword, strODSDB, strODSUser, strODSPassword,"","","");
    }    
    /**
     * Construct the Database object, load the JDBC driver for DB2 and enable/disable tracing - does not connect
     *
     * @param  strPDHDB        Description of the Parameter
     * @param  strPDHUser      Description of the Parameter
     * @param  strPDHPassword  Description of the Parameter
     */
    public Database(String strPDHDB, String strPDHUser, String strPDHPassword, 
        String strODSDB, String strODSUser, String strODSPassword,
        String strODS2DB, String strODS2User, String strODS2Password) {

        // Redirect output if requested
        String strLogFileName = MiddlewareServerProperties.getLogFileName();

        if (strLogFileName.length() > 0) {
            D.ebugSetOut(strLogFileName);
        }

        D.ebugLevel(MiddlewareServerProperties.getDebugTraceLevel());
        D.ebug(MiddlewareServerProperties.getTrace());
        D.ebug(D.EBUG_DETAIL, "(Database) tracing enabled");
        D.ebug("eAnnounce Database Timestamp Version: <" + c_strBuildTimeStamp + ">");

        ++c_iInstanceCount;

        // Save connection information
        m_strPDHDB = strPDHDB;
        m_strPDHUser = strPDHUser;
        m_strPDHPassword = strPDHPassword;

        if (m_strPDHDB.length() > 0) {
            c_bHasPDH = true;
        }

        m_strODSDB = strODSDB;
        m_strODSUser = strODSUser;
        m_strODSPassword = strODSPassword;

        if (m_strODSDB.length() > 0) {
            c_bHasODS = true;
        }

        m_strODS2DB = strODS2DB; //RTC1119727
        m_strODS2User = strODS2User;
        m_strODS2Password = strODS2Password;

        if (m_strODS2DB.length() > 0) {
            c_bHasODS2 = true;
        } 
        
        c_strServerLDAP = MiddlewareServerProperties.getServerLDAP();
        c_bUsageLogging = MiddlewareServerProperties.getUsageLogging();

        Properties props = System.getProperties();

        props.put("mail.smtp.host", MiddlewareServerProperties.getSMTPServer());
        props.put("mail.smtp.connectiontimeout", MiddlewareServerProperties.getSMTPConnectTimeout());
        props.put("mail.smtp.timeout", MiddlewareServerProperties.getSMTPSendTimeout());
    }
    // New constructor to be used with WebSphere
    public Database(Connection _conPDHHandle) {

        // Redirect output if requested
        String strLogFileName = MiddlewareServerProperties.getLogFileName();

        if (strLogFileName.length() > 0) {
            D.ebugSetOut(strLogFileName);
        }


        D.ebugLevel(MiddlewareServerProperties.getDebugTraceLevel());
        D.ebug(MiddlewareServerProperties.getTrace());
        D.ebug(D.EBUG_DETAIL, "(Database) tracing enabled");
        D.ebug("eAnnounce Database Timestamp Version: <" + c_strBuildTimeStamp + ">");

        c_strServerLDAP = MiddlewareServerProperties.getServerLDAP();
        c_bUsageLogging = MiddlewareServerProperties.getUsageLogging();

        Properties props = System.getProperties();

        props.put("mail.smtp.host", MiddlewareServerProperties.getSMTPServer());
        props.put("mail.smtp.connectiontimeout", MiddlewareServerProperties.getSMTPConnectTimeout());
        props.put("mail.smtp.timeout", MiddlewareServerProperties.getSMTPSendTimeout());

        ++c_iInstanceCount;

        m_conPDHHandle = _conPDHHandle;
        c_bHasPDH = true;
    }
    // New constructor to be used with WebSphere
    public Database(Connection _conPDHHandle, Connection _conODSHandle) {

        // Redirect output if requested
        String strLogFileName = MiddlewareServerProperties.getLogFileName();

        if (strLogFileName.length() > 0) {
            D.ebugSetOut(strLogFileName);
        }

        D.ebugLevel(MiddlewareServerProperties.getDebugTraceLevel());
        D.ebug(MiddlewareServerProperties.getTrace());
        D.ebug(D.EBUG_DETAIL, "(Database) tracing enabled");
        D.ebug("eAnnounce Database Timestamp Version: <" + c_strBuildTimeStamp + ">");

        c_strServerLDAP = MiddlewareServerProperties.getServerLDAP();
        c_bUsageLogging = MiddlewareServerProperties.getUsageLogging();

        Properties props = System.getProperties();

        props.put("mail.smtp.host", MiddlewareServerProperties.getSMTPServer());
        props.put("mail.smtp.connectiontimeout", MiddlewareServerProperties.getSMTPConnectTimeout());
        props.put("mail.smtp.timeout", MiddlewareServerProperties.getSMTPSendTimeout());

        ++c_iInstanceCount;

        m_conPDHHandle = _conPDHHandle;
        m_conODSHandle = _conODSHandle;
        c_bHasPDH = true;
        c_bHasODS = true;
    }
    /**
     * Completely clean up the <code>Database</code> object
     *
     * @exception  MiddlewareException
     */
    public final void close() throws MiddlewareException {

        //--c_iInstanceCount;
        //
        // Close any Statement
        try {
            if (m_rstmtHandle != null) {
                m_rstmtHandle.close();
            }
        } catch (SQLException sx) {
            debug(D.EBUG_ERR, sx + " ");

            throw new MiddlewareException("SQL ERROR: m_rstmtHandle " + sx);
        } finally {
            m_rstmtHandle = null;
        }

        // Close any CallableStatement
        try {
            if (m_cstmtHandle != null) {
                m_cstmtHandle.close();
            }
        } catch (SQLException sx) {
            debug(D.EBUG_ERR, sx + " ");

            throw new MiddlewareException("SQL ERROR: m_cstmtHandle " + sx);
        } finally {
            m_cstmtHandle = null;
        }

        // Close any PreparedStatement
        try {
            if (m_pstmtHandle != null) {
                m_pstmtHandle.close();
            }
        } catch (SQLException sx) {
            debug(D.EBUG_ERR, sx + " ");

            throw new MiddlewareException("SQL ERROR: m_pstmtHandle " + sx);
        } finally {
            m_pstmtHandle = null;
        }

        // Close any Connection
        try {
            if (m_conPDHHandle != null) {
                m_conPDHHandle.close();
            }

            if (m_conODSHandle != null) {
                m_conODSHandle.close();
            }
            
            if (m_conODS2Handle != null) { //RTC1119727
                m_conODS2Handle.close();
            }            
        } catch (SQLException sx) {
            debug(D.EBUG_ERR, sx + " ");

            throw new MiddlewareException("SQL ERROR: m_conPDHHandle " + sx);
        } finally {
            m_conPDHHandle = null;
            m_conODSHandle = null;
            m_conODS2Handle = null;
        }

        test(m_rstmtHandle == null, "connect:rstatement handle is not null");
        test(m_cstmtHandle == null, "connect:statement handle is not null");
        test(m_pstmtHandle == null, "connect:pstatement handle is not null");
        test(m_conPDHHandle == null, "connect:Connection handle is not null");
    }
    /**
     *
     */
    public final void setPDHHandle(Connection _conPDHHandle) {
        m_conPDHHandle = _conPDHHandle;
        c_bHasPDH = true;
    }
    /**
     *
     */
    public final void setODSHandle(Connection _conODSHandle) {
        m_conODSHandle = _conODSHandle;
        c_bHasODS = true;
    }
    /**
     * get the connection for the specified db, only make the connection for the specified db
     * @param strNeedDB
     * @param spname
     * @return
     * @throws SQLException
     * @throws MiddlewareException
     */
    public final Connection getDBConnection(String strNeedDB, String spname) throws SQLException, MiddlewareException {
    	Connection conn = null;
        if (strNeedDB.equals("opicmods")) {
            if (!(c_bHasODS)) { 
            	throw new MiddlewareException("ODS database is not available for "+spname); 
            }
            if (m_conODSHandle == null) { 
                // Make a connection to the ODS database
            	debug(D.EBUG_DETAIL, "Making connection to ODS database '" + m_strODSDB + "' '" + m_strODSUser + "'");
            	m_conODSHandle = DriverManager.getConnection(m_strODSDB, m_strODSUser, m_strODSPassword);
            	test(m_conODSHandle != null, "connect:ODS Connection handle is null");
            	m_lConnectStart = System.currentTimeMillis();   	
            }
            conn = m_conODSHandle;
        } else if (strNeedDB.equals("opicmods2")) { //RTC1119727
            if (!(c_bHasODS2)) { 
            	throw new MiddlewareException("ODS2 database is not available for "+spname); 
            }
            if (m_conODS2Handle == null) { 
                // Make a connection to the ODS2 database
                debug(D.EBUG_DETAIL, "Making connection to ODS2 database '" + m_strODS2DB + "' '" + m_strODS2User + "'");
                m_conODS2Handle = DriverManager.getConnection(m_strODS2DB, m_strODS2User, m_strODS2Password);
                test(m_conODS2Handle != null, "connect:ODS2 Connection handle is null");
                m_lConnectStart = System.currentTimeMillis();
            }
            conn = m_conODS2Handle;
        } else {
            if (!(c_bHasPDH)) { 
            	throw new MiddlewareException("PDH database is not available for "+spname); 
            }
            if (m_conPDHHandle == null) {  
                // Make a connection to the PDH database
                debug(D.EBUG_DETAIL, "Making connection to PDH database '" + m_strPDHDB + "' '" + m_strPDHUser + "'");
                m_conPDHHandle = DriverManager.getConnection(m_strPDHDB, m_strPDHUser, m_strPDHPassword);
                test(m_conPDHHandle != null, "connect:Connection handle is null");
                m_lConnectStart = System.currentTimeMillis();
            }
            conn = m_conPDHHandle;
        }
        return conn;
    }
    /**
     * Make the actual connection to the database
     *
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final void connect() throws SQLException, MiddlewareException {

        if (m_strPDHDB.length() > 0) {
            c_bHasPDH = true;
        }

        if (m_strODSDB.length() > 0) {
            c_bHasODS = true;
        }
        
        if (m_strODS2DB.length() > 0) { //RTC1119727
            c_bHasODS2 = true;
        }

        // Make a connection to the PDH database
        if (c_bHasPDH) {
            debug(D.EBUG_DETAIL, "Making connection to PDH database '" + m_strPDHDB + "' '" + m_strPDHUser + "'");

            m_conPDHHandle = DriverManager.getConnection(m_strPDHDB, m_strPDHUser, m_strPDHPassword);

            test(m_conPDHHandle != null, "connect:Connection handle is null");
        }

        // Make a connection to the ODS database
        if (c_bHasODS) {
            debug(D.EBUG_DETAIL, "Making connection to ODS database '" + m_strODSDB + "' '" + m_strODSUser + "'");

            m_conODSHandle = DriverManager.getConnection(m_strODSDB, m_strODSUser, m_strODSPassword);

            test(m_conODSHandle != null, "connect:ODS Connection handle is null");
        }

        //RTC1119727 Make a connection to the ODS2 database
        if (c_bHasODS2) {
            debug(D.EBUG_DETAIL, "Making connection to ODS2 database '" + m_strODS2DB + "' '" + m_strODS2User + "'");

            m_conODS2Handle = DriverManager.getConnection(m_strODS2DB, m_strODS2User, m_strODS2Password);

            test(m_conODS2Handle != null, "connect:ODS2 Connection handle is null");
        }
        
        m_lConnectStart = System.currentTimeMillis();
    }
    /**
     * @return the <code>Connection</code> handle
     * @exception  MiddlewareException
     */
    public final Connection getPDHConnection() throws MiddlewareException {
        test(m_conPDHHandle != null, "getConnect:PDH Connection handle is null");

        return m_conPDHHandle;
    }
    public final Connection getODSConnection() throws MiddlewareException {
        test(m_conODSHandle != null, "getConnect:ODS Connection handle is null");

        return m_conODSHandle;
    }
    //RTC1119727
    public final Connection getODS2Connection() throws MiddlewareException {
        test(m_conODS2Handle != null, "getConnect:ODS2 Connection handle is null");

        return m_conODS2Handle;
    }
    /**
     * get the connection for the specified url
     * @param url
     * @return
     * @throws MiddlewareException
     */
    public final Connection getConnection(String url) throws MiddlewareException {
    	Connection conn = null;
    	// find the connection for this url
    	if(m_strPDHDB != null && m_strPDHDB.endsWith(url)){
    		conn = m_conPDHHandle;
    	} else if(m_strODSDB != null && m_strODSDB.endsWith(url)){
    		conn = m_conODSHandle;
    	} else if(m_strODS2DB != null && m_strODS2DB.endsWith(url)){
    		conn = m_conODS2Handle;
    	}
        test(conn != null, "getConnection "+url+" Connection handle is null");

        return conn;
    }    
    /**
     *  Sets the traceBase attribute of the Database object
     *
     * @param  _s  The new traceBase value
     * @return     Description of the Return Value
     */
    private String setTraceBase(String _s) {
        return "JDBC:" + _s;
    }
    /**
     * Checks to see if any Statement handles are open.
     *
     * @param  _strMessage  Description of the Parameter
     */
    public final void isPending(String _strMessage) {

        if (_strMessage.length() > 0) {
            _strMessage = " - " + _strMessage;
        }

        if (m_rstmtHandle != null) {
            debug(D.EBUG_DETAIL, "ERROR isPending:statement handle IS NOT null " + _strMessage);

            Exception x = new Exception();

            x.printStackTrace(System.out);
        }

        if (m_cstmtHandle != null) {
            debug(D.EBUG_DETAIL, "ERROR isPending:callablestatement handle IS NOT null " + _strMessage);

            Exception x = new Exception();

            x.printStackTrace(System.out);
        }

        if (m_pstmtHandle != null) {
            debug(D.EBUG_DETAIL, "ERROR isPending:preparedstatement handle IS NOT null " + _strMessage);

            Exception x = new Exception();

            x.printStackTrace(System.out);
        }
    }
    /**
     * Set the log prefix property
     */
    public final void setLogPrefix(String _strLogPrefix) {
        m_strLogPrefix = _strLogPrefix;
    }
    /**
     * Retrieves the log prefix property
     */
    public final String getLogPrefix() {
        return m_strLogPrefix;
    }
    /**
     * Checks to see if any Statement handles are open.
     */
    public final void isPending() {
        isPending("no location provided");
    }
    /**
     * Free each type of statement (Statement/CallableStatement/PreparedStatement)
     */
    public final void freeStatement() {

        if (m_rstmtHandle != null) {
            try {
                m_rstmtHandle.close();
            } catch (SQLException x) {
                debug(D.EBUG_DETAIL, "ERROR failure closing Statement in freeStatement");
            } finally {
                m_rstmtHandle = null;
            }
        }

        if (m_cstmtHandle != null) {
            try {
                m_cstmtHandle.close();
            } catch (SQLException x) {
                debug(D.EBUG_DETAIL, "ERROR failure closing CallableStatement in freeStatement");
            } finally {
                m_cstmtHandle = null;
            }
        }

        if (m_pstmtHandle != null) {
            try {
                m_pstmtHandle.close();
            } catch (SQLException x) {
                debug(D.EBUG_DETAIL, "ERROR failure closing PreparedStatement in freeStatement");
            } finally {
                m_pstmtHandle = null;
            }
        }
    }
    /**
     * Return the age of the connection
     *
     * @return    Milliseconds since connection to database was made
     */
    public final long getConnectionAge() {
        long lCurrentTime = System.currentTimeMillis();

        return (m_lConnectStart == 0) ? 0 : (lCurrentTime - m_lConnectStart);
    }
    /**
     * Return the age of the busy lock
     *
     * @return    Milliseconds since connection was locked for processing a SQL statement/call
     */
    public final long getLockAge() {
        long lCurrentTime = System.currentTimeMillis();

        return (m_lLockStart == 0) ? 0 : (lCurrentTime - m_lLockStart);
    }
    /**
     * Return the number of times this <code>Database</code> has been locked for a transaction
     *
     * @return    The lockCount value
     */
    public final long getLockCount() {
        return m_lLockCount;
    }
    /**
     * Return the purpose of this transaction
     *
     * @return    The purpose value
     */
    public final String getPurpose() {
        return m_strPurpose;
    }
    /**
     *  Sets the purpose attribute of the Database object
     *
     * @param  _strPurpose  The new purpose value
     */
    public final void setPurpose(String _strPurpose) {
        m_strPurpose = _strPurpose;
    }
    /**
     *  Sets the instanceName attribute of the Database object
     *
     * @param  _strInstanceName  The new instanceName value
     */
    public final void setInstanceName(String _strInstanceName) {
        m_strInstanceName = _strInstanceName;
    }
    /**
     *  Sets the connectionID attribute of the Database object
     *
     * @param  _i  The new connectionID value
     */
    protected final void setConnectionID(int _i) {
        m_iConnectionID = _i;
    }
    /**
     *  Gets the connectionID attribute of the Database object
     *
     * @return    The connectionID value
     */
    protected final int getConnectionID() {
        return m_iConnectionID;
    }
    /**
     * Return the force reconnect setting
     *
     * @return    The forceReconnect value
     */
    public final boolean getForceReconnect() {
        return m_bForceReconnect;
    }
    /**
     * @return    the date/time this class was generated
     */
    public final static String getVersion() {
        return "@date";
    }
    /**
     * Output display/debug message
     *
     * @param  _strMessage  Description of the Parameter
     */
    public final void display(String _strMessage) {
        //D d = m_display;

        D.isplay("[" + m_iConnectionID + "] " + _strMessage);
    }
    /**
     * Output display/debug message
     *
     * @param  _iDebugLevel  Description of the Parameter
     */
    public final void debugLevel(int _iDebugLevel) {
        //D d = m_display;

        D.ebugLevel(_iDebugLevel);
    }
    /**
     * Output display/debug message or not
     *
     * @param  _bDebug  Description of the Parameter
     */
    public final void debug(boolean _bDebug) {
        //D d = m_display;

        D.ebug(_bDebug);
    }
    /**
     * Output display/debug message
     *
     * @param  _iDebugLevel  Description of the Parameter
     * @param  _strMessage   Description of the Parameter
     */
    public final void debug(int _iDebugLevel, String _strMessage) {
        // D d = m_display;

        if (m_strLogPrefix.length() == 0) {
            D.ebug(_iDebugLevel, "[" + m_iConnectionID + "] " + _strMessage);
        } else {
            D.ebug(_iDebugLevel, m_strLogPrefix + " [" + m_iConnectionID + "] " + _strMessage);
        }
    }
    /**
     * Output display/debug message
     *
     * @param  _strMessage  Description of the Parameter
     */
    public final void debug(String _strMessage) {
        //D d = m_display;
        if (m_strLogPrefix.length() == 0) {
            D.ebug("[" + m_iConnectionID + "] " + _strMessage);
        } else {
            D.ebug(m_strLogPrefix + " [" + m_iConnectionID + "] " + _strMessage);
        }
    }
    /**
     * Output memory usage
     */
    public final void displayMemory() {
        //D d = m_display;
        D.isplayMemory();
    }
    /**
     * A simplistic assertion feature
     *
     * @param  _bValue                         Description of the Parameter
     * @param  _strCaseDescription             Description of the Parameter
     * @exception  MiddlewareRequestException  Description of the Exception
     */
    public final void test(boolean _bValue, String _strCaseDescription) throws MiddlewareRequestException {
        if (!_bValue) {
            display("Assertion failed: " + _strCaseDescription);

            throw new MiddlewareRequestException(_strCaseDescription);
        }
    }
    /**
     * Show the characteristics of the <code>Database</code> object
     *
     * @return    Description of the Return Value
     */
    public final String toString() {

        StringBuffer strbInfo = new StringBuffer();

        strbInfo.append("PULSE url: " + m_strPDHDB + "; user: " + m_strPDHUser + "; password: " + m_strPDHPassword);
        strbInfo.append(" instances: " + c_iInstanceCount);
        strbInfo.append(" lock count: " + getLockCount());
        strbInfo.append(" connection age: " + getConnectionAge() + " ms.");
        strbInfo.append(" lock age: " + getLockAge() + " ms.");
        strbInfo.append(" trace mode: " + m_bTrace);
        strbInfo.append(" force reconnect: " + m_bForceReconnect);

        return strbInfo.toString();
    }
    /**
     * Commit a SQL transaction
     *
     * @exception  SQLException
     */
    public final void commit() throws SQLException {
        if(m_conPDHHandle != null) {
            m_conPDHHandle.commit();
        }
    }
    /**
     * Rollback a SQL transaction
     *
     * @exception  SQLException
     */
    public final void rollback() throws SQLException {
        debug(D.EBUG_DETAIL, "rollback requested");
        m_conPDHHandle.rollback();
    }
    /**
     * Set the auto commit to true/false
     *
     * @param  bAutoCommit              The new autoCommit value
     * @exception  MiddlewareException
     * @exception  SQLException
     */
    public final void setAutoCommit(boolean bAutoCommit) throws MiddlewareException, SQLException {
        test(m_conPDHHandle != null, "setAutoCommit:Connection handle is null");
        m_conPDHHandle.setAutoCommit(bAutoCommit);
    }
    /**
     * Force a reconnect (new way)
     *
     * @param  bSetting  Description of the Parameter
     */
    public final void forceReconnect(boolean bSetting) {
        debug(D.EBUG_DETAIL, "reconnect will occur: " + bSetting);

        m_bForceReconnect = bSetting;
    }
    /**
     * Force a reconnect (old way) to the database
     */
    public final void reconnect() {
        debug(D.EBUG_DETAIL, "reconnect will occur");

        m_lLockStart = 1;
    }
    /**
     * hasPDH
     */
    public final boolean hasPDH() {
        return c_bHasPDH;
    }
    /**
     * hasODS
     */
    public final boolean hasODS() {
        return c_bHasODS;
    }
    /**
     * hasODS2  RTC1119727
     */
    public final boolean hasODS2() {
        return c_bHasODS2;
    }    
    
    /**
     * RTC1119727 close after checking gbl9999, connection may not be used again
     */
    public final void closeODS(){
    	if(hasODS() && m_conODSHandle !=null){
    		try {
				m_conODSHandle.close();
			} catch (SQLException e) {}
    		m_conODSHandle = null;
    	}
    }
    /**
     * RTC1119727 close after checking gbl99992, connection may not be used again 
     */
    public final void closeODS2(){
    	if(hasODS2() && m_conODS2Handle !=null){
    		try {
				m_conODS2Handle.close();
			} catch (SQLException e) {}
    		m_conODS2Handle = null;
    	}
    }
    /**
     * Get the current server-based dates as a <code>DatePackage</code>
     *
     * @return                          The dates value
     * @exception  MiddlewareException  Description of the Exception
     */
    public final DatePackage getDates() throws MiddlewareException {

        getNow();
        return new DatePackage(c_strNow, c_strForever, c_strEpoch);

    }

    /**
     * Get the current server-based date/time
     * this is a new way to get Server Based Now...
     *
     * @exception  MiddlewareException  Description of the Exception
     */
    public final void getNow() throws MiddlewareException {

        // The stored procedure ReturnStatus
        ReturnStatus returnStatus = new ReturnStatus(-1);
        MiddlewareException mx = null;
        String strMethod = "getNow.NEW";
        String strMyNow = "";

        debug(D.EBUG_DETAIL, strMethod + " transaction");

        //
        // Lets do some timings
        //
        long m_lStart = System.currentTimeMillis();
        long m_lFinish = 0;

        try {

            if (m_conPDHHandle == null) {
                connect();
            }

            Connection conn = m_conPDHHandle;

            // Build a string containing the SQL CALL statement with parameter markers
            String strSQL = "CALL opicm.GBL2828(?,?)";
            // If not connected to database, now is the time!
            // After making a connection, we should have a connection handle
            // Prepare the SQL
            m_cstmtHandle = conn.prepareCall(strSQL);
            // After preparing a statement, there should be a handle
            test(m_cstmtHandle != null, "geNow.NEW:Statement handle is null");

            //
            // Register output vars
            m_cstmtHandle.registerOutParameter(1, Types.INTEGER);
            m_cstmtHandle.registerOutParameter(2, Types.VARCHAR);

            m_cstmtHandle.setInt(1, returnStatus.intValue());
            m_cstmtHandle.setString(2, strMyNow);

            // This is an insert/update SP and EntityID will be returned
            // Execute the SQL statement
            m_cstmtHandle.executeUpdate();
            // Retrieve the return status
            returnStatus.setValue(m_cstmtHandle.getInt(1));
            strMyNow = m_cstmtHandle.getString(2);
 
            if(strMyNow.length()<26){
            	debug(D.EBUG_ERR, "getNow.NEW: did not return 26 chars: " + strMyNow);
            	//looks like trailing 0 was dropped
            	//Date is not a valid ISO date [2012-11-15-14.11.25.54393] should be 'yyyy-MM-dd-HH.mm.ss.SSS000'
            	strMyNow = strMyNow+"000000";
            	strMyNow = strMyNow.substring(0, 26);
            }

        } catch (RuntimeException rx) {
            mx = new MiddlewareException("(getNow.NEW) RuntimeException: " + rx);
            debug(D.EBUG_ERR, "RuntimeException trapped at getNow.NEW: " + rx);
            StringWriter writer = new StringWriter();
            rx.printStackTrace(new PrintWriter(writer));
            String x = writer.toString();
            debug(D.EBUG_ERR, "" + x);
        } catch (Exception x) {
            mx = new MiddlewareException("(getNow.NEW) Exception: " + x);
            debug(D.EBUG_ERR, "Exception trapped at getNow.NEW: " + x);
        } finally {
            m_lFinish = System.currentTimeMillis();
            long longDuration = m_lFinish - m_lStart;
            debug(D.EBUG_INFO, "timing getNow.NEW " + Stopwatch.format(longDuration));
            if (mx != null) {
                debug(D.EBUG_DETAIL, "exiting getNow.NEW - error");
                throw mx;
            } else {
                debug(D.EBUG_DETAIL, "exiting getNow.NEW");
            }
        }

        c_strNow = strMyNow;

        debug(D.EBUG_DETAIL, "MyNewgetNow:Now: " + c_strNow);
        debug(D.EBUG_DETAIL, "MyNewgetNow:Forever: " + c_strForever);
        debug(D.EBUG_DETAIL, "MyNewgetNow:Epoch: " + c_strEpoch);

        freeStatement();
        isPending();
        debug(D.EBUG_DETAIL, strMethod + " complete");

    }

    /**
     * Get the current server-based date/time with an Offset
     *
     * @param  _iOffSet                 Description of the Parameter
     * @return                          The now value
     * @exception  MiddlewareException  Description of the Exception
     */
    public final String getNow(int _iOffSet) throws MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        ResultSet rs = null;
        String strReturnDate = "1980-01-01-00.00.00.000000";
        // Information about exception location
        String strMethod = "getNow(offset)";
        String strSP = null;

        try {
            debug(D.EBUG_DETAIL, strMethod + " transaction");

            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            isPending();

            strSP = "gbl2029";
            rs = callGBL2029(returnStatus, _iOffSet);

            ReturnDataResultSet rdrs = new ReturnDataResultSet(rs);

            rs.close();

            rs = null;

            freeStatement();
            isPending();

            strReturnDate = rdrs.getColumnDate(0, 0);
            if(strReturnDate.length()<26){
            	debug(D.EBUG_ERR, strMethod+": did not return 26 chars: " + strReturnDate);
            	//looks like trailing 0 was dropped
            	//Date is not a valid ISO date [2012-11-15-14.11.25.54393] should be 'yyyy-MM-dd-HH.mm.ss.SSS000'
            	strReturnDate = strReturnDate+"000000";
            	strReturnDate = strReturnDate.substring(0, 26);
            }
        } catch (SQLException x) {
            // DO NOT ROLLBACK
            debug(D.EBUG_ERR, "SQLException trapped at: " + strMethod + "." + strSP + " " + x);

            throw new MiddlewareException("(" + strMethod + ") SQLException: " + x);
        } finally {
            try {
                if(rs!=null)
                rs.close();

                rs = null;
            } catch (Exception x) {}

            // DO NOT FREE THE CONNECTION
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }

        return strReturnDate;
    }
    /**
     * getBlob method
     *
     * @param  _prof                    Description of the Parameter
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @return                          The blob value
     * @exception  Exception
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final COM.ibm.opicmpdh.objects.Blob getBlob(Profile _prof, String entityType, int entityID, String attributeCode) throws Exception, SQLException, MiddlewareException {

       String strEnterprise = _prof.getEnterprise();
        int iNLSID = _prof.getReadLanguage().getNLSID();
        String strValOn = _prof.getValOn();
        String strEffOn = _prof.getEffOn();

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "nlsID: " + iNLSID);
        debug(D.EBUG_DETAIL, "valOn: " + strValOn);
        debug(D.EBUG_DETAIL, "effOn: " + strEffOn);

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        return BlobUtils.getBlob(this, m_conPDHHandle, _prof, entityType,entityID, attributeCode);
    }
    /**
     * getBlob method - used for cache
     *
     * @param  _prof                    Description of the Parameter
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @return                          The blob value
     * @exception  Exception
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final COM.ibm.opicmpdh.objects.Blob getBlobNow(Profile _prof, String entityType, int entityID, String attributeCode, int _iNLS) throws Exception, SQLException, MiddlewareException {
       String strEnterprise = _prof.getEnterprise();
        int iNLSID = ((_iNLS > 0) ? _iNLS : _prof.getReadLanguage().getNLSID());

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "nlsID: " + iNLSID);

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        return BlobUtils.getBlobNow(this, m_conPDHHandle, _prof, entityType, entityID, attributeCode, _iNLS);
    }

    /**
     * getBlob method that doesn't depend on nlsid
     *
     * @param  _prof                    Description of the Parameter
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @param  _nlsID                   Description of the Parameter
     * @return                          The blob value
     * @exception  Exception
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final COM.ibm.opicmpdh.objects.Blob getBlob(Profile _prof, String entityType, int entityID, String attributeCode, int _nlsID) throws Exception, SQLException, MiddlewareException {
        String strEnterprise = _prof.getEnterprise();
        String strValOn = _prof.getValOn();
        String strEffOn = _prof.getEffOn();

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "nlsID: " + _nlsID);
        debug(D.EBUG_DETAIL, "valOn: " + strValOn);
        debug(D.EBUG_DETAIL, "effOn: " + strEffOn);

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }
        return BlobUtils.getBlob(this,m_conPDHHandle,  _prof,  entityType, entityID, attributeCode,  _nlsID);
    }
    /**
     * putBlob method
     * used to update Blob attributes, not CACHE
     * @param  _prof                    Description of the Parameter
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @param  blobExtension            Description of the Parameter
     * @param  _iNLSID                  Description of the Parameter
     * @param  effFrom                  Description of the Parameter
     * @param  effTo                    Description of the Parameter
     * @param  attributeValue           Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final void putBlob(Profile _prof, String entityType, int entityID, String attributeCode, String blobExtension, int _iNLSID, String effFrom, String effTo, byte[] attributeValue) throws SQLException, MiddlewareException {
        debug(D.EBUG_DETAIL, "enterprise: " + _prof.getEnterprise());
        debug(D.EBUG_DETAIL, "OPWGID: " +  _prof.getOPWGID());
        debug(D.EBUG_DETAIL, "tranID: " + _prof.getTranID());
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "blobExtension: " + blobExtension);
        debug(D.EBUG_DETAIL, "nlsID: " + _iNLSID);
        debug(D.EBUG_DETAIL, "effFrom: " + effFrom);
        debug(D.EBUG_DETAIL, "effTo: " + effTo);
        test(attributeValue.length <= 52428800, "blob size > 50MB");

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        BlobUtils.putBlob(this,m_conPDHHandle,  _prof, entityType, entityID, attributeCode, blobExtension, _iNLSID, effFrom, effTo, attributeValue);
    }
 
    /**
     * putBlob method - doesnt seem to be used now
     *
     * @param  _prof                    Description of the Parameter
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @param  blobExtension            Description of the Parameter
     * @param  effFrom                  Description of the Parameter
     * @param  effTo                    Description of the Parameter
     * @param  attributeValue           Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final void putBlob(Profile _prof, String entityType, int entityID, String attributeCode, String blobExtension, String effFrom, String effTo, byte[] attributeValue) throws SQLException, MiddlewareException {
     String strEnterprise = _prof.getEnterprise();
        int iNLSID = _prof.getReadLanguage().getNLSID();
        int iOPWGID = _prof.getOPWGID();
        int iTranID = _prof.getTranID();

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "OPWGID: " + iOPWGID);
        debug(D.EBUG_DETAIL, "tranID: " + iTranID);
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "blobExtension: " + blobExtension);
        debug(D.EBUG_DETAIL, "nlsID: " + iNLSID);
        debug(D.EBUG_DETAIL, "effFrom: " + effFrom);
        debug(D.EBUG_DETAIL, "effTo: " + effTo);
        test(attributeValue.length <= 52428800, "blob size > 50MB");

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }
        
        BlobUtils.putBlob(this, m_conPDHHandle,_prof, entityType, 
			   entityID, attributeCode, blobExtension, effFrom, effTo, 
			   attributeValue);
    }
    /**
     * putBlob method that updates the record if it exists, insert into the table if it doesn't
     * used for CACHE and other blob types
     * @param  _prof                    Description of the Parameter
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @param  blobExtension            Description of the Parameter
     * @param  effFrom                  Description of the Parameter
     * @param  effTo                    Description of the Parameter
     * @param  attributeValue           Description of the Parameter
     * @param  _nlsID                   Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final void putBlob(Profile _prof, String entityType, int entityID, String attributeCode, String blobExtension, String effFrom, String effTo, byte[] attributeValue, int _nlsID) throws SQLException, MiddlewareException {

        debug(D.EBUG_DETAIL, "enterprise: " + _prof.getEnterprise());
        debug(D.EBUG_DETAIL, "OPWGID: " +  _prof.getOPWGID());
        debug(D.EBUG_DETAIL, "tranID: " + _prof.getTranID());
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "blobExtension: " + blobExtension);
        debug(D.EBUG_DETAIL, "nlsID: " + _nlsID);
        debug(D.EBUG_DETAIL, "effFrom: " + effFrom);
        debug(D.EBUG_DETAIL, "effTo: " + effTo);
        debug(D.EBUG_DETAIL, "strValOn: " + _prof.getValOn());
        debug(D.EBUG_DETAIL, "strEffOn: " + _prof.getEffOn());
        test(attributeValue.length <= 52428800, "blob size > 50MB");
       
        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }
        
        BlobUtils.putBlobCache(this, m_conPDHHandle, _prof, entityType, entityID, attributeCode, blobExtension, effFrom, effTo, attributeValue, _nlsID);
    }
    /**
     * deactivateBlob method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strEntityType           Description of the Parameter
     * @param  _iEntityID               Description of the Parameter
     * @param  _strAttributeCode        Description of the Parameter
     * @param  _iNLSID                  Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final void deactivateBlob(Profile _prof, String _strEntityType, int _iEntityID, String _strAttributeCode, int _iNLSID) throws SQLException, MiddlewareException {
    // Now and forever
        String strNow = null;
        String strEnterprise = _prof.getEnterprise();
        int iNLSID = _iNLSID;
        int iOPWGID = _prof.getOPWGID();
        int iTranID = _prof.getTranID();

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "OPWGID: " + iOPWGID);
        debug(D.EBUG_DETAIL, "tranID: " + iTranID);
        debug(D.EBUG_DETAIL, "entityType: " + _strEntityType);
        debug(D.EBUG_DETAIL, "entityID: " + _iEntityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + _strAttributeCode);
        debug(D.EBUG_DETAIL, "nlsID: " + iNLSID);

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        // Need to grab now and forever
        isPending();
        getNow();

        strNow = c_strNow;
        boolean success = false;

        try{
        	// Deactivate the existing BLOB row
        	BlobUtils.deactivateBlob("opicm.Blob", this,m_conPDHHandle, _prof, _strEntityType, _iEntityID, 
        			_strAttributeCode,iNLSID, strNow);

        	// Deactivate the existing BLOBx row
        	BlobUtils.deactivateBlob("opicm.BlobX", this,m_conPDHHandle, _prof, _strEntityType, _iEntityID, 
        			_strAttributeCode,iNLSID, strNow);
        	success = true;
        } catch (SQLException x) {
        	debug("deactivateBlob: ERROR deactivate blob " + x);
        	x.printStackTrace();
        }  finally{ // MN32174982
        	if(success){
        		commit();
        	}else{
        		try {
        			rollback();
        		} catch (SQLException sx) {
        			debug(D.EBUG_ERR, "deactivateBlob: rollback failed " + sx);
        		}
        	}
        	freeStatement();
        	isPending();
        }
    }
    /**
     * Used to hold transient relator information
     *
     * @author     davidbig
     * @created    April 25, 2003
     */
    protected class HoldInfo2 {
        /**
         *  Description of the Field
         */
        public String m_strRelatorType;
        /**
         *  Description of the Field
         */
        public int m_iRelatorID;
        /**
         *  Description of the Field
         */
        public String m_strEntity1Type;
        /**
         *  Description of the Field
         */
        public int m_iEntity1ID;
        /**
         *  Description of the Field
         */
        public String m_strEntity2Type;
        /**
         *  Description of the Field
         */
        public int m_iEntity2ID;

        /**
         * Constructor for the HoldInfo2 object
         *
         * @param  strRelatorType  Description of the Parameter
         * @param  iRelatorID      Description of the Parameter
         * @param  strEntity1Type  Description of the Parameter
         * @param  iEntity1ID      Description of the Parameter
         * @param  strEntity2Type  Description of the Parameter
         * @param  iEntity2ID      Description of the Parameter
         */
        public HoldInfo2(String strRelatorType, int iRelatorID, String strEntity1Type, int iEntity1ID, String strEntity2Type, int iEntity2ID) {
            m_strRelatorType = strRelatorType;
            m_iRelatorID = iRelatorID;
            m_strEntity1Type = strEntity1Type;
            m_iEntity1ID = iEntity1ID;
            m_strEntity2Type = strEntity2Type;
            m_iEntity2ID = iEntity2ID;
        }
        /**
         *  Description of the Method
         *
         * @return    Description of the Return Value
         */
        public String toString() {
            return "strRelatorType: " + m_strRelatorType + " iRelatorID: " + m_iRelatorID + " strEntity1Type: " + m_strEntity1Type + " iEntity1ID: " + m_iEntity1ID + " strEntity2Type: " + m_strEntity2Type + " iEntity2ID: " + m_iEntity2ID;
        }
        /**
         *  Gets the version attribute of the HoldInfo2 object
         *
         * @return    The version value
         */
        public final String getVersion() {
            return "$Id: database.txt,v 1.1091 2015/03/11 15:48:55 stimpsow Exp $";
        }
    }

    /**
     * Checks to see if the vector of transactions passes any server side rules
     *
     * @param  _vctTransactions                     Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareBusinessRuleException
     * @exception  MiddlewareException              Description of the Exception
     * @return     vctPartNos                       the Vector of any unique type Part Numbers (if any) being updated; so that we can release locks on them when we're through.
     */
    private Vector checkBusinessRules(int _iPartNoSessionID,Vector _vctTransactions) throws SQLException, MiddlewareBusinessRuleException, MiddlewareException {

        boolean bAuditPassed = true;
        MiddlewareBusinessRuleException mbrx = new MiddlewareBusinessRuleException("General Failure: Please see details");
        //Hashtable hshPN = new Hashtable();
        Vector vctAttributes = null;
        Text textCurrent = null;
        SingleFlag sfCurrent = null;
        MultipleFlag mfCurrent = null;
        ReturnEntityKey entCurrent = null;
        ReturnRelatorKey relCurrent = null;
        Vector vctPartNos = new Vector();

        Hashtable entityGroupTbl = new Hashtable();  // attempt to improve perf
        //getNow();
        for (int i = 0; i < _vctTransactions.size(); i++) {
            if (_vctTransactions.elementAt(i) instanceof ReturnEntityKey) {
                entCurrent = (ReturnEntityKey) _vctTransactions.elementAt(i);
                vctAttributes = entCurrent.m_vctAttributes;

                if (vctAttributes != null) {
                    // UNIQUE ATTRIBUTE VALIDATION
                    //debug(D.EBUG_DETAIL, "hasUniqueAttributeGroups for " + entCurrent.getEntityType() + "?" + entCurrent.hasUniqueAttributeGroups());
                    if(entCurrent.hasUniqueAttributeGroups()) {
                        Vector vctUag = entCurrent.getUniqueAttributeGroups();
			EntityGroup eg = (EntityGroup)entityGroupTbl.get(entCurrent.getEntityType()); // improve perf
			if(eg==null){
			    eg = new EntityGroup(null,this,((UniqueAttributeGroup)vctUag.firstElement()).getProfile(),
						entCurrent.getEntityType(),"Edit");
			    entityGroupTbl.put(eg.getEntityType(), eg);
			}
                        //debug(D.EBUG_DETAIL,"UniqueAttributeGroup vector size:" + vctUag.size());
                        for(int gb = 0; gb < vctUag.size(); gb++) {
                            UniqueAttributeGroup uagCurr = (UniqueAttributeGroup)vctUag.elementAt(gb);
                            //debug(D.EBUG_DETAIL,"UniqueAttributeGroup Database...isActive() for " + uagCurr.getKey() + ": " + uagCurr.isActive());
                            if(uagCurr.isActive()) {
                                //if(!uagCurr.validate(this,entCurrent.getEntityID())) {
                                if(!uagCurr.validate(this,entCurrent.getEntityID(),eg)) { // improve perf
                                    bAuditPassed = false;
                                    mbrx.add(uagCurr, uagCurr.getExceptionMessage());
                                } else {
                                    String strPartNo = uagCurr.getPartNo();
                                    if(!PartNo.exists(this,strPartNo.trim())) {
                                        PartNo.put(this,strPartNo.trim(),_iPartNoSessionID);
                                        vctPartNos.addElement(strPartNo.trim());
                                    } else {
                                        bAuditPassed = false;
                                        mbrx.add(uagCurr, uagCurr.getExceptionMessage() + " (transaction exists in pending work pool.)");
                                    }
                                }
                            }
                        }
                    }

                    // DEPENDENT ATTRIBUTE VALUE
                    debug(D.EBUG_DETAIL, "hasDependentAttributeValues for " + entCurrent.getEntityType() + "?" + entCurrent.hasDependentAttributeValues());
                    if(entCurrent.hasDependentAttributeValues()) {
                        Vector vctDav = entCurrent.getDependentAttributeValues();
                        debug(D.EBUG_DETAIL,"DependentAttributeValue vector size:" + vctDav.size());
                        for(int gb = 0; gb < vctDav.size(); gb++) {
                            DependentAttributeValue davCurr = (DependentAttributeValue)vctDav.elementAt(gb);
                            debug(D.EBUG_DETAIL,"DependentAttributeValue Database...isActive() for " + davCurr.getKey() + ": " + davCurr.isActive());
                            if(davCurr.isActive()) {
                                if(!davCurr.validate(this,vctAttributes)) {
                                    bAuditPassed = false;
                                    mbrx.add(davCurr, davCurr.getExceptionMessage());
                                } /*else {
                          String strPartNo = davCurr.getPartNo();
                          if(!PartNo.exists(this,strPartNo.trim())) {
                      PartNo.put(this,strPartNo.trim(),_iPartNoSessionID);
                              vctPartNos.addElement(strPartNo.trim());
                          } else {
                              bAuditPassed = false;
                              mbrx.add(davCurr, davCurr.getExceptionMessage() + " (transaction exists in pending work pool.)");
                          }
                      }*/
                            }
                        }
                    }
                    //

                    if(entCurrent.hasRule51Group()) {
                        debug(D.EBUG_DETAIL, "Rule 51 FOUND!!!");
                        Rule51Group r51g = entCurrent.getRule51Group();
                        if(!r51g.validate(this,"Database - rek")) {
                            bAuditPassed = false;
                            mbrx.add(r51g, r51g.getExceptionMessage());
                        } else {
                            for(int ig = 0; ig < r51g.getDomainEntityIDCount(); ig++) {

                                int iDomainEID = r51g.getDomainEntityID(ig);
                                String strPartNo = r51g.getPartNo(iDomainEID);

                                debug(D.EBUG_DETAIL,"Rule51, (Database, rek) checking PN reservation for:" + strPartNo + ", " + iDomainEID);


                                if(!PartNo.exists(this,strPartNo.trim())) {
                                    PartNo.put(this,strPartNo.trim(),_iPartNoSessionID);
                                    vctPartNos.addElement(strPartNo.trim());
                                } else {
                                    bAuditPassed = false;
                                    mbrx.add(r51g, r51g.getExceptionMessage() + " (transaction exists in pending work pool.)");
                                }
                            }
                        }
                    }

                    for (int j = 0; j < vctAttributes.size(); j++) {
                        if (vctAttributes.elementAt(j) instanceof Text) {
                            textCurrent = (Text) vctAttributes.elementAt(j);

                            debug(D.EBUG_DETAIL, "checkBusinessRules:Attribute:" + textCurrent.getAttributeCode());

                            if (textCurrent.getUnique()) {
                                if (textCurrent.getUniqueClass().equals("LEVEL1")) {
                                    String strWWKey = textCurrent.getAttributeValue() + textCurrent.getAttributeCode();

                                    if(!PartNo.exists(this,strWWKey.trim())) {
                                        PartNo.put(this,strWWKey.trim(),_iPartNoSessionID);
                                        vctPartNos.addElement(strWWKey.trim());
                                    } else {
                                        bAuditPassed = false;

                                        mbrx.add(textCurrent, textCurrent.getUniqueClass() + " Check.  " + textCurrent.getAttributeValue() + " (" + textCurrent.getLongDescription() + ") was recently issued in EACM by another user. (ok)");
                                    }
                                } else if (textCurrent.getUniqueClass().equals("LEVEL2") && textCurrent.getUniqueType().equals(textCurrent.getEntityType())) {
                                    String strWWKey = textCurrent.getAttributeValue() + textCurrent.getAttributeCode() + textCurrent.getEntityType();

                                    debug(D.EBUG_SPEW,"checkBusinessRules:Text--textCurrent.getUniqueClass():" + textCurrent.getUniqueClass() + "--textCurrent.getUniqueType():" + textCurrent.getUniqueType() + "--textCurrent.getEntityType():" + textCurrent.getEntityType());

                                    if(!PartNo.exists(this,strWWKey.trim())) {
                                        PartNo.put(this,strWWKey.trim(),_iPartNoSessionID);
                                        vctPartNos.addElement(strWWKey.trim());
                                    } else {
                                        bAuditPassed = false;

                                        mbrx.add(textCurrent, textCurrent.getUniqueClass() + " Check.  " + textCurrent.getAttributeValue() + " (" + textCurrent.getLongDescription() + ") was recently issued in EACM by another operator. (ok)");
                                    }
                                } else if (textCurrent.getUniqueClass().equals("LEVEL3")) {

                                    boolean bCheck = false;
                                    StringTokenizer st = new StringTokenizer(textCurrent.getUniqueType(),":");
                                    while(st.hasMoreTokens()) {
                                        if(st.nextToken().equals(textCurrent.getEntityType())) {
                                            bCheck = true;
                                        }
                                    }

                                    if(bCheck) {
                                        String strWWKey = textCurrent.getAttributeValue() + textCurrent.getAttributeCode() + textCurrent.getUniqueType();

                                        debug(D.EBUG_SPEW,"checkBusinessRules:Text--textCurrent.getUniqueClass():" + textCurrent.getUniqueClass() + "--textCurrent.getUniqueType():" + textCurrent.getUniqueType() + "--textCurrent.getEntityType():" + textCurrent.getEntityType());

                                        if(!PartNo.exists(this,strWWKey.trim())) {
                                            PartNo.put(this,strWWKey.trim(),_iPartNoSessionID);
                                            vctPartNos.addElement(strWWKey.trim());
                                        } else {
                                            bAuditPassed = false;

                                            mbrx.add(textCurrent, textCurrent.getUniqueClass() + " Check.  " + textCurrent.getAttributeValue() + " (" + textCurrent.getLongDescription() + ") was recently issued in EACM by another operator. (ok)");
                                        }
                                    }
                                }
                            } else if (textCurrent.m_bComboUnique) {
                                String strFlagAttributeCode = textCurrent.m_strComboAttributeCode;
                                String strFlagAttributeValue = textCurrent.m_strComboAttributeValue;
                                String strFlagAttributeDesc = textCurrent.m_strComboAttributeDesc;
                                String strComboUniqueGrouping = textCurrent.m_strComboUniqueGrouping;
                                //make sure this should be done for this entitytype
                                if("L".equals(strComboUniqueGrouping) || textCurrent.getEntityType().equals(strComboUniqueGrouping)){                       
	                                // Here .. we have to parse out all the flag codes ...
    	                            StringTokenizer st = new StringTokenizer(strFlagAttributeValue, ":");

        	                        while (st.hasMoreTokens()) {
            	                        String strFlagCode = st.nextToken();
                	                    String strComboKey = textCurrent.getAttributeValue() + ":" + textCurrent.getAttributeCode() + ":" + strFlagCode + ":" + strFlagAttributeCode + ":" + strComboUniqueGrouping;

                    	                if(!PartNo.exists(this,strComboKey.trim())) {
                        	                PartNo.put(this,strComboKey.trim(),_iPartNoSessionID);
                            	            vctPartNos.addElement(strComboKey.trim());
                                	    } else {
                                    	    bAuditPassed = false;

                                        	//mbrx.add(textCurrent, "Combo Check failed for " + textCurrent.getAttributeValue() + ":" + strFlagCode + " (" + textCurrent.getLongDescription() + ":" + strFlagAttributeDesc + ") was recently issued in EACM by another user.");
	                                        mbrx.add(textCurrent, "Combo Uniqueness Check failed. " + textCurrent.getLongDescription() + " (" +
    	                                        textCurrent.getAttributeValue() + ") and " +strFlagAttributeDesc + " (" + strFlagCode + ") was recently issued in EACM to another Entity.");
        	                            }
            	                    }
                                }
                            } else if (textCurrent.m_bComboUniqueOptional) {

                                // is the ~passed~ Text attribute the reuired half of combouniqueoptional?
                                boolean bRequired = textCurrent.m_bComboUniqueOptRequiredAtt;
                                boolean bCbOn = textCurrent.getControlBlock().isOn();

                                String strTxtAttributeCodeReq  = (bRequired?textCurrent.getAttributeCode():textCurrent.m_strComboAttributeCode);
                                String strTxtAttributeValueReq = (bRequired?textCurrent.getAttributeValue():textCurrent.m_strComboAttributeValue);
                                String strTxtAttributeCodeOpt  = (bRequired?textCurrent.m_strComboAttributeCode:textCurrent.getAttributeCode());
                                String strTxtAttributeValueOpt = (bRequired?textCurrent.m_strComboAttributeValue:(bCbOn?textCurrent.getAttributeValue():""));

                                String strComboKey = strTxtAttributeCodeReq + ":" + strTxtAttributeValueReq + ":" + strTxtAttributeCodeOpt + ":" + strTxtAttributeValueOpt;

                                D.ebug(D.EBUG_DETAIL,"textCurrent = " + textCurrent.getAttributeCode());
                                D.ebug(D.EBUG_DETAIL,"strComboKey:" + strComboKey);
                                D.ebug(D.EBUG_DETAIL,"bRequired:" + bRequired);

                                if(!bRequired) {

                                    if(!PartNo.exists(this,strComboKey.trim())) {
                                        PartNo.put(this,strComboKey.trim(),_iPartNoSessionID);
                                        vctPartNos.addElement(strComboKey.trim());
                                    } else {
                                        bAuditPassed = false;

                                        mbrx.add(textCurrent, "Combo Optional Check failed for " + strTxtAttributeValueReq + ":" + strTxtAttributeValueOpt + "(" + strTxtAttributeCodeReq + ":" + strTxtAttributeCodeOpt + ") was recently issued in EACM by another user.");
                                    }
                                }
                            }

                            // Now check any other general text rule
                            try {
                                checkIsolatedTextRules(textCurrent);
                            } catch (MiddlewareTextRuleException mtrx) {
                                // Fail the audit
                                bAuditPassed = false;

                                mbrx.add(textCurrent, mtrx.getMessage());
                            }catch(MiddlewareSFRuleException sfrx){
                            	// dont accumulate msgs for this, will get double msgs
                            	// put into mbre to get cleaner msg in JUI
                            	MiddlewareBusinessRuleException mbre = new MiddlewareBusinessRuleException("");
                            	mbre.add(textCurrent, sfrx.getMessage());
                            	throw mbre;
                            }
                        } else if (vctAttributes.elementAt(j) instanceof SingleFlag) {
                            sfCurrent = (SingleFlag) vctAttributes.elementAt(j);

                            debug(D.EBUG_DETAIL, "checkBusinessRules:SingleFlag:Attribute:" + sfCurrent.getAttributeCode());

                            // Uniqueness Check
                            if (sfCurrent.getUnique()) {
                                if (sfCurrent.getUniqueClass().equals("EACHECK")) {
                                    String strKey = sfCurrent.getAttributeValue() + sfCurrent.getAttributeCode() + sfCurrent.getEntityType();

                                    // Check in this post.. and in other posts that could be happening in this middleware server
                                    // at the same time..


                                    if(!PartNo.exists(this,strKey.trim())) {
                                        PartNo.put(this,strKey.trim(),_iPartNoSessionID);
                                        vctPartNos.addElement(strKey.trim());
                                    } else {
                                        bAuditPassed = false;

                                        mbrx.add(sfCurrent, sfCurrent.getUniqueClass() + " check.  " + sfCurrent.getEntityType() + ":" + sfCurrent.m_strDescription + "(" + sfCurrent.getAttributeCode() + ") - " + sfCurrent.m_strFlagDescription + " was recently issued in EACM by another user. (ok)");
                                    }
                                }

                                // GAB 092606 - add LEVEL1/LEVEL2 (now, LEVEL3) check for flags
                                else if (sfCurrent.getUniqueClass().equals("LEVEL1")) {
                                    String strWWKey = sfCurrent.getAttributeValue() + sfCurrent.getAttributeCode();

                                    if(!PartNo.exists(this,strWWKey.trim())) {
                                        PartNo.put(this,strWWKey.trim(),_iPartNoSessionID);
                                        vctPartNos.addElement(strWWKey.trim());
                                    } else {
                                        bAuditPassed = false;

                                        mbrx.add(sfCurrent, sfCurrent.getUniqueClass() + " Check.  " + sfCurrent.getAttributeValue() + " (" + sfCurrent.getLongDescription() + ") was recently issued in EACM by another user. (ok)");
                                    }
                                } else if (sfCurrent.getUniqueClass().equals("LEVEL2") && sfCurrent.getUniqueType().equals(sfCurrent.getEntityType())) {

                                    debug(D.EBUG_SPEW,"checkBusinessRules:SingleFlag--sfCurrent.getUniqueClass():" + sfCurrent.getUniqueClass() + "--sfCurrent.getUniqueType():" + sfCurrent.getUniqueType() + "--sfCurrent.getEntityType():" + sfCurrent.getEntityType());

                                    String strWWKey = sfCurrent.getAttributeValue() + sfCurrent.getAttributeCode() + sfCurrent.getEntityType();

                                    if(!PartNo.exists(this,strWWKey.trim())) {
                                        PartNo.put(this,strWWKey.trim(),_iPartNoSessionID);
                                        vctPartNos.addElement(strWWKey.trim());
                                    } else {
                                        bAuditPassed = false;

                                        mbrx.add(sfCurrent, sfCurrent.getUniqueClass() + " Check.  " + sfCurrent.getAttributeValue() + " (" + sfCurrent.getLongDescription() + ") was recently issued in EACM by another operator. (ok)");
                                    }
                                } else if (sfCurrent.getUniqueClass().equals("LEVEL3")) {

                                    boolean bCheck = false;
                                    StringTokenizer st = new StringTokenizer(sfCurrent.getUniqueType(),":");
                                    while(st.hasMoreTokens()) {
                                        if(st.nextToken().equals(sfCurrent.getEntityType())) {
                                            bCheck = true;
                                        }
                                    }

                                    if(bCheck) {
                                        debug(D.EBUG_SPEW,"checkBusinessRules:SingleFlag--sfCurrent.getUniqueClass():" + sfCurrent.getUniqueClass() + "--sfCurrent.getUniqueType():" + sfCurrent.getUniqueType() + "--sfCurrent.getEntityType():" + sfCurrent.getEntityType());

                                        String strWWKey = sfCurrent.getAttributeValue() + sfCurrent.getAttributeCode() + sfCurrent.getUniqueType();

                                        if(!PartNo.exists(this,strWWKey.trim())) {
                                            PartNo.put(this,strWWKey.trim(),_iPartNoSessionID);
                                            vctPartNos.addElement(strWWKey.trim());
                                        } else {
                                            bAuditPassed = false;

                                            mbrx.add(sfCurrent, sfCurrent.getUniqueClass() + " Check.  " + sfCurrent.getAttributeValue() + " (" + sfCurrent.getLongDescription() + ") was recently issued in EACM by another operator. (ok)");
                                        }
                                    }
                                }
                                //
                            } else if (sfCurrent.m_bComboUnique) {
                                String strTextAttributeCode = sfCurrent.m_strComboAttributeCode;
                                String strTextAttributeValue = sfCurrent.m_strComboAttributeValue;
                                String strTextAttributeDesc = sfCurrent.m_strComboAttributeDesc;
                                String strComboUniqueGrouping = sfCurrent.m_strComboUniqueGrouping;
                                //make sure this should be done for this entitytype
                                if("L".equals(strComboUniqueGrouping) || sfCurrent.getEntityType().equals(strComboUniqueGrouping)){                           
	                                String strComboKey = sfCurrent.getAttributeValue() + ":" + sfCurrent.getAttributeCode() + ":" + strTextAttributeValue + ":" + strTextAttributeCode + ":" + strComboUniqueGrouping;
    	                            if(!PartNo.exists(this,strComboKey.trim())) {
        	                            PartNo.put(this,strComboKey.trim(),_iPartNoSessionID);
            	                        vctPartNos.addElement(strComboKey.trim());
                	                } else {
                    	                bAuditPassed = false;

                        	           // mbrx.add(textCurrent, "Combo Check failed for " + sfCurrent.getAttributeValue() + ":" + strTextAttributeValue + " (" + sfCurrent.getLongDescription() + ":" + strTextAttributeDesc + ") was recently issued in EACM by another user.");
                            	        mbrx.add(sfCurrent, "Combo Uniqueness Check failed. " + strTextAttributeDesc + " (" +
                                    		strTextAttributeValue + ") and " +sfCurrent.getLongDescription() + " (" + sfCurrent.m_strFlagDescription + ") was recently issued in EACM to another Entity.");
                                	}
                                }
                            }

                            try {
                                checkSingleFlagRules(sfCurrent);
                            } catch (MiddlewareSFRuleException msfrx) {
                                bAuditPassed = false;

                                mbrx.add(sfCurrent, msfrx.getMessage());
                            }
                        } else if (vctAttributes.elementAt(j) instanceof MultipleFlag) {
                            mfCurrent = (MultipleFlag) vctAttributes.elementAt(j);

                            debug(D.EBUG_DETAIL, "checkBusinessRules:MultiFlag:Attribute:" + mfCurrent.getAttributeCode());

                            if (mfCurrent.m_bComboUnique) {
                                String strTextAttributeCode = mfCurrent.m_strComboAttributeCode;
                                String strTextAttributeValue = mfCurrent.m_strComboAttributeValue;
                                String strTextAttributeDesc = mfCurrent.m_strComboAttributeDesc;
                                String strComboUniqueGrouping = mfCurrent.m_strComboUniqueGrouping;
                                //make sure this should be done for this entitytype
                                if("L".equals(strComboUniqueGrouping) || mfCurrent.getEntityType().equals(strComboUniqueGrouping)){
                                	String strComboKey = mfCurrent.getAttributeValue() + ":" + mfCurrent.getAttributeCode() + ":" + strTextAttributeValue + ":" + strTextAttributeCode + ":" + strComboUniqueGrouping;
                                	if(!PartNo.exists(this,strComboKey.trim())) {
                                    	PartNo.put(this,strComboKey.trim(),_iPartNoSessionID);
                                   	 vctPartNos.addElement(strComboKey.trim());
                                	} else {
                                    	bAuditPassed = false;

                                    	//mbrx.add(textCurrent, "Combo Check failed for " + mfCurrent.getAttributeValue() + ":" + strTextAttributeValue + " (" + mfCurrent.getLongDescription() + ":" + strTextAttributeDesc + ") was recently issued in EACM by another user.");
                                    	mbrx.add(mfCurrent, "Combo Uniqueness Check failed. " + strTextAttributeDesc + " (" +
                                    		strTextAttributeValue + ") and " +mfCurrent.getLongDescription() + " (" + mfCurrent.m_strFlagDescription + ") was recently issued in EACM to another Entity.");
                                	}
                                }
                            }

                            try {
                                checkMultiFlagRules(mfCurrent);
                            } catch (MiddlewareSFRuleException msfrx) {
                                bAuditPassed = false;

                                mbrx.add(sfCurrent, msfrx.getMessage());
                            }
                        }
                    }
                }
            } else if (_vctTransactions.elementAt(i) instanceof ReturnRelatorKey) {
                relCurrent = (ReturnRelatorKey) _vctTransactions.elementAt(i);
                debug(D.EBUG_DETAIL, "Rule 51 processing rrk in db.update!!!");
                if(relCurrent.hasRule51Group()) {
                    debug(D.EBUG_DETAIL, "Rule 51 FOUND!!! - rrk, database");
                    Rule51Group r51g = relCurrent.getRule51Group();
                    if(!r51g.validate(this,"Database - rrk")) {
                        bAuditPassed = false;
                        mbrx.add(r51g, r51g.getExceptionMessage());
                    } else {
                        for(int ig = 0; ig < r51g.getDomainEntityIDCount(); ig++) {

                            int iDomainEID = r51g.getDomainEntityID(ig);
                            String strPartNo = r51g.getPartNo(iDomainEID);

                            debug(D.EBUG_DETAIL,"Rule51, (Database, rrk) checking PN reservation for:" + strPartNo + ", " + iDomainEID);

                            if(!PartNo.exists(this,strPartNo.trim())) {
                                PartNo.put(this,strPartNo.trim(),_iPartNoSessionID);
                                vctPartNos.addElement(strPartNo.trim());
                            } else {
                                bAuditPassed = false;
                                mbrx.add(r51g, r51g.getExceptionMessage() + " (transaction exists in pending work pool.)");
                            }
                        }
                    }
                } else {
                    debug(D.EBUG_DETAIL, "Rule 51 NOT FOUND... - rrk");
                }
            }
        }
        
        entityGroupTbl.clear(); // improve perf
        entityGroupTbl = null;

        if (!bAuditPassed) {
            mbrx.setLockedPartNumbers(vctPartNos);
            throw mbrx;
        }
        return vctPartNos;
    }

    /**
     * Checks for textbased business rules 
     * Throws a MiddlewareTextRuleException if a problem is found
     *
     * @param  _txt                             Description of the Parameter
     * @exception  SQLException                 Description of the Exception
     * @exception  MiddlewareException          Description of the Exception
     * @exception  MiddlewareTextRuleException  Description of the Exception
     */
    private void checkIsolatedTextRules(Text _txt) throws SQLException, MiddlewareException, MiddlewareTextRuleException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        ResultSet rs = null;
        //String strSP = null;
        // Information about exception location
        String strEnterprise = _txt.getEnterprise();
        String strEntityType = _txt.getEntityType();
        int iEntityID = _txt.getEntityID();
        String strAttributeCode = _txt.getAttributeCode();
        String strAttributeDesc = _txt.getLongDescription();
        String strAttributeValue = _txt.getAttributeValue();
        //String strEffFrom = _txt.getControlBlock().getEffFrom();
        //String strEffTo = _txt.getControlBlock().getEffTo();
        String strUniqueType = _txt.getUniqueType();
        String strUniqueClass = _txt.getUniqueClass();
        boolean bUnique = _txt.getUnique();
        boolean bComboUnique = _txt.m_bComboUnique;
        boolean bComboUniqueOptional = _txt.m_bComboUniqueOptional;
        String strFlagAttributeCode = _txt.m_strComboAttributeCode;
        String strFlagAttributeValue = _txt.m_strComboAttributeValue;
        String strFlagAttributeDesc = _txt.m_strComboAttributeDesc;
        String strComboUniqueGrouping = _txt.m_strComboUniqueGrouping;

        try {
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:strEnterprise " + strEnterprise);
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:strEntityType " + strEntityType);
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:iEntityID " + iEntityID);
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:strAttributeCode " + strAttributeCode);
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:strLongDescription " + strAttributeDesc);
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:strAttributeValue " + strAttributeValue);
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:strComboUniqueGrouping " + strComboUniqueGrouping);
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:bUnique " + bUnique + ":" + strUniqueType + ":" + strUniqueClass);
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:bComboUnique " + bComboUnique + 
            		(bComboUnique?(":" + strFlagAttributeCode + ":" + strFlagAttributeValue + ":" + strFlagAttributeDesc):""));
            debug(D.EBUG_SPEW, "checkIsolatedTextAudit:bComboUniqueOptional " + bComboUniqueOptional + 
            		(bComboUniqueOptional?(":" + strFlagAttributeCode + ":" + strFlagAttributeValue + ":" + strFlagAttributeDesc):""));

            // Lets check for uniqueness here
            if (bUnique) {
                // is it a generic Level1 check?
                if (strUniqueClass.equals("LEVEL1")) {
                    //strSP = "GBL2927";
                    rs = callGBL2927(returnStatus, strEnterprise, strEntityType, iEntityID, strUniqueType, strAttributeValue);

                    int icount = 0;
                    while (rs.next()) {
                        icount = rs.getInt(1);
                    }

                    rs.close();
                    rs = null;

                    freeStatement();
                    isPending();

                    if (icount > 0) {
                        debug(D.EBUG_ERR, "checkIsolatedTextRules:" + strUniqueClass + ":" + strUniqueType + ":" + strEntityType + ":" + iEntityID + ":" + strAttributeCode + ":" + strAttributeValue.trim());
                        throw new MiddlewareTextRuleException(strUniqueClass + " check.  " + strAttributeValue + " (" + strAttributeDesc + ") is already in PDH.  (ok)");
                    }
                } else if (strUniqueClass.equals("LEVEL2") && strUniqueType.equals(strEntityType)) {
                    //strSP = "GBL0027";
                    rs = callGBL0027(returnStatus, strEnterprise, strEntityType, iEntityID, strUniqueType, strAttributeValue,"LEVEL2");
                    int icount = 0;
                    while (rs.next()) {
                        icount = rs.getInt(1);
                    }

                    rs.close();
                    rs = null;

                    freeStatement();
                    isPending();

                    if (icount > 0) {
                        debug(D.EBUG_ERR, "checkIsolatedTextRules:" + strUniqueClass + ":" + strUniqueType + ":" + strEntityType + ":" + iEntityID + ":" + strAttributeCode + ":" + strAttributeValue.trim());
                        throw new MiddlewareTextRuleException(strUniqueClass + " check.  " + strAttributeValue + " (" + strAttributeDesc + ") is already in PDH.  (ok)");
                    }
                } else if(strUniqueClass.equals("LEVEL3")) { //GAB 100906
                    boolean bRunCheck = false;
                    // Let's first scan our etypes and see if this is even applicable to us.
                    StringTokenizer stok = new StringTokenizer(strUniqueType, ":");
                    while (stok.hasMoreTokens()) {
                        String strEntityTypeCheck = stok.nextToken();
                        if(strEntityTypeCheck.equals(strEntityType)) {
                            bRunCheck = true;
                        }
                    }

                    if(bRunCheck) {
                        stok = new StringTokenizer(strUniqueType, ":");

                        while (stok.hasMoreTokens()) {
                            String strEntityTypeCheck = stok.nextToken();
                            int iEntityIDCheck = -9;
                            if(strEntityTypeCheck.equals(strEntityType)) {
                                iEntityIDCheck = iEntityID;
                            }

                            rs = callGBL0027(returnStatus, strEnterprise, strEntityTypeCheck, iEntityIDCheck, strUniqueType, strAttributeValue,"LEVEL3");
                            int icount = 0;
                            while (rs.next()) {
                                icount = rs.getInt(1);
                            }

                            rs.close();
                            rs = null;

                            freeStatement();
                            isPending();

                            if (icount > 0) {
                                debug(D.EBUG_ERR, "checkIsolatedTextRules:" + strUniqueClass + ":" + strUniqueType + ":" + strEntityType + ":" + iEntityID + ":" + strAttributeCode + ":" + strAttributeValue.trim());
                                throw new MiddlewareTextRuleException(strUniqueClass + " check.  " + strAttributeValue + " (" + strAttributeDesc + ") is already in PDH.  (ok)");
                            }
                        }
                    }
                }
            } else if (bComboUnique) {
            	// this is just unique combo of flag and text
                if(strComboUniqueGrouping != null && strComboUniqueGrouping.equals("L")) {
                    boolean bpass = true;
                    // Here .. we have to parse out all the flag codes ...
                    StringTokenizer st = new StringTokenizer(strFlagAttributeValue, ":");
                    while (st.hasMoreTokens()) {
                        String strFlagCode = st.nextToken();

                        rs = callGBL2930(returnStatus, strEnterprise, strFlagAttributeCode, strFlagCode, strAttributeCode, strAttributeValue);
                        int icount = 0;
                        while (bpass && rs.next()) {
                            icount = rs.getInt(1);
                            bpass = icount == iEntityID;
                        }

                        rs.close();
                        rs = null;

                        freeStatement();
                        isPending();

                        if (!bpass) {
                            debug(D.EBUG_ERR, "checkIsolatedTextRules: COMBOCHECK fails for " + strEntityType + ":" + iEntityID + ". " + strFlagCode + ":" + strAttributeValue + " (" + strFlagAttributeCode + ":" + strAttributeCode + ") is already in PDH. (ok)");
                            throw new MiddlewareSFRuleException("checkIsolatedTextRules: COMBOCHECK fails for " + strEntityType + ":" + iEntityID + ". " + strFlagCode + ":" + strAttributeValue + " (" + strFlagAttributeCode + ":" + strAttributeCode + ") is already in PDH. (ok)");
                        }
                    }
                } else if(strComboUniqueGrouping != null && strEntityType.equals(strComboUniqueGrouping)) { // By EntityType case
                	_txt.checkComboExt(this); //BH SR87, SR655
                }
            } else if (bComboUniqueOptional) {

                // is the ~passed~ Text attribute the required half of combouniqueoptional?
                boolean bRequired = _txt.m_bComboUniqueOptRequiredAtt;

                // this might seem redundant - is done above, but assumes pair is a Flag Attribute.
                String strTxtAttributeCodeReq  = (bRequired?strAttributeCode:_txt.m_strComboAttributeCode);
                String strTxtAttributeValueReq = (bRequired?strAttributeValue:_txt.m_strComboAttributeValue);
                String strTxtAttributeDescReq  = (bRequired?strAttributeDesc:_txt.m_strComboAttributeDesc);
                String strTxtAttributeCodeOpt  = (bRequired?_txt.m_strComboAttributeCode:strAttributeCode);
                String strTxtAttributeValueOpt = (bRequired?_txt.m_strComboAttributeValue:strAttributeValue);
                String strTxtAttributeDescOpt  = (bRequired?_txt.m_strComboAttributeDesc:strAttributeDesc);

                boolean bpass = true;

                debug(D.EBUG_SPEW,"call gbl2931(" + strEnterprise + "," + strTxtAttributeCodeReq + "," + strTxtAttributeValueReq + "," + strTxtAttributeCodeOpt);

                rs = callGBL2931(returnStatus, strEnterprise, strTxtAttributeCodeReq, strTxtAttributeValueReq, strTxtAttributeCodeOpt);
                ReturnDataResultSet rdrs2931 = new ReturnDataResultSet(rs);
                rs.close();
                rs = null;
                freeStatement();
                isPending();

                RS_LOOP:
                    for(int iRow = 0; iRow < rdrs2931.getRowCount(); iRow++) {
                        String strEntityType_rs = rdrs2931.getColumn(iRow,0).trim();
                        int iEntityID_rs = rdrs2931.getColumnInt(iRow,1);
                        String strAttValOpt_rs = rdrs2931.getColumn(iRow,2).trim();

                        debug(D.EBUG_SPEW,"gbl2931 answer[" + iRow + "]:" + strEntityType_rs + ":" + iEntityID_rs + ":" + strAttValOpt_rs);

                        // if we got back ourself as answer --> we dont care
                        if(strEntityType_rs.equals(strEntityType) && iEntityID_rs == iEntityID) {
                            continue;
                        }
                        // if we match on a different Entity --> not a pass.
                        //   this takes care of the non-existent optional attribute b/c '' from rs will equal
                        //   "" from _txt.m_strComboAttributeValue.
                        if(strAttValOpt_rs.equals(strTxtAttributeValueOpt)) {
                            bpass = false;
                            break RS_LOOP;
                        }
                    }
                if (!bpass) {
                    debug(D.EBUG_ERR, "checkIsolatedTextRules: COMBOOPTIONALCHECK fails for " + strEntityType + ":" + iEntityID + ". " + strTxtAttributeValueReq + ":" + strTxtAttributeValueOpt + " (" + strTxtAttributeCodeReq + ":" + strTxtAttributeCodeOpt + ") is already in PDH. (ok)");
                    String strExcMessage = "Combined attributes (second attribute is optional) uniqueness check failed: " + strTxtAttributeDescReq + ":" + strTxtAttributeDescOpt;
                    throw new MiddlewareTextRuleException(strExcMessage);
                    //throw new MiddlewareSFRuleException("checkIsolatedTextRules: COMBOOPTIONALCHECK fails for " + strEntityType + ":" + iEntityID + ". " + strTxtAttributeValueReq + ":" + strTxtAttributeValueOpt + " (" + strTxtAttributeCodeReq + ":" + strTxtAttributeCodeOpt + ") is already in PDH. (ok)");
                }
            }
        } finally {
            // Free any statement
            freeStatement();
            isPending();
        }
    }

    private void checkSingleFlagRules(SingleFlag _sf) throws SQLException, MiddlewareException, MiddlewareSFRuleException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        ResultSet rs = null;
        // Information about exception location
        String strEnterprise = _sf.getEnterprise();
        String strEntityType = _sf.getEntityType();
        int iEntityID = _sf.getEntityID();
        String strAttributeCode = _sf.getAttributeCode();
        String strAttributeValue = _sf.getAttributeValue();
        // String strEffFrom = _sf.getControlBlock().getEffFrom();
        // String strEffTo = _sf.getControlBlock().getEffTo();
        String strUniqueType = _sf.getUniqueType();
        String strUniqueClass = _sf.getUniqueClass();
        String strFlagDescription = _sf.m_strFlagDescription;
        String strDescription = _sf.m_strDescription;
        String strTextAttributeCode = _sf.m_strComboAttributeCode;
        String strTextAttributeValue = _sf.m_strComboAttributeValue;
        //String strTextAttibuteDesc = _sf.m_strComboAttributeDesc;
        String strComboUniqueGrouping = _sf.m_strComboUniqueGrouping;
        boolean bUnique = _sf.getUnique();
        boolean bComboUnique = _sf.m_bComboUnique;

        try {
            debug(D.EBUG_SPEW, "checkSingleFlagRules:strEnterprise " + strEnterprise);
            debug(D.EBUG_SPEW, "checkSingleFlagRules:strEntityType " + strEntityType);
            debug(D.EBUG_SPEW, "checkSingleFlagRules:iEntityID " + iEntityID);
            debug(D.EBUG_SPEW, "checkSingleFlagRules:strAttributeCode " + strAttributeCode);
            debug(D.EBUG_SPEW, "checkSingleFlagRules:strAttributeValue " + strAttributeValue);
            debug(D.EBUG_SPEW, "checkSingleFlagRules:strComboUniqueGrouping " + strComboUniqueGrouping);
            debug(D.EBUG_SPEW, "checkSingleFlagRules:Unique " + bUnique +
            		(bUnique?(":" + strUniqueType + ":" + strUniqueClass):""));
            debug(D.EBUG_SPEW, "checkSingleFlagRules:ComboUnique " + bComboUnique +
            		(bComboUnique?(":" + strTextAttributeCode + ":" + strTextAttributeValue):""));

            // Lets check for uniqueness here
            if (bUnique) {
                // is it a generic EntityAttribute check?
                if (strUniqueClass.equals("EACHECK")) {
                    rs = callGBL2926(returnStatus, strEnterprise, strEntityType, iEntityID, strAttributeCode, strAttributeValue);

                    int icount = 0;
                    while (rs.next()) {
                        icount = rs.getInt(1);
                    }

                    rs.close();
                    rs = null;

                    freeStatement();
                    isPending();

                    if (icount > 0) {
                        debug(D.EBUG_ERR, "checkSingleFlagRules EACHECK fails for " + strEntityType + ":" + iEntityID + ":" + strDescription + "(" + strAttributeCode + ") - " + strFlagDescription + " is already in PDH. (ok)");
                        // Need a description here...
                        throw new MiddlewareSFRuleException("checkSingleFlagRules EACHECK fails for " + strEntityType + ":" + iEntityID + ":" + strDescription + "(" + strAttributeCode + ") - " + strFlagDescription + " is already in PDH. (ok)");
                    }
                } else if (strUniqueClass.equals("LEVEL1")) {
                    rs = callGBL0032(returnStatus, strEnterprise, strEntityType, iEntityID, strUniqueType, strAttributeValue);

                    int icount = 0;
                    while (rs.next()) {
                        icount = rs.getInt(1);
                    }

                    rs.close();
                    rs = null;

                    freeStatement();
                    isPending();

                    if (icount > 0) {
                        debug(D.EBUG_ERR, "checkSingleFlagRules LEVEL1 fails for " + strEntityType + ":" + iEntityID + ":" + strDescription + "(" + strAttributeCode + ") - " + strFlagDescription + " is already in PDH. (ok)");
                        // Need a description here...
                        throw new MiddlewareSFRuleException("checkSingleFlagRules LEVEL1 fails for " + strEntityType + ":" + iEntityID + ":" + strDescription + "(" + strAttributeCode + ") - " + strFlagDescription + " is already in PDH. (ok)");          }
                } else if (strUniqueClass.equals("LEVEL2") && strUniqueType.equals(strEntityType)) {
                    rs = callGBL0033(returnStatus, strEnterprise, strEntityType, iEntityID, strUniqueType, strAttributeValue,"LEVEL2");

                    int icount = 0;
                    while (rs.next()) {
                        icount = rs.getInt(1);
                    }

                    rs.close();
                    rs = null;

                    freeStatement();
                    isPending();

                    if (icount > 0) {
                        debug(D.EBUG_ERR, "checkSingleFlagRules LEVEL2 fails for " + strEntityType + ":" + iEntityID + ":" + strDescription + "(" + strAttributeCode + ") - " + strFlagDescription + " is already in PDH. (ok)");

                        // Need a description here...
                        throw new MiddlewareSFRuleException("checkSingleFlagRules LEVEL2 fails for " + strEntityType + ":" + iEntityID + ":" + strDescription + "(" + strAttributeCode + ") - " + strFlagDescription + " is already in PDH. (ok)");          }
                }
            } else if(strUniqueClass.equals("LEVEL3")) { //GAB 100906

                boolean bRunCheck = false;
                // Let's first scan our etypes and see if this is even applicable to us.
                StringTokenizer stok = new StringTokenizer(strUniqueType, ":");

                while (stok.hasMoreTokens()) {
                    String strEntityTypeCheck = stok.nextToken();
                    if(strEntityTypeCheck.equals(strEntityType)) {
                        bRunCheck = true;
                    }
                }

                if(bRunCheck) {
                    stok = new StringTokenizer(strUniqueType, ":");

                    while (stok.hasMoreTokens()) {
                        String strEntityTypeCheck = stok.nextToken();

                        int iEntityIDCheck = -9;
                        if(strEntityTypeCheck.equals(strEntityType)) {
                            iEntityIDCheck = iEntityID;
                        }

                        rs = callGBL0033(returnStatus, strEnterprise, strEntityTypeCheck, iEntityIDCheck, strUniqueType, strAttributeValue,"LEVEL3");
                        int icount = 0;
                        while (rs.next()) {
                            icount = rs.getInt(1);
                        }

                        rs.close();
                        rs = null;

                        freeStatement();
                        isPending();

                        if (icount > 0) {
                            debug(D.EBUG_ERR, "checkSingleFlagRules LEVEL3 fails for " + strEntityType + ":" + iEntityID + ":" + strDescription + "(" + strAttributeCode + ") - " + strFlagDescription + " is already in PDH. (ok)");
                            // Need a description here...
                            throw new MiddlewareSFRuleException("checkSingleFlagRules LEVEL3 fails for " + strEntityType + ":" + iEntityID + ":" + strDescription + "(" + strAttributeCode + ") - " + strFlagDescription + " is already in PDH. (ok)");
                        }
                    }
                }
            } else if (bComboUnique) {
                if(strComboUniqueGrouping != null && strComboUniqueGrouping.equals("L")) {

                    boolean bpass = true;

                    rs = callGBL2930(returnStatus, strEnterprise, strAttributeCode, strAttributeValue, strTextAttributeCode, strTextAttributeValue);

                    int icount = 0;
                    while (rs.next()) {
                        icount = rs.getInt(1);
                        bpass = icount == iEntityID;
                    }

                    rs.close();
                    rs = null;

                    freeStatement();
                    isPending();

                    if (!bpass) {
                        debug(D.EBUG_ERR, "checkSingleFlagRules: COMBOCHECK fails for " + strEntityType + ":" + iEntityID + ". " + strAttributeValue + ":" + strTextAttributeValue + " (" + strAttributeCode + ":" + strTextAttributeCode + ") is already in PDH.(ok)");
                        throw new MiddlewareSFRuleException("checkIsolatedSFRules: COMBOCHECK fails for " + strEntityType + ":" + iEntityID + ". " + strAttributeValue + ":" + strTextAttributeValue + " (" + strAttributeCode + ":" + strTextAttributeCode + ") is already in PDH.(ok)");
                    }
                } else if (strEntityType.equals(strComboUniqueGrouping)) { // by entitytype
                	_sf.checkComboExt(this); //BH SR87, SR655
                }
            }
        } finally {
            freeStatement();
            isPending();
        }
    }

    private void checkMultiFlagRules(MultipleFlag _mf) throws SQLException, MiddlewareException, MiddlewareSFRuleException {
        ReturnStatus returnStatus = new ReturnStatus(-1);
        ResultSet rs = null;
        // Information about exception location
        String strEnterprise = _mf.getEnterprise();
        String strEntityType = _mf.getEntityType();
        int iEntityID = _mf.getEntityID();
        String strAttributeCode = _mf.getAttributeCode();
        String strAttributeValue = _mf.getAttributeValue();
        //String strEffFrom = _mf.getControlBlock().getEffFrom();
        //String strEffTo = _mf.getControlBlock().getEffTo();
        //String strUniqueType = _mf.getUniqueType();
        //String strUniqueClass = _mf.getUniqueClass();
        //String strFlagDescription = _mf.m_strFlagDescription;
        String strTextAttributeCode = _mf.m_strComboAttributeCode;
        String strTextAttributeValue = _mf.m_strComboAttributeValue;
        String strTextAttibuteDesc = _mf.m_strComboAttributeDesc;
        String strComboUniqueGrouping = _mf.m_strComboUniqueGrouping;
        boolean bComboUnique = _mf.m_bComboUnique;
        
        try {
            debug(D.EBUG_SPEW, "checkMultiFlagRules:strEnterprise " + strEnterprise);
            debug(D.EBUG_SPEW, "checkMultiFlagRules:strEntityType " + strEntityType);
            debug(D.EBUG_SPEW, "checkMultiFlagRules:iEntityID " + iEntityID);
            debug(D.EBUG_SPEW, "checkMultiFlagRules:strAttributeCode " + strAttributeCode);
            debug(D.EBUG_SPEW, "checkMultiFlagRules:strAttributeValue " + strAttributeValue);
            debug(D.EBUG_SPEW, "checkMultiFlagRules:strComboUniqueGrouping " + strComboUniqueGrouping);
            debug(D.EBUG_SPEW, "checkMultiFlagRules:bComboUnique " + bComboUnique+ 
            		(bComboUnique?(":" + strTextAttributeCode + ":" + strTextAttributeValue + ":" + strTextAttibuteDesc):""));

            if (bComboUnique) {
                if(strComboUniqueGrouping != null && strComboUniqueGrouping.equals("L")) {
                    boolean bpass = true;

                    rs = callGBL2930(returnStatus, strEnterprise, strAttributeCode, strAttributeValue, strTextAttributeCode, strTextAttributeValue);

                    int icount = 0;
                    while (rs.next()) {
                        icount = rs.getInt(1);
                        bpass = icount == iEntityID;
                    }

                    rs.close();
                    rs = null;

                    freeStatement();
                    isPending();

                    if (!bpass) {
                        debug(D.EBUG_ERR, "checkMultiFlagRules: COMBOCHECK fails for " + strEntityType + ":" + iEntityID + ". " + strAttributeValue + ":" + strTextAttributeValue + " (" + strAttributeCode + ":" + strTextAttributeCode + ") is already in PDH.");
                        throw new MiddlewareSFRuleException("checkMultiFlagRules: COMBOCHECK fails for " + strEntityType + ":" + iEntityID + ". " + strAttributeValue + ":" + strTextAttributeValue + " (" + strAttributeCode + ":" + strTextAttributeCode + ") is already in PDH.");
                    }
                } else if (strEntityType.equals(strComboUniqueGrouping)) {  // by entitytype
                	_mf.checkComboExt(this); //BH SR87, SR655
                }
            }
        } finally {
            freeStatement();
            isPending();
        }
    }
    /**
     * Clears all softlocks for a given OPENID
     *
     * @param  _prof                                      Description of the Parameter
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void clearAllSoftLocksForOPENID(Profile _prof) throws MiddlewareException, SQLException, MiddlewareShutdownInProgressException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        String strMethod = "clearAllSoftLocksforOPENID";
        //String strSP = null;
        String strEnterprise = _prof.m_strEnterprise;
        int iOpenID = _prof.m_iOPWGID;

        try {
            debug(D.EBUG_DETAIL, strMethod + " transaction");
            test(strEnterprise != null, "enterprise is null");
            test(iOpenID > 0, "openID <= 0");
            debug(D.EBUG_DETAIL, "clearAllSoftLocksForOPENID:Enterprise: " + strEnterprise);
            debug(D.EBUG_DETAIL, "clearAllSoftLocksForOPENID:OPENID: " + iOpenID);

            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            //strSP = new String("gbl2260");

            callGBL2260(returnStatus, strEnterprise, iOpenID);
            freeStatement();
            isPending();
            commit();
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
    }
    /**
     * This method will return a SerialHistoryGroup
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _s                                         Description of the Parameter
     * @return                                            The serialHistoryGroup value
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final SerialHistoryGroup getSerialHistoryGroup(Profile _prof, String _s) throws MiddlewareException, MiddlewareShutdownInProgressException {

        SerialHistoryGroup shgReturn = null;
        String strMethod = "getSerialHistoryGroup";
        // String strSP = null;

        test(_prof != null, strMethod + " Profile Item is null");

        String strEnterprise = _prof.m_strEnterprise;
        String strValOn = _prof.m_strValOn;
        String strEffOn = _prof.m_strEffOn;
        NLSItem nls = _prof.getReadLanguage();

        test(nls != null, strMethod + " NLSItem is null");

        //int iNLSID = nls.getNLSID();

        debug(D.EBUG_DETAIL, strMethod + " transaction");
        debug(D.EBUG_DETAIL, strMethod + "Enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, strMethod + "strValOn: " + strValOn);
        debug(D.EBUG_DETAIL, strMethod + "strEffOn: " + strEffOn);

        try {
            shgReturn = new SerialHistoryGroup(this, _prof, _s);
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }

        return shgReturn;
    }
    /**
     * JDBC: getHelpText Retrieved an NLS sensitive Help message for the given PDHAttribute
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strAttributeCode        Description of the Parameter
     * @return                          String representation of the help message
     * @exception  MiddlewareException  Description of the Exception
     * @exception  SQLException         Description of the Exception
     */
    public final String getHelpText(Profile _prof, String _strAttributeCode) throws MiddlewareException, SQLException {

        // The stored procedure ReturnStatus
        ReturnStatus returnStatus = new ReturnStatus(-1);
        ResultSet rs = null;
        String strReturn = "Sorry.. No Help is available on this subject";
        //String strNow = null;
        //String strForever = null;
        //String strSP = null;
        String strMethod = "getHelpText";
        String strTraceBase = setTraceBase(strMethod);

        try {
            debug(D.EBUG_DETAIL, strTraceBase + " transaction");
            test(_prof != null, strTraceBase + " Profile is null");

            String strEnterprise = _prof.m_strEnterprise;
            int iNLSID = _prof.getReadLanguage().getNLSID();
            String strAttributeCode = _strAttributeCode;
            String strValOn = _prof.m_strValOn;
            String strEffOn = _prof.m_strEffOn;

            test(strEnterprise != null, strTraceBase + " Enterprise is null");
            test(strAttributeCode != null, strTraceBase + " AttributeCode is null");
            test(iNLSID != 0, strTraceBase + " NLSID = 0");
            test(strValOn != null, strTraceBase + " ValOn is null");
            test(strEffOn != null, strTraceBase + " EffOn is null");

            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            // Lets Get the entry point information and start filling out the EntryPointGroup
            //strSP = new String("GBL1092");

            rs = callGBL1092(returnStatus, strEnterprise, strAttributeCode, iNLSID, strValOn, strEffOn);

            // Process the Result Set
            while (rs.next()) {
                int i1 = rs.getInt(1);
                String s2 = rs.getString(2).trim();

                debug(D.EBUG_SPEW, "gbl1092:answers:" + i1 + ":" + s2);

                strReturn = s2;
                // Assign the value
            }

            rs.close();

            rs = null;

            commit();
            freeStatement();
            isPending();
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }

        return strReturn;
    }
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _abrg                                      Description of the Parameter
     * @param  _strAttributeValue                         Description of the Parameter
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void refreshOPICMABRGroup(Profile _prof, OPICMABRGroup _abrg, String _strAttributeValue, String _strInterleaved) throws MiddlewareException, SQLException, MiddlewareShutdownInProgressException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        ResultSet rs = null;
        //String strSP = null;
        String strMethod = "refreshOPICMABRGroup";
        String strTraceBase = setTraceBase(strMethod);
        String strEnterprise = _abrg.hashkey();
        //String strNow = null;

        // Do some up front tests
        test(_abrg != null, "The _abrg passed is null");
        debug(D.EBUG_DETAIL, strTraceBase + " start of Transaction");

        try {
            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            isPending();
            setAutoCommit(false);

            // ok.. if we are running interleaved.. reset this list
            if (_strInterleaved.equals("Y")) {
                debug(D.EBUG_DETAIL, strTraceBase + " reseting Abr Item list.. in interleaved mode");
                _abrg.resetOPICMABRItems();
            }

            //strSP = new String("GBL3000");

            rs = callGBL3000(returnStatus, strEnterprise, _strAttributeValue, _strInterleaved);

            while (rs.next()) {
                // Read in the variables
                String strEntityType = rs.getString(1).trim();
                int iEntityID = rs.getInt(2);
                String strDescription = rs.getString(3).trim();
                String strAttributeCode = rs.getString(4).trim();
                String strAttributeValue = rs.getString(5).trim();
                String strValFrom = rs.getString(6).trim();
                int iOpenID = rs.getInt(7);

//              debug(D.EBUG_DETAIL, strTraceBase + " gbl3000:answer:" + strEntityType + ":" + iEntityID + ":" + strDescription + ":" + strAttributeCode + ":" + strAttributeValue + ":" + strValFrom + ":" + iOpenID);
////                create a new ABRItem in the group
//              _abrg.createOPICMABRItem(strEntityType, iEntityID, strAttributeCode, strAttributeValue, iOpenID, strDescription, strValFrom);

                int iRef_NLSID = rs.getInt(8);

                debug(D.EBUG_DETAIL, strTraceBase + " gbl3000:answer:" + strEntityType + ":" + iEntityID + ":" + strDescription + ":" + strAttributeCode + ":" + strAttributeValue + ":" + strValFrom + ":" + iOpenID + ":" + iRef_NLSID);
                // create a new ABRItem in the group
                _abrg.createOPICMABRItem(strEntityType, iEntityID, strAttributeCode, strAttributeValue, iOpenID, strDescription, strValFrom, iRef_NLSID);
            }

            rs.close();

            rs = null;

            commit();
            freeStatement();
            isPending();

            /*
      Call the sp for retrieving GroupABR rows from the Que table. This will be treated like the other ones
      by the taskmaster
             */
            //strSP = new String("GBL3009");

            rs = callGBL3009(returnStatus, strEnterprise, Integer.valueOf(_strAttributeValue).intValue());

            while (rs.next()) {
                // Read in the variables
                String strEntityType = rs.getString(1).trim();
                int iEntityID = rs.getInt(2);
                String strDescription = rs.getString(3).trim();
                String strAttributeCode = rs.getString(4).trim();
                String strAttributeValue = rs.getString(5).trim();
                String strValFrom = rs.getString(6).trim();
                int iOpenID = rs.getInt(7);

                debug(D.EBUG_DETAIL, strTraceBase + " gbl3009:answer:" + strEntityType + ":" + iEntityID + ":" + strDescription + ":" + "00" + strAttributeCode + ":" + strAttributeValue + ":" + strValFrom + ":" + iOpenID);

                // create a new ABRItem in the group
                OPICMABRItem abri = _abrg.createOPICMABRItem(strEntityType, iEntityID, strAttributeCode, "00" + strAttributeValue, iOpenID, strDescription, strValFrom, 1);

                abri.setABRQueType("GroupABR");
            }


            rs = null;

            commit();
            freeStatement();
            isPending();


        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, strTraceBase + " RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);
            freeStatement();
            isPending();

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, strTraceBase + " complete");
        }
    }
    /**
     * updateText method
     *
     * @param  _prof                    Description of the Parameter
     * @param  strEntityType            Description of the Parameter
     * @param  iEntityID                Description of the Parameter
     * @param  txtCurrent               Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateText(Profile _prof, String strEntityType, int iEntityID, Text txtCurrent) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        //ReturnID IdNew = null;
        //String strSP = null;
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();
        int iTranID = _prof.getTranID();

        test(strEnterprise != null, "updateText:Enterprise is null");
        test(strEnterprise.length() > 0, "updateText:enterprise length not > 0 [passed length=" + strEnterprise.length() + "]");
        test(strEntityType != null, "updateText:strEntityType is null");
        test(strEntityType.length() > 0, "updateText:strEntityType length not > 0 [passed length=" + strEntityType.length() + "]");
        test(iEntityID != 0, "updateText:iEntityID = 0");
        test(iOPWGID != 0, "updateText:OPWGID = 0");
        test(txtCurrent != null, "updateText:txtCurrent is null");
        test(txtCurrent.getAttributeCode() != null, "updateText:attributeCode is null");
        test(txtCurrent.getAttributeCode().length() > 0, "updateText:AttributeCode length not > 0 [passed length=" + txtCurrent.getAttributeCode().length() + "]");
        test(txtCurrent.getAttributeValue() != null, "updateText:attributeValue is null");
        test(txtCurrent.getAttributeValue().length() > 0, "updateText:AttributeValue length not > 0 [passed length=" + txtCurrent.getAttributeValue().length() + " for attributecode=" + txtCurrent.getAttributeCode() + "]");
        test(txtCurrent.getNLSID() >= 1, "updateText:nlsID < 1");
        test(txtCurrent.getControlBlock().getEffFrom() != null, "updateText:effFrom is null");
        test(txtCurrent.getControlBlock().getEffTo() != null, "updateText:effTo is null");
        debug(D.EBUG_SPEW, "updating: " + txtCurrent);
        debug(D.EBUG_SPEW, " Value of entityid " + iEntityID);

        //strSP = new String("gbl2091");

        debug(D.EBUG_SPEW, "Entity id being passed to 2091 is " + iEntityID);

        //IdNew = 
        callGBL2091(returnStatus, iOPWGID, strEnterprise, strEntityType, new ReturnID(iEntityID), txtCurrent.getAttributeCode(), txtCurrent.getAttributeValue(), txtCurrent.getNLSID(), iTranID, txtCurrent.getControlBlock().getEffFrom(), txtCurrent.getControlBlock().getEffTo());

        freeStatement();
        isPending();
        debug(D.EBUG_SPEW, "updated text");
    }
    /**
     * updateSingleFlag method
     *
     * @param  _prof                    Description of the Parameter
     * @param  strEntityType            Description of the Parameter
     * @param  iEntityID                Description of the Parameter
     * @param  sfCurrent                Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateSingleFlag(Profile _prof, String strEntityType, int iEntityID, SingleFlag sfCurrent) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        //ReturnID IdNew = null;
        //String strSP = null;
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();
        int iNLSID = _prof.getReadLanguage().getNLSID();

        test(strEnterprise != null, "updateSingleFlag:Enterprise is null");
        test(strEnterprise.length() > 0, "updateSingleFlag:enterprise length not > 0 [passed length=" + strEnterprise.length() + "]");
        test(strEntityType != null, "updateSingleFlag:strEntityType is null");
        test(strEntityType.length() > 0, "updateSingleFlag:strEntityType length not > 0 [passed length=" + strEntityType.length() + "]");
        test(iEntityID != 0, "updateSingleFlag:iEntityID = 0");
        test(iOPWGID != 0, "updateSingleFlag:OPWGID = 0");
        test(sfCurrent != null, "updateSingleFlag:sfCurrent is null");
        test(sfCurrent.getAttributeCode() != null, "updateSingleFlag:attributeCode is null");
        test(sfCurrent.getAttributeCode().length() > 0, "updateSingleFlag:AttributeCode length not > 0 [passed length=" + sfCurrent.getAttributeCode().length() + "]");
        test(sfCurrent.getAttributeValue() != null, "updateSingleFlag:attributeValue is null");
        test(sfCurrent.getAttributeValue().length() > 0, "updateSingleFlag:AttributeValue length not > 0 [passed length=" + sfCurrent.getAttributeValue().length() + "]");
        test(sfCurrent.getNLSID() >= 1, "updateSingleFlag:nlsID < 1");
        test(sfCurrent.getControlBlock().getEffFrom() != null, "updateSingleFlag:effFrom is null");
        test(sfCurrent.getControlBlock().getEffTo() != null, "updateSingleFlag:effTo is null");
        test(iEntityID != 0, "updateSingleFlag:iEntityID = 0");
        debug(D.EBUG_SPEW, "updating: " + sfCurrent);

        //strSP = new String("gbl2265");
        // TODO NLSREF
        //IdNew = 
        callGBL2265(returnStatus, iOPWGID, strEnterprise, strEntityType, new ReturnID(iEntityID), sfCurrent.getAttributeCode(), sfCurrent.getAttributeValue(), _prof.getTranID(), sfCurrent.getControlBlock().getEffFrom(), sfCurrent.getControlBlock().getEffTo(),iNLSID);

        freeStatement();
        isPending();
        debug(D.EBUG_SPEW, "updated singleflag");
    }
    /**
     * updateMultipleFlag method
     *
     * @param  _prof                    Description of the Parameter
     * @param  strEntityType            Description of the Parameter
     * @param  iEntityID                Description of the Parameter
     * @param  mfCurrent                Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateMultipleFlag(Profile _prof, String strEntityType, int iEntityID, MultipleFlag mfCurrent) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        //ReturnID IdNew = null;
        //String strSP = null;
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();
        int iNLSID = _prof.getReadLanguage().getNLSID();


        test(strEnterprise != null, "updateMultipleFlag:Enterprise is null");
        test(strEnterprise.length() > 0, "updateMultipleFlag:enterprise length not > 0 [passed length=" + strEnterprise.length() + "]");
        test(strEntityType != null, "updateMultipleFlag:strEntityType is null");
        test(strEntityType.length() > 0, "updateMultipleFlag:strEntityType length not > 0 [passed length=" + strEntityType.length() + "]");
        test(iEntityID != 0, "updateMultipleFlag:iEntityID = 0");
        test(iOPWGID != 0, "updateMultipleFlag:OPWGID = 0");
        test(mfCurrent != null, "updateMultipleFlag:mfCurrent is null");
        test(mfCurrent.getAttributeCode() != null, "updateMultipleFlag:attributeCode is null");
        test(mfCurrent.getAttributeCode().length() > 0, "updateMultipleFlag:AttributeCode length not > 0 [passed length=" + mfCurrent.getAttributeCode().length() + "]");
        test(mfCurrent.getAttributeValue() != null, "updateMultipleFlag:attributeValue is null");
        test(mfCurrent.getAttributeValue().length() > 0, "updateMultipleFlag:AttributeValue length not > 0 [passed length=" + mfCurrent.getAttributeValue().length() + "]");
        test(mfCurrent.getNLSID() >= 1, "updateMultipleFlag:nlsID < 1");
        test(mfCurrent.getControlBlock().getEffFrom() != null, "updateMultipleFlag:effFrom is null");
        test(mfCurrent.getControlBlock().getEffTo() != null, "updateMultipleFlag:effTo is null");
        test(iEntityID != 0, "updateMultipleFlag:iEntityID = 0");
        debug(D.EBUG_SPEW, "updating: " + mfCurrent);

        //strSP = new String("gbl2097");
        // TODO NLSREF
        //IdNew = 
        callGBL2097(returnStatus, iOPWGID, strEnterprise, strEntityType, new ReturnID(iEntityID), mfCurrent.getAttributeCode(), mfCurrent.getAttributeValue(), _prof.getTranID(), mfCurrent.getControlBlock().getEffFrom(), mfCurrent.getControlBlock().getEffTo(),iNLSID);

        freeStatement();
        isPending();
        debug(D.EBUG_SPEW, "updated multipleflag");
    }
    /**
     * updateLongText method
     *
     * @param  _prof                    Description of the Parameter
     * @param  strEntityType            Description of the Parameter
     * @param  iEntityID                Description of the Parameter
     * @param  ltCurrent                Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateLongText(Profile _prof, String strEntityType, int iEntityID, LongText ltCurrent) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        //ReturnID IdNew = null;
        //String strSP = null;
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();

        test(strEnterprise != null, "UpdateLongText:Enterprise is null");
        test(strEnterprise.length() > 0, "UpdateLongText:enterprise length not > 0 [passed length=" + strEnterprise.length() + "]");
        test(strEntityType != null, "UpdateLongText:strEntityType is null");
        test(strEntityType.length() > 0, "UpdateLongText:strEntityType length not > 0 [passed length=" + strEntityType.length() + "]");
        test(iEntityID != 0, "UpdateLongText:iEntityID = 0");
        test(iOPWGID != 0, "UpdateLongText:OPWGID = 0");
        test(ltCurrent != null, "UpdateLongText:ltCurrent is null");
        test(ltCurrent.getAttributeCode() != null, "updateLongText:attributeCode is null");
        test(ltCurrent.getAttributeCode().length() > 0, "updateLongText:AttributeCode length not > 0 [passed length=" + ltCurrent.getAttributeCode().length() + "]");
        test(ltCurrent.getAttributeValue() != null, "updateLongText:attributeValue is null");
        test(ltCurrent.getAttributeValue().length() > 0, "updateLongText:AttributeValue length not > 0 [passed length=" + ltCurrent.getAttributeValue().length() + "]");
        test(ltCurrent.getNLSID() >= 1, "updateLongText:nlsID < 1");
        test(ltCurrent.getControlBlock().getEffFrom() != null, "updateLongText:effFrom is null");
        test(ltCurrent.getControlBlock().getEffTo() != null, "updateLongText:effTo is null");
        test(iEntityID != 0, "updateLongText:iEntityID = 0");
        debug(D.EBUG_SPEW, "updating: " + ltCurrent);

        //strSP = new String("gbl2100");
        //IdNew = 
        callGBL2100(returnStatus, iOPWGID, strEnterprise, strEntityType, new ReturnID(iEntityID), ltCurrent.getAttributeCode(), ltCurrent.getAttributeValue(), ltCurrent.getNLSID(), _prof.getTranID(), ltCurrent.getControlBlock().getEffFrom(), ltCurrent.getControlBlock().getEffTo());

        freeStatement();
        isPending();
        debug(D.EBUG_SPEW, "updated longtext");
    }
    /**
     * updateBlob method
     *
     * @param  _prof                    Description of the Parameter
     * @param  strEntityType            Description of the Parameter
     * @param  iEntityID                Description of the Parameter
     * @param  blCurrent                Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateBlob(Profile _prof, String strEntityType, int iEntityID, COM.ibm.opicmpdh.objects.Blob blCurrent) throws SQLException, MiddlewareException {

        // String strSP = null;
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();

        test(strEnterprise != null, "UpdateBlob:Enterprise is null");
        test(strEnterprise.length() > 0, "UpdateBlob:enterprise length not > 0 [passed length=" + strEnterprise.length() + "]");
        test(strEntityType != null, "UpdateBlob:strEntityType is null");
        test(strEntityType.length() > 0, "UpdateBlob:strEntityType length not > 0 [passed length=" + strEntityType.length() + "]");
        test(iEntityID != 0, "UpdateBlob:iEntityID = 0");
        test(iOPWGID != 0, "UpdateBlob:OPWGID = 0");
        test(blCurrent != null, "UpdateBlob:blCurrent is null");
        test(blCurrent.getAttributeCode() != null, "updateBlob:attributeCode is null");
        test(blCurrent.getAttributeCode().length() > 0, "updateBlob:AttributeCode length not > 0 [passed length=" + blCurrent.getAttributeCode().length() + "]");
        test(blCurrent.getAttributeValue() != null, "updateBlob:attributeValue is null");
        test(blCurrent.getNLSID() >= 1, "updateBlob:nlsID < 1");
        test(blCurrent.getControlBlock().getEffFrom() != null, "updateBlob:effFrom is null");
        test(blCurrent.getControlBlock().getEffTo() != null, "updateBlob:effTo is null");
        test(iEntityID != 0, "updateBlob:iEntityID = 0");
        debug(D.EBUG_SPEW, "updating: " + blCurrent);

        // strSP = new String("putBlob");

        putBlob(_prof, strEntityType, iEntityID, blCurrent.getAttributeCode(), blCurrent.getBlobExtension(), blCurrent.getNLSID(), blCurrent.getControlBlock().getEffFrom(), blCurrent.getControlBlock().getEffTo(), blCurrent.getBAAttributeValue());
        freeStatement();
        isPending();
        debug(D.EBUG_SPEW, "updated blob");
    }
    /**
     * updateAttributes method
     *
     * @param  _prof                    Description of the Parameter
     * @param  strEntityType            Description of the Parameter
     * @param  iEntityID                Description of the Parameter
     * @param  vctAttributes            Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateAttributes(Profile _prof, String strEntityType, int iEntityID, Vector vctAttributes) throws SQLException, MiddlewareException {

        Text txtCurrent = null;
        SingleFlag sfCurrent = null;
        MultipleFlag mfCurrent = null;
        LongText ltCurrent = null;
        COM.ibm.opicmpdh.objects.Blob blCurrent = null;

        if (vctAttributes != null) {
            // Process objects in Vector
            for (int i = 0; i < vctAttributes.size(); i++) {
                if (vctAttributes.elementAt(i) instanceof Text) {
                    txtCurrent = (Text) vctAttributes.elementAt(i);

                    updateText(_prof, strEntityType, iEntityID, txtCurrent);
                } else if (vctAttributes.elementAt(i) instanceof SingleFlag) {
                    sfCurrent = (SingleFlag) vctAttributes.elementAt(i);

                    updateSingleFlag(_prof, strEntityType, iEntityID, sfCurrent);
                } else if (vctAttributes.elementAt(i) instanceof MultipleFlag) {
                    mfCurrent = (MultipleFlag) vctAttributes.elementAt(i);

                    updateMultipleFlag(_prof, strEntityType, iEntityID, mfCurrent);
                } else if (vctAttributes.elementAt(i) instanceof LongText) {
                    ltCurrent = (LongText) vctAttributes.elementAt(i);

                    updateLongText(_prof, strEntityType, iEntityID, ltCurrent);
                } else if (vctAttributes.elementAt(i) instanceof COM.ibm.opicmpdh.objects.Blob) {
                    blCurrent = (COM.ibm.opicmpdh.objects.Blob) vctAttributes.elementAt(i);

                    updateBlob(_prof, strEntityType, iEntityID, blCurrent);
                }
            }
        }
    }
    /**
     * entityDeactivated method
     *
     * @param  strEnterprise            Description of the Parameter
     * @param  strEntityType            Description of the Parameter
     * @param  iEntityID                Description of the Parameter
     * @return                          Description of the Return Value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final boolean entityDeactivated(String strEnterprise, String strEntityType, int iEntityID) throws SQLException, MiddlewareException {

        // For executing SQL statement
        ResultSet rsGBL2920 = null;
        ReturnDataResultSet rdrsGBL2920 = null;
        ReturnStatus returnStatus = new ReturnStatus(-1);
        //String strSP = null;

        //strSP = new String("gbl2920");
        rsGBL2920 = callGBL2920(returnStatus, strEnterprise, strEntityType, iEntityID);
        rdrsGBL2920 = new ReturnDataResultSet(rsGBL2920, "gbl2920");

        rsGBL2920.close();

        rsGBL2920 = null;

        freeStatement();
        isPending();

        return (rdrsGBL2920.size() > 0);
    }
    /**
     * getEntityList method
     *
     * @param  _prof                    Description of the Parameter
     * @return                          The entityList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityList getEntityList(Profile _prof) throws SQLException, MiddlewareException {
        return new EntityList(this, _prof);
    }
    /**
     * getEntityList method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _ai                      Description of the Parameter
     * @param  _aei                     Description of the Parameter
     * @return                          The entityList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityList getEntityList(Profile _prof, NavActionItem _ai, EntityItem[] _aei, boolean _bActionTree) throws SQLException, MiddlewareException {
        String strEntityType = (((_aei == null) || (_aei.length == 0)) ? "WG" : _aei[0].getEntityType());

        return new EntityList(this, _prof, _ai, _aei, strEntityType, _bActionTree);
    }
    /**
     * getEntityList method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _ai                      Description of the Parameter
     * @param  _aei                     Description of the Parameter
     * @return                          The entityList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityList getEntityList(Profile _prof, ExtractActionItem _ai, EntityItem[] _aei) throws SQLException, MiddlewareException {
        test(_aei != null, "EntityItem array is null");
        test(_aei.length > 0, "EntityItem array is zero");

        return new EntityList(this, _prof, _ai, _aei, _aei[0].getEntityType());
    }
    /**
     * getEntityList method - For the Create Action Item
     *
     * @param  _prof                    Description of the Parameter
     * @param  _ai                      Description of the Parameter
     * @param  _aei                     Description of the Parameter
     * @return                          The entityList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityList getEntityList(Profile _prof, CreateActionItem _ai, EntityItem[] _aei) throws SQLException, MiddlewareException {
        test(_aei != null, "EntityItem array is null");
        test(_aei.length > 0, "EntityItem array is zero");

        return new EntityList(this, _prof, _ai, _aei);
    }
    /**
     * getEntityList method - For the Edit Action Item
     *
     * @param  _prof                    Description of the Parameter
     * @param  _ai                      Description of the Parameter
     * @param  _aei                     Description of the Parameter
     * @return                          The entityList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityList getEntityList(Profile _prof, EditActionItem _ai, EntityItem[] _aei) throws SQLException, MiddlewareException {
        test(_aei != null, "EntityItem array is null");
        test(_aei.length > 0, "EntityItem array is zero");

        return new EntityList(this, _prof, _ai, _aei);
    }
    /**
     * getEntityList method - For the Copy Action Item
     *
     * @param  _prof                    Description of the Parameter
     * @param  _ai                      Description of the Parameter
     * @param  _aei                     Description of the Parameter
     * @return                          The entityList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityList getEntityList(Profile _prof, CopyActionItem _ai, EntityItem[] _aei) throws SQLException, MiddlewareException {
        test(_aei != null, "EntityItem array is null");
        test(_aei.length > 0, "EntityItem array is zero");

        return new EntityList(this, _prof, _ai, _aei);
    }

    /**
     * getEntityList method - For the Copy Action Item
     *
     * @param  _prof                    Description of the Parameter
     * @param  _ai                      Description of the Parameter
     * @param  _aei                     Description of the Parameter
     * @return                          The entityList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityList getEntityList(Profile _prof, ABRStatusActionItem _ai, EntityItem[] _aei) throws SQLException, MiddlewareException {
        test(_aei != null, "EntityItem array is null");
        test(_aei.length > 0, "EntityItem array is zero");

        return new EntityList(this, _prof, _ai, _aei);
    }

    /**
     * getEntityList method - For the Search Action Item
     *
     * @param  _prof                    Description of the Parameter
     * @param  _ai                      Description of the Parameter
     * @return                          The entityList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityList getEntityList(Profile _prof, SearchActionItem _ai) throws SQLException, MiddlewareException {
        test(_ai != null, "Search ActionItem  is null");
        test(_prof != null, "Profile is null.");

        return new EntityList(this, _prof, _ai);
    }
    /**
     * getEntityGroup method - Gets a new EntityGroup without and owner
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strEntityType           Description of the Parameter
     * @param  _strPurpose              Description of the Parameter
     * @return                          The entityGroup value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EntityGroup getEntityGroup(Profile _prof, String _strEntityType, String _strPurpose) throws SQLException, MiddlewareException {
        test(_prof != null, "Profile is null.");
        test(_strEntityType != null, "EntityType is null.");
        test(_strPurpose != null, "Purpose is null.");

        return new EntityGroup(null, this, _prof, _strEntityType, _strPurpose);
    }
    /**
     *  Gets the newSessionID attribute of the Database object
     *
     * @return                          The newSessionID value
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */
    public final int getNewSessionID() throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        //String strSP = null;
        String strTraceBase = setTraceBase("getNewSessionID");
        ResultSet rs = null;
        int iSessionID = 0;

        //strSP = new String("GBL2970");
        rs = callGBL2970(returnStatus, "NE", "SESSIONID");

        rs.next();

        iSessionID = rs.getInt(1);

        rs.close();

        rs = null;

        commit();
        freeStatement();
        isPending();
        debug(D.EBUG_DETAIL, strTraceBase + " Retrieved:" + iSessionID);

        return iSessionID;
    }
    /**
     *  Gets the nextEntityID attribute of the Database object
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strEntityType           Description of the Parameter
     * @return                          The nextEntityID value
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */
    public final int getNextEntityID(Profile _prof, String _strEntityType) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        //String strSP = null;
        String strTraceBase = setTraceBase("getNextEntityID");
        ResultSet rs = null;
        int iSessionID = 0;

        //strSP = new String("GBL2970");
        rs = callGBL2970(returnStatus, _prof.getEnterprise(), _strEntityType);

        rs.next();

        iSessionID = rs.getInt(1);

        rs.close();

        rs = null;

        commit();
        freeStatement();
        isPending();
        debug(D.EBUG_DETAIL, strTraceBase + " Retrieved:" + iSessionID);

        return iSessionID;
    }
    /**
     * securelogin method
     *
     * @param  encryptedUidPw       byte[][]
     * @param  _strVersionLiteral   String
     * @param  _strClient           String
     * @return                      ProfileSet
     * @exception  VersionException
     * @exception  LoginException
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final ProfileSet secureLogin(byte[][] encryptedUidPw, String _strVersionLiteral,String _strClient) 
    throws VersionException, LoginException, SQLException, MiddlewareException 
    {
        String uipw[] = Cipher.decryptUidPw(encryptedUidPw);
        debug(D.EBUG_DETAIL,"secureLogin: for  " + uipw[0]);
        return login(uipw[0], uipw[1], _strVersionLiteral, _strClient);
    }  
    /**
     * login method
     *
     * @param  _strUserToken            Description of the Parameter
     * @param  _strPassword             Description of the Parameter
     * @param  _strVersionLiteral       Description of the Parameter
     * @return                          Description of the Return Value
     * @exception  VersionException
     * @exception  LoginException
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final ProfileSet login(String _strUserToken, String _strPassword, String _strVersionLiteral) throws VersionException, LoginException, SQLException, MiddlewareException {
        return login(_strUserToken, _strPassword, _strVersionLiteral, "");
    }
    /**
     * login method
     *
     * @param  _strUserToken            Description of the Parameter
     * @param  _strPassword             Description of the Parameter
     * @param  _strVersionLiteral       Description of the Parameter
     * @param  _strClient               Description of the Parameter
     * @return                          Description of the Return Value
     * @exception  VersionException
     * @exception  LoginException
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final ProfileSet login(String _strUserToken, String _strPassword, String _strVersionLiteral, String _strClient) throws VersionException, LoginException, SQLException, MiddlewareException {
        return login(_strUserToken, _strPassword, _strVersionLiteral, _strClient, "");
    }  
    /**
     * login method
     *
     * @param  _strUserToken            Description of the Parameter
     * @param  _strPassword             Description of the Parameter
     * @param  _strVersionLiteral       Description of the Parameter
     * @param  _strClient               Description of the Parameter
     * @param  _strClientData           Description of the Parameter
     * @return                          Description of the Return Value
     * @exception  VersionException
     * @exception  LoginException
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final ProfileSet login(String _strUserToken, String _strPassword, String _strVersionLiteral, String _strClient, String _strClientData) throws VersionException, LoginException, SQLException, MiddlewareException {

        //ProfileSet psReturn = null;
        //ReturnStatus returnStatus = new ReturnStatus(-1);
        //ResultSet rsGBL9997 = null;
        if (LOGOUT.equals(_strPassword) && LOGOUT.equals(_strVersionLiteral)){
            // log that user is logging off
            logout(_strUserToken);
            return null;
        }

        debug(D.EBUG_DETAIL, "login transaction");
        test(_strUserToken != null, "userToken is null");
        test(_strPassword != null, "password is null");
        test(_strVersionLiteral != null, "versionLiteral is null");
        test(_strClient != null, "client is null");
        test(_strClientData != null, "client data is null");
        debug(D.EBUG_DETAIL, "login:userToken: " + _strUserToken);
        debug(D.EBUG_SPEW, "login:versionLiteral: " + _strVersionLiteral);
        debug(D.EBUG_SPEW, "login:client: " + _strClient);
        debug(D.EBUG_SPEW, "login:client length(): " + _strClient.length());
        debug(D.EBUG_SPEW, "login:clientdata length(): " + _strClientData.length());

        // Did client pass a valid version literal?
        if (!_strVersionLiteral.equals(CURRENT_VERSION_LITERAL)) {
            debug(D.EBUG_DETAIL, "login:Incorrect version literal value received:" + _strVersionLiteral + " expected:" + CURRENT_VERSION_LITERAL);

            throw new VersionException("Incorrect version literal value received:" + _strVersionLiteral + " expected:" + CURRENT_VERSION_LITERAL);
        }

        // Is this is a client login?
        if (_strClient.length() > 0) {
            debug(D.EBUG_SPEW, "This is a client login");

            // Does the userToken look like an email address?
            if ((_strUserToken.indexOf("@") > 0) && (_strUserToken.indexOf("ibm.com") > 0)) {
                // Get the LDAP server property
                String strServerLDAP = this.getServerLDAP();
                ProfileSet pfs = null;

                // Is LDAP configured?
                if (strServerLDAP.length() > 0) {
                    debug(D.EBUG_SPEW, "LDAP is configured");
                    debug("login:begin LDAP authenticate for " + _strUserToken);

                    ReturnCode rc = cwa.authenticate(strServerLDAP, _strUserToken, _strPassword);
                    if (rc == cwaapi.SUCCESS) {
                        debug(D.EBUG_DETAIL, "login:valid user - " + _strUserToken);
                        debug(D.EBUG_DETAIL, "login complete");
                        pfs = new ProfileSet(this, _strUserToken);
                    } else {
                        debug(D.EBUG_DETAIL, "login:invalid user - " + _strUserToken);
                        throw new LoginException("authentication failure against LDAP");
                    }
                } else {
                    debug(D.EBUG_SPEW, "login:LDAP is NOT configured");
                    debug(D.EBUG_DETAIL, "login complete");
                    pfs = new ProfileSet(this, _strUserToken);
                }
                if (pfs!=null){
                    // find last login time and set it to this time - CQ14860
                    pfs.setLastLoginTime(this);            
                }
                return pfs;      
            } else {
                debug(D.EBUG_DETAIL, "login:client logins must NOT be program logins");
                throw new LoginException("Client logins must NOT be program logins");
            }
        } else {
            debug(D.EBUG_SPEW, "login:This is a NON client login");
            debug(D.EBUG_DETAIL, "login complete");

//          inout ReturnStatus int
//          ***in Enterprise varchar(8)
//          ***in SessionID int
//          in UserToken varchar(80)
//          in VersionLiteral varchar(80)
//          in Client varchar(80)
//          in IPAddr varchar(80)
//          in ClientData varchar(80)
//          in LogIn varchar(26)
//          in LogOut varchar(26)
//          psReturn = ProfileSet(this, _strUserToken);
//          rsGBL9997 = this.callGBL9997(returnStatus, );
//          return psReturn;
            return new ProfileSet(this, _strUserToken);
        }
    }

    /**
     * logout method
     *
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final void logout() throws SQLException, MiddlewareException {
        debug(D.EBUG_DETAIL, "logout transaction");
    }
    public final void logout(String _strUserToken) {
        // log that user is logging off
        debug(D.EBUG_DETAIL, "logout transaction");
        debug(D.EBUG_DETAIL, "logout:userToken: " + _strUserToken);
    }
    /**
     * getMetaFlagAttributeList
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strAttributeCode        Description of the Parameter
     * @return                          The metaFlagAttributeList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final MetaFlagAttributeList getMetaFlagAttributeList(Profile _prof, String _strAttributeCode) throws SQLException, MiddlewareException {

        String strMethod = "getMetaFlagAttributeList";
        String strTraceBase = setTraceBase(strMethod);

        debug(D.EBUG_DETAIL, strTraceBase + " starting");

        try {
            return new MetaFlagAttributeList(this, _prof, _strAttributeCode);
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, strTraceBase + " RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);
            freeStatement();
            isPending();

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, strTraceBase + " complete");
        }
    }
    /**
     * getServerLDAP method
     *
     * @return    The serverLDAP value
     */
    private final String getServerLDAP() {
        return c_strServerLDAP;
    }
    private final boolean LogUsage() {
        return c_bUsageLogging;
    }

    /**
     *  New father of all link routines
     *  It used the static Method in EANUtility
     *  DWB - this eventually needs to be moved to the LinkActionItem.. Execute Action Method
     * @param  _prof                    Description of the Parameter
     * @param  _vctReturnRelatorKeys    Description of the Parameter
     * @param  _strLinkOption           Description of the Parameter
     * @param  _iSwitch                 Description of the Parameter
     * @param  _iCopyCount              Description of the Parameter
     * @param  _bCheckOrphan            Description of the Parameter
     * @return                          Description of the Return Value
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */
    public final OPICMList link(Profile _prof, Vector _vctReturnRelatorKeys, String _strLinkOption, int _iSwitch, int _iCopyCount, boolean _bCheckOrphan) throws SQLException, MiddlewareException {
        try {
            return EANUtility.link(this, _prof, _vctReturnRelatorKeys, _strLinkOption, _iSwitch, _iCopyCount, _bCheckOrphan);
        } catch (MiddlewareShutdownInProgressException ex) {
            ex.printStackTrace();

            return null;
        }
    }
    /**
     *  It used the static Method in EANUtility with all the default options turned on
     *  DWB - this eventually needs to be moved to the LinkActionItem.. Execute Action Method
     * @param  _prof                    Description of the Parameter
     * @param  _vctReturnRelatorKeys    Description of the Parameter
     * @param  _strLinkOption           Description of the Parameter
     * @param  _iSwitch                 Description of the Parameter
     * @param  _iCopyCount              Description of the Parameter
     * @param  _bCheckOrphan            Description of the Parameter
     * @return                          Description of the Return Value
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */
    public final OPICMList link(Profile _prof, Vector _vctReturnRelatorKeys) throws SQLException, MiddlewareException {
        try {
            return EANUtility.link(this, _prof, _vctReturnRelatorKeys, "", EANUtility.LINK_DEFAULT, 0, false);
        } catch (MiddlewareShutdownInProgressException ex) {
            ex.printStackTrace();

            return null;
        }
    }
    /**
     * updateEntity method
     *
     * @param  _prof                     Description of the Parameter
     * @param  _entCurrent               Description of the Parameter
     * @param  _bCheckDeactivatedEntity  Description of the Parameter
     * @param  _strNow                   Description of the Parameter
     * @param  _strForever               Description of the Parameter
     * @param  _vctDeferred              Description of the Parameter
     * @param  _bAttributesOnly          Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateEntity(Profile _prof, Entity _entCurrent, boolean _bCheckDeactivatedEntity, Vector _vctDeferred, boolean _bAttributesOnly) throws SQLException, MiddlewareException {

        //String strSP = null;
        ReturnStatus returnStatus = new ReturnStatus(-1);
        //ReturnID idNew = null;
        boolean bEntityDeactivated = false;

        if (_bCheckDeactivatedEntity) {
            bEntityDeactivated = entityDeactivated(_prof.getEnterprise(), _entCurrent.getEntityType(), _entCurrent.getEntityID());
        }

        if (!(_bCheckDeactivatedEntity && bEntityDeactivated)) {
            test(_entCurrent.getEnterprise() != null, "updateEntity:enterprise is null");
            test(_entCurrent.getEnterprise().length() > 0, "updateEntity:Enterprise length not > 0 [passed length=" + _entCurrent.getEnterprise().length() + "]");
            test(_entCurrent.getEntityType() != null, "updateEntity:entityType is null");
            test(_entCurrent.getEntityType().length() > 0, "updateEntity:EntityType length not > 0 [passed length=" + _entCurrent.getEntityType().length() + "]");
            test(_entCurrent.getEntityID() >= 0, "updateEntity:entityID < 0");
            test(_entCurrent.getControlBlock().getEffFrom() != null, "updateEntity:effFrom is null");
            test(_entCurrent.getControlBlock().getEffTo() != null, "updateEntity:effTo is null");

            if ((_entCurrent.getEntityID() > 0) && _bAttributesOnly) {
                //Bypass if only attributes have to be refreshed ,not for a new entity (entityid=0)
                //Dont update the entity
            } else {
                //strSP = new String("gbl2092");
                int iNLSID = _prof.getReadLanguage().getNLSID();
                //idNew = 
                    callGBL2092(returnStatus, _prof.getOPWGID(), _prof.getSessionID(), _entCurrent.getEnterprise(), _entCurrent.getEntityType(), new ReturnID(_entCurrent.getEntityID()), _prof.getTranID(), _entCurrent.getControlBlock().getEffFrom(), _entCurrent.getControlBlock().getEffTo(), iNLSID);

                freeStatement();
                isPending();
                debug(D.EBUG_SPEW, "updated entity");
            }

            updateAttributes(_prof, _entCurrent.getEntityType(), _entCurrent.getEntityID(), _entCurrent.getAttributes(), _vctDeferred);
            _entCurrent.setAttributes(null);
        }
    }
    /**
     * updateReturnEntity method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _reCurrent               Description of the Parameter
     * @param  _strNow                  Description of the Parameter
     * @param  _strForever              Description of the Parameter
     * @param  _vctDeferred             Description of the Parameter
     * @param  _bAttributesOnly         Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateReturnEntity(Profile _prof, ReturnEntityKey _reCurrent, String _strNow, String _strForever, Vector _vctDeferred, boolean _bAttributesOnly) throws SQLException, MiddlewareException {

//      Vector vctAttributes = _reCurrent.m_vctAttributes;
        ReturnStatus returnStatus = new ReturnStatus(-1);
        ReturnID idNew = new ReturnID(0);

        // Update the entity
        test(_reCurrent.getEntityType() != null, "updateReturnEntity:entityType is null");
        test(_reCurrent.getEntityType().length() > 0, "updateReturnEntity:EntityType length not > 0 [passed length=" + _reCurrent.getEntityType().length() + "]");

        //test(_reCurrent.getEntityID() >= 0, "updateReturnEntity:entityID < 0");
//      String strSP = new String("gbl2092");
        int iNLSID = _prof.getReadLanguage().getNLSID();
        if (_reCurrent.isActive()) {
            if ((_reCurrent.getEntityID() > 0) && _bAttributesOnly) {
                //Bypass if only attributes have to be refreshed
                idNew = new ReturnID(_reCurrent.getEntityID());
            } else {
                D.ebug(D.EBUG_SPEW, "updateReturnEntity: Active return entity, id is " + _reCurrent.getEntityID());

                idNew = callGBL2092(returnStatus, _prof.getOPWGID(), _prof.getSessionID(), _prof.getEnterprise(), _reCurrent.getEntityType(), new ReturnID(_reCurrent.getEntityID()), _prof.getTranID(), _strNow, _strForever, iNLSID);
            }
        } else {
            if ((_reCurrent.getEntityID() > 0) && _bAttributesOnly) {
                //Bypass if only attributes have to be refreshed
                idNew = new ReturnID(_reCurrent.getEntityID());
            } else {
                D.ebug(D.EBUG_SPEW, "updateReturnEntity: NOt activeActive return entity, id is " + _reCurrent.getEntityID());

                idNew = callGBL2092(returnStatus, _prof.getOPWGID(), _prof.getSessionID(), _prof.getEnterprise(), _reCurrent.getEntityType(), new ReturnID(_reCurrent.getEntityID()), _prof.getTranID(), _strNow, _strNow, iNLSID);
            }
        }

        commit();
        freeStatement();
        isPending();
        //Set the correct return id
        _reCurrent.setReturnID(idNew);
        _reCurrent.setPosted(true);
        D.ebug(D.EBUG_SPEW, "updateReturnEntity:  id after update is " + _reCurrent.getReturnID());

        // Now rip through any attributes and set their entityid's to the right value
        Vector vctAtt = _reCurrent.m_vctAttributes;

        for (int ii = 0; ii < vctAtt.size(); ii++) {
            Attribute att = (Attribute) vctAtt.elementAt(ii);

            att.m_iEntityID = _reCurrent.getReturnID();
        }

        updateAttributes(_prof, _reCurrent.getEntityType(), _reCurrent.getReturnID(), _reCurrent.m_vctAttributes, _vctDeferred);
        // Is this an add request?
        debug(D.EBUG_DETAIL, "updateReturnEntity: Updated entity");
    }
    /**
     * updateRelator method
     *
     * @param  _prof                    Description of the Parameter
     * @param  relCurrent               Description of the Parameter
     * @param  strNow                   Description of the Parameter
     * @param  strForever               Description of the Parameter
     * @param  _vctDeferred             Description of the Parameter
     * @param  _bAttributesOnly         Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateRelator(Profile _prof, Relator relCurrent, String strNow, String strForever, Vector _vctDeferred, boolean _bAttributesOnly) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        ReturnID idNew = null;
        //String strSP = null;
        // The ResultSet
        //ResultSet rs = null;
        int iNLSID = _prof.getReadLanguage().getNLSID();

        // New relators (ID=0) need Text.NAME and Text.ID rows as well
        if ((relCurrent.getEntityID() > 0) && _bAttributesOnly) {
            //Dont update the relator
        } else {
            //strSP = new String("gbl2098");
            // TODO NLSREF
            idNew = callGBL2098(returnStatus, _prof.getOPWGID(), _prof.getSessionID(), relCurrent.getEnterprise(), relCurrent.getEntityType(), new ReturnID(relCurrent.getEntityID()), relCurrent.getEntity1Type(), relCurrent.getEntity1ID(), relCurrent.getEntity2Type(), relCurrent.getEntity2ID(), _prof.getTranID(), relCurrent.getControlBlock().getEffFrom(), relCurrent.getControlBlock().getEffTo(),iNLSID);

            freeStatement();
            isPending();
            relCurrent.setEntityID(idNew.intValue());
        }

        freeStatement();
        isPending();
        updateAttributes(_prof, relCurrent.getEntityType(), relCurrent.getEntityID(), relCurrent.getAttributes(), _vctDeferred);
        // DWB not sure what this is all about...
        relCurrent.setAttributes(null);
    }
    /**
     * updateEntityAndRelator method
     *
     * @param  _prof                     Description of the Parameter
     * @param  _erCurrent                Description of the Parameter
     * @param  _bCheckDeactivatedEntity  Description of the Parameter
     * @param  _strNow                   Description of the Parameter
     * @param  _strForever               Description of the Parameter
     * @param  _vctDeferred              Description of the Parameter
     * @param  _bAttributesOnly          Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateEntitiesAndRelator(Profile _prof, EntitiesAndRelator _erCurrent, boolean _bCheckDeactivatedEntity, String _strNow, String _strForever, Vector _vctDeferred, boolean _bAttributesOnly) throws SQLException, MiddlewareException {

        Entity entCurrent1 = null;
        Entity entCurrent2 = null;
        Relator relCurrent = null;
        boolean bEntity1Deactivated = false;
        boolean bEntity2Deactivated = false;
        //ReturnStatus returnStatus = new ReturnStatus(-1);
        //Vector vctRelator = null;
        //Vector vctDeferred = new Vector();

        entCurrent1 = _erCurrent.getLeftEntity();
        entCurrent2 = _erCurrent.getRightEntity();
        relCurrent = _erCurrent.getRelator();

        if (_bCheckDeactivatedEntity) {
            bEntity1Deactivated = entityDeactivated(_prof.getEnterprise(), entCurrent1.getEntityType(), entCurrent1.getEntityID());
            bEntity2Deactivated = entityDeactivated(_prof.getEnterprise(), entCurrent2.getEntityType(), entCurrent2.getEntityID());
        }

        debug(D.EBUG_SPEW, "_bCheckDeactivatedEntity: " + _bCheckDeactivatedEntity);
        debug(D.EBUG_SPEW, "entity1 deactivated: " + bEntity1Deactivated);
        debug(D.EBUG_SPEW, "entity2 deactivated: " + bEntity2Deactivated);

        if ((!(bEntity1Deactivated || bEntity2Deactivated) && _bCheckDeactivatedEntity) ||!_bCheckDeactivatedEntity) {
            // Left Entity
            debug(D.EBUG_SPEW, "update left entity");
            updateEntity(_prof, entCurrent1, _bCheckDeactivatedEntity, _vctDeferred, false);
            // Right Entity
            debug(D.EBUG_SPEW, "update right entity");
            updateEntity(_prof, entCurrent2, _bCheckDeactivatedEntity, _vctDeferred, false);
            relCurrent.setEntity1Type(entCurrent1.getEntityType());
            relCurrent.setEntity1ID(entCurrent1.getEntityID());
            relCurrent.setEntity2Type(entCurrent2.getEntityType());
            relCurrent.setEntity2ID(entCurrent2.getEntityID());
            debug(D.EBUG_SPEW, "create relator");
            updateRelator(_prof, relCurrent, _strNow, _strForever, _vctDeferred, _bAttributesOnly);
            relCurrent.setAttributes(null);
        }
    }
    /**
     * updateAttributes method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strEntityType           Description of the Parameter
     * @param  _iEntityID               Description of the Parameter
     * @param  _vctAttributes           Description of the Parameter
     * @param  _vctDeferred             Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    private final void updateAttributes(Profile _prof, String _strEntityType, int _iEntityID, Vector _vctAttributes, Vector _vctDeferred) throws SQLException, MiddlewareException {

        Text txtCurrent = null;
        SingleFlag sfCurrent = null;
        MultipleFlag mfCurrent = null;
        LongText ltCurrent = null;
        COM.ibm.opicmpdh.objects.Blob blCurrent = null;

        if (_vctAttributes != null) {
            // Process objects in Vector
            for (int i = 0; i < _vctAttributes.size(); i++) {
                if (_vctAttributes.elementAt(i) instanceof Text) {
                    txtCurrent = (Text) _vctAttributes.elementAt(i);

                    updateText(_prof, _strEntityType, _iEntityID, txtCurrent);

                    limitMaxHistory(_prof, txtCurrent, _strEntityType, _iEntityID);//SR120
                } else if (_vctAttributes.elementAt(i) instanceof SingleFlag) {
                    sfCurrent = (SingleFlag) _vctAttributes.elementAt(i);

                    // Here .. we need to defer update to the very end if isDeferredPost set to true...
                    if (sfCurrent.isDeferredPost()) {
                    	if(sfCurrent.isDeferredPostMustBeLast()){
                    		_vctDeferred.addElement(sfCurrent);
                    	}else{
                    		// STATUS and DQ need to go before any ABRs
                    		_vctDeferred.insertElementAt(sfCurrent,0);
                    	}
                    } else {
                        updateSingleFlag(_prof, _strEntityType, _iEntityID, sfCurrent);

                        limitMaxHistory(_prof, sfCurrent, _strEntityType,_iEntityID);//SR120
                    }
                } else if (_vctAttributes.elementAt(i) instanceof MultipleFlag) {
                    mfCurrent = (MultipleFlag) _vctAttributes.elementAt(i);

                    updateMultipleFlag(_prof, _strEntityType, _iEntityID, mfCurrent);
                } else if (_vctAttributes.elementAt(i) instanceof LongText) {
                    ltCurrent = (LongText) _vctAttributes.elementAt(i);

                    updateLongText(_prof, _strEntityType, _iEntityID, ltCurrent);
                } else if (_vctAttributes.elementAt(i) instanceof COM.ibm.opicmpdh.objects.Blob) {
                    blCurrent = (COM.ibm.opicmpdh.objects.Blob) _vctAttributes.elementAt(i);

                    updateBlob(_prof, _strEntityType, _iEntityID, blCurrent);
                }
            }
        }
    }
    /**
     * From "BH FS EA Enabling Tech Enhancements  20091022.doc"
     * 2.   Support limited history on certain attributes to reduce unnecessary data volume in the
     * Product Data Hub (PDH). This will be used to support SR120.
     * @param _prof
     * @param _attr
     * @param _strEntityType
     * @param _iEntityID
     */
    private final void limitMaxHistory(Profile _prof, Attribute _attr, String _strEntityType, int _iEntityID)
    {
        ReturnStatus returnStatus = new ReturnStatus(-1);
        try{
            int delNumParm=0;
            String attrType="";
            if (_attr instanceof Text) {
                attrType="Text";
            } else if (_attr instanceof SingleFlag) {
                attrType="SingleFlag";
            }

            DatePackage dpNow = getDates();
            String strTimeEOD = dpNow.getEndOfDay();
            
            callGBL8991(returnStatus, delNumParm, _prof.getEnterprise(),
                    _strEntityType, _iEntityID, _attr.getAttributeCode(),
                    //TM sets prof to current timestamp, inprocess and final ABR values are bypassed
                    // attrType, _prof.getValOn(), _prof.getEffOn()); 
                    attrType, strTimeEOD, strTimeEOD);

            debug(D.EBUG_SPEW, "Database.limitMaxHistory: "+_attr.getAttributeCode()+" deleted: "+
                    delNumParm+" rows");

        }catch(Exception exc){
            debug(D.EBUG_ERR,"Database.limitMaxHistory: Error: "+exc.getMessage());
            //exc.printStackTrace();
        }finally {
            try{
                commit();
            }catch(Exception e){
                debug(D.EBUG_ERR,"Database.limitMaxHistory: Error in commit: "+e.getMessage());
                //e.printStackTrace();
            }
            freeStatement();
            isPending();
        }
    }
    
    /**
     * JDBC update method signature to call with the Check deactivated entities option
     *
     * @param  _prof                                Description of the Parameter
     * @param  _vctTransactions                     Description of the Parameter
     * @param  bCheckDeactivatedEntity              Description of the Parameter
     * @return                                      Description of the Return Value
     * @exception  SQLException                     Description of the Exception
     * @exception  MiddlewareBusinessRuleException  Description of the Exception
     * @exception  MiddlewareException              Description of the Exception
     */
    public OPICMList update(Profile _prof, Vector _vctTransactions, boolean bCheckDeactivatedEntity) throws SQLException, MiddlewareBusinessRuleException, MiddlewareException {
        OPICMList olReturn = new OPICMList();

        olReturn = update(_prof, _vctTransactions, bCheckDeactivatedEntity, false);

        return olReturn;
    }
    /**
     * JDBC update method signature called with Profile and vector list of transactions
     *
     * @param  _prof                                Description of the Parameter
     * @param  _vctTransactions                     Description of the Parameter
     * @return                                      Description of the Return Value
     * @exception  SQLException                     Description of the Exception
     * @exception  MiddlewareBusinessRuleException  Description of the Exception
     * @exception  MiddlewareException              Description of the Exception
     */
    public OPICMList update(Profile _prof, Vector _vctTransactions) throws SQLException, MiddlewareBusinessRuleException, MiddlewareException {
        OPICMList olReturn = new OPICMList();

        olReturn = update(_prof, _vctTransactions, false, false);

        return olReturn;
    }
    /**
     *  JDBC : The main Update method to update entities/relators and their attributes
     *  Parameters are profile,
     *  vector list of transaction objects (Entity,Relator,ReturnEntityKey,ReturnRelatorKey, EntitiesAndRelator),
     *  Boolean flag which checks deactivated entities
     *  Boolean flag which will update only the attributes - not the entity if found true.
     *
     * @param  _prof                                Description of the Parameter
     * @param  _vctTransactions                     Description of the Parameter
     * @param  bCheckDeactivatedEntity              Description of the Parameter
     * @param  _bAttributesOnly                     Description of the Parameter
     * @return                                      Description of the Return Value
     * @exception  SQLException                     Description of the Exception
     * @exception  MiddlewareBusinessRuleException  Description of the Exception
     * @exception  MiddlewareException              Description of the Exception
     */
    public OPICMList update(Profile _prof, Vector _vctTransactions, boolean bCheckDeactivatedEntity, boolean _bAttributesOnly) throws SQLException, MiddlewareBusinessRuleException, MiddlewareException {

        // Establish all the method variables
        //ReturnStatus returnStatus = new ReturnStatus(-1);
        OPICMList olReturn = new OPICMList();
        Vector vctDeferred = new Vector();
        // For returning info about newly created Entities
        //ReturnDataResultSetGroup rdrsgNew = new ReturnDataResultSetGroup();
        //ReturnDataResultSet rdrsNew = new ReturnDataResultSet();
        //ReturnDataRow rdrNew = null;
        Entity entCurrent = null;
        //Text textCurrent = null;
        SingleFlag sfCurrent = null;
        //MultipleFlag mfCurrent = null;
        //LongText ltCurrent = null;
        //COM.ibm.opicmpdh.objects.Blob blCurrent = null;
        // ID's of newly created objects
        //ReturnID idNew = new ReturnID(0);
        //ReturnID idUnused = new ReturnID(0);
        // Information about exception location
        String strMethod = "update";
        //String strSP = null;
        // Transactions
        //String strIDAttributeValue = null;
        //Vector vctAttributes = null;
        //boolean bIDFound = false;
        String strNow = null;
        String strForever = null;
        int iOPENID = _prof.getOPWGID();
        int iPartNoSessionID = -1;

        String strEnterprise = _prof.getEnterprise();
        //int iTranID = _prof.getTranID();
        
        String strTraceBase = setTraceBase(strMethod);

        try {
            debug(D.EBUG_DETAIL, strTraceBase + " transaction");
            test(strEnterprise != null, strTraceBase + " enterprise is null");
            test(iOPENID > 0, strTraceBase + " OPWGID <= 0");
            test(_vctTransactions != null, strTraceBase + " _vctTransactions is null");
            debug(D.EBUG_DETAIL, strTraceBase + " Enterprise: " + strEnterprise);
            debug(D.EBUG_DETAIL, strTraceBase + " OPENID: " + iOPENID);
            debug(D.EBUG_SPEW, strTraceBase + " Transactions: " + _vctTransactions);

            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            isPending();
            // Need to grab now and forever
            getNow();

            strNow = c_strNow;
            strForever = c_strForever;

            iPartNoSessionID = PartNo.getSessionId(this,_prof);
            debug(D.EBUG_SPEW, "checkBusinessRules:getting unique session ID " + iPartNoSessionID + " for PartNo");

            Vector vctPartNos = new Vector();
            /*
      for (int i = 0; i < _vctTransactions.size(); i++) {

        debug(D.EBUG_DETAIL,"Rule51 checking Business RUles on (outside of IF)  class [" + i + "] " + _vctTransactions.elementAt(i).getClass().getName() + ":" + _vctTransactions.elementAt(i).toString());

        if (_vctTransactions.elementAt(i) instanceof ReturnEntityKey || _vctTransactions.elementAt(i) instanceof ReturnRelatorKey) {

           String s1 = (_vctTransactions.elementAt(i) instanceof ReturnRelatorKey ? "rrk" : "rek");

           debug(D.EBUG_DETAIL,"Rule51 checking Business RUles on " + s1);
           //vctPartNos.addAll(checkBusinessRules(iPartNoSessionID,_vctTransactions));

          //Need to do this only for UI updates
          break;
        }
      }
             */

            vctPartNos.addAll(checkBusinessRules(iPartNoSessionID,_vctTransactions));


            OPICMList oltmp = null;

            // Process updates for each Entity if none of the audits failed.
            // Once the Entities are Posted .. we rescan to find the relators..
            for (int i = 0; i < _vctTransactions.size(); i++) {
                //bIDFound = false;

                if (_vctTransactions.elementAt(i) instanceof Entity) {
                    entCurrent = (Entity) _vctTransactions.elementAt(i);

                    updateEntity(_prof, entCurrent, bCheckDeactivatedEntity, vctDeferred, false);

                    //Forced to do this since Opicmlist will only accept OPICMobjects
                    ReturnEntityKey reCurrent = new ReturnEntityKey(entCurrent.getEntityType(), entCurrent.getEntityID(), true);

                    olReturn.put(reCurrent);
                } else if (_vctTransactions.elementAt(i) instanceof Relator) {
                    Relator relCurrent = (Relator) _vctTransactions.elementAt(i);

                    updateRelator(_prof, relCurrent, strNow, strForever, vctDeferred, _bAttributesOnly);

                    ReturnRelatorKey rlkCurrent = new ReturnRelatorKey(relCurrent.getEntityType(), relCurrent.getEntityID(), relCurrent.getEntity1Type(), relCurrent.getEntity1ID(), relCurrent.getEntity2Type(), relCurrent.getEntity2ID(), true);

                    olReturn.put(rlkCurrent);
                } else if (_vctTransactions.elementAt(i) instanceof EntitiesAndRelator) {
                    EntitiesAndRelator erCurrent = (EntitiesAndRelator) _vctTransactions.elementAt(i);

                    updateEntitiesAndRelator(_prof, erCurrent, bCheckDeactivatedEntity, strNow, strForever, vctDeferred, _bAttributesOnly);

                    Relator relCurrent = erCurrent.getRelator();
                    ReturnRelatorKey rlkCurrent = new ReturnRelatorKey(relCurrent.getEntityType(), relCurrent.getEntityID(), relCurrent.getEntity1Type(), relCurrent.getEntity1ID(), relCurrent.getEntity2Type(), relCurrent.getEntity2ID(), true);

                    olReturn.put(rlkCurrent);
                } else if (_vctTransactions.elementAt(i) instanceof ReturnEntityKey) {
                    ReturnEntityKey reCurrent = (ReturnEntityKey) _vctTransactions.elementAt(i);

                    updateReturnEntity(_prof, reCurrent, strNow, strForever, vctDeferred, _bAttributesOnly);
                    reCurrent.setPosted(true);
                    olReturn.put(reCurrent);
                }
            }

            // Post Any Relators here ...this done so that the entities are posted first (above)
            // will have to be refined further so that this is done like the Relators or EntitiesandRelator
            for (int i = 0; i < _vctTransactions.size(); i++) {
                if (_vctTransactions.elementAt(i) instanceof ReturnRelatorKey) {


                    ReturnRelatorKey rlkCurrent = (ReturnRelatorKey) _vctTransactions.elementAt(i);

                    // substitute any new entity ids.. prior to making a link
                    if (rlkCurrent.getEntity2ID() < 0) {
                        debug(D.EBUG_SPEW, "Update: Returnrelatorkey Entity2 Value is " + rlkCurrent.getEntity2Type() + ":" + rlkCurrent.getEntity2ID());

                        ReturnEntityKey rek = (ReturnEntityKey) olReturn.get(rlkCurrent.getEntity2Type() + rlkCurrent.getEntity2ID());

                        if (rek == null) {
                            continue;
                        }

                        rlkCurrent.m_iEntity2ID = rek.getReturnID();
                    }

                    if (rlkCurrent.getEntity1ID() < 0) {
                        debug(D.EBUG_SPEW, "Update: Returnrelatorkey Entity1 Value is " + rlkCurrent.getEntity1Type() + ":" + rlkCurrent.getEntity1ID());

                        ReturnEntityKey rek = (ReturnEntityKey) olReturn.get(rlkCurrent.getEntity1Type() + rlkCurrent.getEntity1ID());

                        if (rek == null) {
                            continue;
                        }

                        rlkCurrent.m_iEntity1ID = rek.getReturnID();
                    }

                    // Check to see if the RelatorKey is negative if soo .. see if there is a matching entity key that will  help
                    // Out.  In 1.1 everything is an entity.. and a returnRelatorKey is just used to perform the link.
                    // So in this scenario.. there should always be an ReturnEntityKey.. in the List for Relator's w/ ids < 0
                    if (rlkCurrent.getEntityID() < 0) {
                        debug(D.EBUG_SPEW, "Update: Returnrelatorkey Entity Value is " + rlkCurrent.getEntityType() + ":" + rlkCurrent.getEntityID());

                        ReturnEntityKey rek = (ReturnEntityKey) olReturn.get(rlkCurrent.getEntityType() + rlkCurrent.getEntityID());

                        if (rek != null) {
                            rlkCurrent.m_iEntityID = rek.getReturnID();
                        }
                    }

                    // We should now all have positive EID's for ET1 and ET2 - or we skipped the relator
                    Vector vcttmp = new Vector();

                    vcttmp.addElement(rlkCurrent);
                    debug(D.EBUG_SPEW, "Update before link: Returnrelatorkey Entity Value is " + rlkCurrent.getEntityType() + ":" + rlkCurrent.getEntityID());
                    debug(D.EBUG_SPEW, "Update before link: Returnrelatorkey Entity1 Value is " + rlkCurrent.getEntity1Type() + ":" + rlkCurrent.getEntity1ID());
                    debug(D.EBUG_SPEW, "Update before link: Returnrelatorkey Entity2 Value is " + rlkCurrent.getEntity2Type() + ":" + rlkCurrent.getEntity2ID());

                    oltmp = link(_prof, vcttmp);

                    commit();
                    rlkCurrent.setReturnID(((ReturnRelatorKey) oltmp.getAt(0)).fetchReturnID());
                    olReturn.put(rlkCurrent);
                }
            }

            //return relator key processing
            // Lets catch all the deferred posting right here.. they all should be Single Flag values
            // This for now will only be effective for ReturnEntityKey attributes
            debug(D.EBUG_DETAIL, " Checking for deferred updates");

            for (int y = 0; y < vctDeferred.size(); y++) {
                sfCurrent = (SingleFlag) vctDeferred.elementAt(y);

                updateSingleFlag(_prof, sfCurrent.getEntityType(), sfCurrent.getEntityID(), sfCurrent);
                
                limitMaxHistory(_prof, sfCurrent, sfCurrent.getEntityType(), sfCurrent.getEntityID());//SR120
                        
                debug(D.EBUG_SPEW, "Updated singleflag:Deferred");
            }

            // Release any locks on PartNumbers!!
            for(int y = 0; y < vctPartNos.size(); y++) {
                PartNo.removeForSession(this,(String)vctPartNos.elementAt(y),iPartNoSessionID);
            }

        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, strTraceBase + " RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);

            throw new MiddlewareException("RuntimeException trapped at: " + strTraceBase + rx);
        } catch (MiddlewareBusinessRuleException bx) {
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);

            if(bx.getLockedPartNumbers() != null) {
                // Release any locks on PartNumbers!!
                for(int z = 0; z < bx.getLockedPartNumbers().size(); z++) {
                    PartNo.removeForSession(this,(String)bx.getLockedPartNumbers().elementAt(z),iPartNoSessionID);
                }
            }

            throw bx;
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);
            debug(D.EBUG_DETAIL, strTraceBase + " complete");
        }

        // Return the output
        return olReturn;
    }


    /**
     *  Method to store the Work Group Defaults ...presently called from the EntityItem Object
     *  Parameters are profile,
     *  vector list of transaction objects (Entity and attributes),
     *
     * @param  _prof                                Description of the Parameter
     * @param  _vctTransactions                     Description of the Parameter
     * @return                                      Description of the Return Value
     * @exception  SQLException                     Description of the Exception
     * @exception  MiddlewareBusinessRuleException  Description of the Exception
     * @exception  MiddlewareException              Description of the Exception
     */
    public OPICMList updateWGDefault(Profile _prof, Vector _vctTransactions) throws SQLException, MiddlewareBusinessRuleException, MiddlewareException {

        // Establish all the method variables
        OPICMList olReturn = new OPICMList();
        // For returning info about newly created Entities
        Entity entCurrent = null;
        // Information about exception location
        String strMethod = "updateWGDefault";
        // Transactions
        int iOPENID = _prof.getOPWGID();
        
        String strEnterprise = _prof.getEnterprise();
        //int iTranID = _prof.getTranID();
        
        String strTraceBase = setTraceBase(strMethod);

        try {
            debug(D.EBUG_DETAIL, strTraceBase + " transaction");
            test(strEnterprise != null, strTraceBase + " enterprise is null");
            test(iOPENID > 0, strTraceBase + " OPWGID <= 0");
            test(_vctTransactions != null, strTraceBase + " _vctTransactions is null");
            debug(D.EBUG_DETAIL, strTraceBase + " Enterprise: " + strEnterprise);
            debug(D.EBUG_DETAIL, strTraceBase + " OPENID: " + iOPENID);
            debug(D.EBUG_SPEW, strTraceBase + " Transactions: " + _vctTransactions);

            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            isPending();

            if (_vctTransactions.size() > 0) {
                for (int i = 0; i < _vctTransactions.size(); i++) {
                    if (_vctTransactions.elementAt(i) instanceof Entity) {
                        entCurrent = (Entity) _vctTransactions.elementAt(i);

                        if (entCurrent.getEntityID() >= 0) {
                            test(entCurrent.getEntityID() < 0, strTraceBase + " Entity ID >=0 ");
                        }

                        updateAttributes(_prof, entCurrent.getEntityType(), entCurrent.getEntityID(), entCurrent.getAttributes());

                        //Forced to do this since Opicmlist will only accept OPICMobjects
                        ReturnEntityKey reCurrent = new ReturnEntityKey(entCurrent.getEntityType(), entCurrent.getEntityID(), true);

                        olReturn.put(reCurrent);
                    } else if (_vctTransactions.elementAt(i) instanceof ReturnEntityKey) {
                        debug(D.EBUG_SPEW, strTraceBase + "Found a ReturnEntityKey object");

                        ReturnEntityKey reCurrent = (ReturnEntityKey) _vctTransactions.elementAt(i);

                        if (reCurrent.getEntityID() >= 0) {
                            test(reCurrent.getEntityID() < 0, strTraceBase + " Entity ID >=0 ");
                        }

                        debug(D.EBUG_SPEW, strTraceBase + "Calling updateAttributes");
                        updateAttributes(_prof, reCurrent.getEntityType(), reCurrent.getEntityID(), reCurrent.m_vctAttributes);
                        olReturn.put(reCurrent);
                    }
                }
            }
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, strTraceBase + " RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);

            throw new MiddlewareException("RuntimeException trapped at: " + strTraceBase + rx);
        } catch (MiddlewareBusinessRuleException bx) {
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);

            throw bx;
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);
            debug(D.EBUG_DETAIL, strTraceBase + " complete");
        }

        // Return the output
        return olReturn;
    }
    /**
     *  Method to reset the Work Group Defaults ...presently called from the EntityItem Object
     *  Parameters are profile,
     *  vector list of transaction objects (Entity),
     *
     * @param  _prof                                Description of the Parameter
     * @param  _vctTransactions                     Description of the Parameter
     * @exception  SQLException                     Description of the Exception
     * @exception  MiddlewareBusinessRuleException  Description of the Exception
     * @exception  MiddlewareException              Description of the Exception
     */
    public void resetWGDefault(Profile _prof, Vector _vctTransactions) throws SQLException, MiddlewareBusinessRuleException, MiddlewareException {

        // Information about exception location
        String strMethod = "resetWGDefault";
        ReturnStatus returnStatus = new ReturnStatus(-1);
        // Transactions
        int iOPWGID = _prof.getOPWGID();
        ;
        String strEnterprise = _prof.getEnterprise();
        int iTranID = _prof.getTranID();
        ;
        String strTraceBase = setTraceBase(strMethod);

        try {
            debug(D.EBUG_DETAIL, strTraceBase + " transaction");
            test(strEnterprise != null, strTraceBase + " enterprise is null");
            test(iOPWGID > 0, strTraceBase + " OPWGID <= 0");
            test(_vctTransactions != null, strTraceBase + " _vctTransactions is null");
            debug(D.EBUG_DETAIL, strTraceBase + " Enterprise: " + strEnterprise);
            debug(D.EBUG_DETAIL, strTraceBase + " iOPWGID: " + iOPWGID);

            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            isPending();

            DatePackage dpNow = getDates();
            String strNow = dpNow.getNow();

            for (int i = 0; i < _vctTransactions.size(); i++) {
                if (_vctTransactions.elementAt(i) instanceof Entity) {
                    Entity entCurrent = (Entity) _vctTransactions.elementAt(i);

                    test(entCurrent.getEntityID() < 0, strTraceBase + " Entity ID >=0 ");
                    //reset WG Default here
                    callGBL2969(returnStatus, strEnterprise, entCurrent.getEntityType(), entCurrent.getEntityID(), iOPWGID, iTranID, strNow, strNow);
                    commit();
                    freeStatement();
                    isPending();
                } else if (_vctTransactions.elementAt(i) instanceof ReturnEntityKey) {
                    debug(D.EBUG_SPEW, strTraceBase + "Found a ReturnEntityKey object");

                    ReturnEntityKey reCurrent = (ReturnEntityKey) _vctTransactions.elementAt(i);

                    test(reCurrent.getEntityID() < 0, strTraceBase + " Entity ID >=0 ");
                    // reset here
                    callGBL2969(returnStatus, strEnterprise, reCurrent.getEntityType(), reCurrent.getEntityID(), iOPWGID, iTranID, strNow, strNow);
                    commit();
                    freeStatement();
                    isPending();
                }
            }
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, strTraceBase + " RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);

            throw new MiddlewareException("RuntimeException trapped at: " + strTraceBase + rx);
        } catch (MiddlewareBusinessRuleException bx) {
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);

            throw bx;
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            //clearUniqueCache(_vctTransactions);
            debug(D.EBUG_DETAIL, strTraceBase + " complete");
        }
    }
    /**
     * getLockList method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _bGetLock                Description of the Parameter
     * @return                          The lockList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final LockList getLockList(Profile _prof, boolean _bGetLock) throws SQLException, MiddlewareException {
        if (_bGetLock) {
            return new LockList(this, _prof);
        } else {
            return new LockList(_prof);
        }
    }
    /**
     * getLockListForLockEntity method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _lockEI                  Description of the Parameter
     * @param  _strActionType           Description of the Parameter
     * @return                          The lockListForLockEntity value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final LockList getLockListForLockEntity(Profile _prof, EntityItem _lockEI, String _strActionType) throws SQLException, MiddlewareException {
        return new LockList(this, _prof, _lockEI, _strActionType);
    }
    /*
     *  createLock method
     */
    /**
     *  Gets the lockGroup attribute of the Database object
     *
     * @param  _prof                    Description of the Parameter
     * @param  _lockEI                  Description of the Parameter
     * @param  _ei                      Description of the Parameter
     * @param  _strActionType           Description of the Parameter
     * @param  _iLockType               Description of the Parameter
     * @param  _bCreateLock             Description of the Parameter
     * @return                          The lockGroup value
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */
    public final LockGroup getLockGroup(Profile _prof, EntityItem _lockEI, EntityItem _ei, String _strActionType, int _iLockType, boolean _bCreateLock) throws SQLException, MiddlewareException {
        return new LockGroup(this, _prof, _lockEI, _ei, _strActionType, _iLockType, _bCreateLock);
    }

    /*
     *  getLockGroups method
     */
    /**
     *  Gets the lockGroup
     *
     * @param  _prof                    Description of the Parameter
     * @param  _lockEI                  Description of the Parameter
     * @param  _aei                      Description of the Parameter
     * @param  _strActionType           Description of the Parameter
     * @param  _iLockType               Description of the Parameter
     * @param  _bCreateLock             Description of the Parameter
     * @return                          The lockGroup value
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */
    public final LockGroup[] getLockGroups(Profile _prof, EntityItem _lockEI, EntityItem[] _aei, String _strActionType, int _iLockType, boolean _bCreateLock) throws SQLException, MiddlewareException {
        EANList lgList = new EANList();
        for (int i=0; i < _aei.length; i++) {
            EntityItem ei = _aei[i];
            lgList.put(new LockGroup(this, _prof, _lockEI, ei, _strActionType, _iLockType, _bCreateLock));
        }
        LockGroup[] alg = new LockGroup[lgList.size()];
        lgList.copyTo(alg);
        return alg;
    }

    /*
     *  clearLock method
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strEntityType           Description of the Parameter
     * @param  _iEntityID       Description of the Parameter
     * @param  _strLockEntityType       Description of the Parameter
     * @param  _iLockEntityID           Description of the Parameter
     * @param  _strLockOwner            Description of the Parameter
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */
    public final void clearLock(Profile _prof, String _strEntityType, int _iEntityID, String _strLockEntityType, int _iLockEntityID, String _strLockOwner) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        String strMethod = "clearLock";
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();

        try {
            debug(D.EBUG_DETAIL, strMethod + " transaction");
            test(strEnterprise != null, " enterprise is null");
            test(_strEntityType != null, " entityType is null");
            test(_iEntityID > 0, " entityID <= 0");
            test(_strLockEntityType != null, " lockEntityType is null");
            test(_iLockEntityID > 0, " lockEntityID <= 0");
            test(_strLockOwner != null, " LockOwner is null");
            test(iOPWGID > 0, " OPWGID <= 0");
            debug(D.EBUG_DETAIL, " clearLock:Enterprise: " + strEnterprise);
            debug(D.EBUG_DETAIL, " clearLock:strEntityType: " + _strEntityType);
            debug(D.EBUG_DETAIL, " clearLock:iEntityID: " + _iEntityID);
            debug(D.EBUG_DETAIL, " clearLock:strLockEntityType: " + _strLockEntityType);
            debug(D.EBUG_DETAIL, " clearLock:iLockEntityID: " + _iLockEntityID);
            debug(D.EBUG_DETAIL, " clearLock:LockOwner: " + _strLockOwner);
            callGBL2036(returnStatus, strEnterprise, _strEntityType, _iEntityID, _strLockEntityType, _iLockEntityID, _strLockOwner);
            commit();
            freeStatement();
            isPending();
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            commit();
            freeStatement();
            isPending();
            // DO NOT FREE THE CONNECTION
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
    }

    /*
     *  clearLock method
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strEntityType           Description of the Parameter
     * @param  _iEntityID       Description of the Parameter
     * @param  _strLockEntityType       Description of the Parameter
     * @param  _iLockEntityID           Description of the Parameter
     * @param  _strLockOwner            Description of the Parameter
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */

    public final void clearLocks(Profile _prof, EntityItem[] _aei, String _strLockEntityType, int _iLockEntityID, String _strLockOwner, int _iLockType) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        String strMethod = "clearLocks";
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();

        try {
            debug(D.EBUG_DETAIL, strMethod + " transaction");
            test(strEnterprise != null, " enterprise is null");
            test(_strLockEntityType != null, " lockEntityType is null");
            test(_iLockEntityID > 0, " lockEntityID <= 0");
            test(_strLockOwner != null, " LockOwner is null");
            test(iOPWGID > 0, " OPWGID <= 0");

            for (int i=0; i < _aei.length; i++) {
                EntityItem ei = _aei[i];
                String strEntityType = ei.getEntityType();
                int iEntityID = ei.getEntityID();
                if (_iLockType == LockGroup.ALLLOCK) {
                    callGBL2036(returnStatus, strEnterprise, strEntityType, iEntityID, _strLockEntityType, _iLockEntityID, _strLockOwner);
                } else {
                    callGBL2038(returnStatus, strEnterprise, strEntityType, iEntityID, _iLockType, _strLockEntityType, _iLockEntityID, _strLockOwner);
                }
                commit();
                freeStatement();
                isPending();
            }
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            commit();
            freeStatement();
            isPending();
            // DO NOT FREE THE CONNECTION
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
    }

    /**
     * getParentChildList method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _pEI                     Description of the Parameter
     * @param  _cEI                     Description of the Parameter
     * @return                          The parentChildList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final ParentChildList getParentChildList(Profile _prof, EntityItem _pEI, EntityItem _cEI) throws SQLException, MiddlewareException {
        return new ParentChildList(this, _prof, _pEI, _cEI);
    }
    /*
     *  executeAction method for DeleteActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _dai                                       Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  LockException                          Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  EANBusinessRuleException               Description of the Exception
     */
    public final void executeAction(Profile _prof, DeleteActionItem _dai) throws SQLException, MiddlewareException, LockException, MiddlewareShutdownInProgressException, EANBusinessRuleException {
        _dai.executeAction(this, _prof);
    }
    /*
     *  executeAction method for LinkActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _lai                                       Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  LockException                          Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  EANBusinessRuleException               Description of the Exception
     */
    public final Object executeAction(Profile _prof, LinkActionItem _lai) throws SQLException, MiddlewareException, LockException, MiddlewareShutdownInProgressException, EANBusinessRuleException, WorkflowException {
        return _lai.executeAction(this, _prof);
    }
    /*
     *  executeLink method for LinkActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _lai                                       Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  LockException                          Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  EANBusinessRuleException               Description of the Exception
     */
    public final Vector executeLink(Profile _prof, LinkActionItem _lai) throws SQLException, MiddlewareException, LockException, MiddlewareShutdownInProgressException, EANBusinessRuleException, WorkflowException {
        return _lai.executeLink(this, _prof);
    }
    /*
     *  executeAction method for WorkflowActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _wai                                       Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  WorkflowException                      Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void executeAction(Profile _prof, WorkflowActionItem _wai) throws SQLException, MiddlewareException, WorkflowException, MiddlewareShutdownInProgressException {
        _wai.executeAction(this, _prof);
    }
    /*
     *  executeAction method for WatchdogActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _wdai                                      Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareRequestException             Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  WorkflowException                      Description of the Exception
     */
    public final WatchdogActionItem executeAction(WatchdogActionItem _wdai) throws SQLException, MiddlewareRequestException, MiddlewareShutdownInProgressException, MiddlewareException, WorkflowException {
        return _wdai.executeAction(this);
    }
    /*
     *  executeAction method for LockActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _lai                                       Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void executeAction(Profile _prof, LockActionItem _lai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        _lai.executeAction(this, _prof);
    }
    /*
     *  executeAction method for MatrixActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _mai                                       Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final MatrixList executeAction(Profile _prof, MatrixActionItem _mai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return _mai.executeAction(this, _prof);
    }
    /**
     * executeAction for NavActionItem
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _nai                                       Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final EntityList executeAction(Profile _prof, NavActionItem _nai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return _nai.executeAction(this, _prof);
    }
    /*
     *  generatePickList method for MatrixActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _mai                                       Description of the Parameter
     * @param  _strRelatorType                            Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final EntityList generatePickList(Profile _prof, MatrixActionItem _mai, String _strRelatorType) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return _mai.getPickList(this, _prof, _strRelatorType);
    }
    /*
     *  generatePickList method for MatrixActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _sai                                       Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final EntityList executeAction(Profile _prof, SearchActionItem _sai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return _sai.executeAction(this, _prof);
    }
    /*
     *  executeAction method for WhereUsedActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _wuai                                      Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final WhereUsedList executeAction(Profile _prof, WhereUsedActionItem _wuai, boolean _bMeta) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return _wuai.executeAction(this, _prof, _bMeta);
    }
    /*
     *  generatePickList method for WhereUsedActionItem
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _wuai                                      Description of the Parameter
     * @param  _strRelatorType                            Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final EntityList generatePickList(Profile _prof, WhereUsedActionItem _wuai, String _strRelatorType) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return _wuai.getPickList(this, _prof, _strRelatorType);
    }
    /**
     *  createEntity method for WhereUsedActionItem
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _wuai                                      Description of the Parameter
     * @param  _strRelatorType                            Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final EntityList createEntity(Profile _prof, WhereUsedActionItem _wuai, String _strRelatorType) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return _wuai.createEntity(this, _prof, _strRelatorType);
    }

    /*
     *  transfers a portion of records in a queue type between profiles
     */
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _iOLDOPWG                                  Description of the Parameter
     * @param  _strQueueName                              Description of the Parameter
     * @param  _iStartID                                  Description of the Parameter
     * @param  _iEndID                                    Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void transferQueues(Profile _prof, int _iOLDOPWG, String _strQueueName, int _iStartID, int _iEndID) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {

        //String strMethod = "transferQueues";
        //String strSP = "GBL8005";

        try {
            test(_prof != null, "transferQueues:1: profile is null!");
            test(_strQueueName != null, "transferQueues:2: QueueName is null!");

            ReturnStatus returnStatus = new ReturnStatus(-1);
            int iOPWG = _prof.getOPWGID();

            callGBL8005(returnStatus, _prof.getEnterprise(), iOPWG, _iOLDOPWG, _strQueueName, _iStartID, _iEndID);
            freeStatement();
            isPending();
        } finally {
            freeStatement();
            isPending();
        }
    }
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _iOffSet                                   Description of the Parameter
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void refreshDGQueue(Profile _prof) throws MiddlewareException, SQLException, MiddlewareShutdownInProgressException {

        String strMethod = "refreshDGQueue";
        //String strSP = "GBL8006";

        try {
            debug(D.EBUG_DETAIL, strMethod + " started");
            // Do some up front tests
            test(_prof != null, "The _prof you passed is null");

            // OK.. we have  good dates
            String strEnterprise = _prof.getEnterprise();
            int iOPWGID = _prof.getOPWGID();
            int iOPID = _prof.getOPID();

            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            isPending();
            setAutoCommit(false);

            //strSP = new String("GBL8006");

            callGBL8006(new ReturnStatus(-1), strEnterprise, iOPID, iOPWGID);
            freeStatement();
            isPending();
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);
            debug(D.EBUG_ERR, " RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);
            freeStatement();
            isPending();

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
    }
    /**
     *  Sets the outOfCirculation attribute of the Database object
     *
     * @param  _prof                                      The new outOfCirculation value
     * @param  _strAttributeCode                          The new outOfCirculation value
     * @param  _strFlagCode                               The new outOfCirculation value
     * @param  _b                                         The new outOfCirculation value
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void setOutOfCirculation(Profile _prof, String _strEntityType, String _strAttributeCode, String _strFlagCode, boolean _b) throws MiddlewareException, SQLException, MiddlewareShutdownInProgressException {

        String strMethod = "setOutOfCiculation";
        //String strSP = "NOSP";

        try {
            debug(D.EBUG_DETAIL, strMethod + " started");
            // Do some up front tests
            test(_prof != null, "The _prof you passed is null");

            int iOPWGID = _prof.getOPWGID();
            int iTranID = _prof.getTranID();
            DatePackage dpNow = getDates();
            String strEffFrom = dpNow.getNow();
            String strEffTo = (_b ? dpNow.getNow() : dpNow.getForever());
            String strEnterprise = _prof.getEnterprise();
            String strLinkType = "DynaRule";
            String strLinkType1 = _strEntityType;
            String strLinkType2 = _strAttributeCode;
            String strLinkCode = "OutOfCirculation";
            String strLinkValue = _strFlagCode;

            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }

            isPending();
            setAutoCommit(false);

            //strSP = new String("GBL7504");

            callGBL7504(new ReturnStatus(-1), iOPWGID, strEnterprise, strLinkType, strLinkType1, strLinkType2, strLinkCode, strLinkValue, iTranID, strEffFrom, strEffTo);
            freeStatement();
            isPending();
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);
            debug(D.EBUG_ERR, " RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);
            freeStatement();
            isPending();

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
    }
    /**
     * Returns a DescriptionChangeList from Meta that have changed for a given Interval
     * For a given Type
     *
     * @param  _prof                    Description of the Parameter
     * @param  _iType                   Description of the Parameter
     * @param  _strStartDate            Description of the Parameter
     * @param  _strEndDate              Description of the Parameter
     * @return                          The descriptionChangeList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final DescriptionChangeList getDescriptionChangeList(Profile _prof, int _iType, String _strStartDate, String _strEndDate) throws SQLException, MiddlewareException {
        test(_prof != null, "Profile is null.");
        test(Validate.isoDate(_strStartDate), "Start Date format is invalid ISODATE:" + _strStartDate);
        test(Validate.isoDate(_strEndDate), "End Date format is invalid ISODATE:" + _strEndDate);

        return new DescriptionChangeList(this, _prof, _iType, _strStartDate, _strEndDate);
    }
    /**
     *  Gets the listOfCountriesForAVAIL attribute of the Database object
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _ei                                        Description of the Parameter
     * @return                                            The listOfCountriesForAVAIL value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final String[] getListOfCountriesForAVAIL(Profile _prof, EntityItem _ei) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return EANUtility.getListOfCountriesForAVAIL(this, _prof, _ei);
    }
    /**
     *  Gets the vELockOwners attribute of the Database object
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _ei                                        Description of the Parameter
     * @return                                            The vELockOwners value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public String[] getVELockOwners(Profile _prof, EntityItem _ei) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return EANUtility.getVELockOwners(this, _prof, _ei);
    }
    public String[][] checkVELockOwners(Profile _prof, EntityItem[] _eia) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return EANUtility.checkVELockOwners(this, _prof, _eia);
    }
    /**
     *  Gets the vELockERList attribute of the Database object
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _strEntityType                             Description of the Parameter
     * @return                                            The vELockERList value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public VELockERList getVELockERList(Profile _prof, String _strEntityType) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return new VELockERList(this, _prof, _strEntityType);
    }
    /**
     *  Gets the generalAreaList attribute of the Database object
     *
     * @param  _prof                                      Description of the Parameter
     * @return                                            The generalAreaList value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public GeneralAreaList getGeneralAreaList(Profile _prof) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return new GeneralAreaList(this, _prof);
    }
    /**
     * Return an Interval Group from Queue table using startDate == epoch, endDate == forever
     *
     * @param  _emf                     Description of the Parameter
     * @param  _prof                    Description of the Parameter
     * @param  _strQueueType            Description of the Parameter
     * @return                          The intervalGroup value
     * @exception  MiddlewareException  Description of the Exception
     * @exception  SQLException         Description of the Exception
     */
    public IntervalGroup getIntervalGroup(EANMetaFoundation _emf, Profile _prof, String _strQueueType) throws MiddlewareException, SQLException {
        return new IntervalGroup(_emf, this, _prof, _strQueueType);
    }
    /**
     * Return an Interval Group from Queue table using specified start, end dates
     *
     * @param  _emf                     Description of the Parameter
     * @param  _prof                    Description of the Parameter
     * @param  _strQueueType            Description of the Parameter
     * @param  _strStartDate            Description of the Parameter
     * @param  _strEndDate              Description of the Parameter
     * @return                          The intervalGroup value
     * @exception  MiddlewareException  Description of the Exception
     * @exception  SQLException         Description of the Exception
     */
    public IntervalGroup getIntervalGroup(EANMetaFoundation _emf, Profile _prof, String _strQueueType, String _strStartDate, String _strEndDate) throws MiddlewareException, SQLException {
        return new IntervalGroup(_emf, this, _prof, _strQueueType, _strStartDate, _strEndDate);
    }
    /**
     * Return an EntityChangeHistoryGroup for the specified EntityItem
     *
     * @param  _emf                            Description of the Parameter
     * @param  _prof                           Description of the Parameter
     * @param  _ei                             Description of the Parameter
     * @return                                 The entityChangeHistoryGroup value
     * @exception  MiddlewareException         Description of the Exception
     * @exception  MiddlewareRequestException  Description of the Exception
     * @exception  SQLException                Description of the Exception
     */
    public EntityChangeHistoryGroup getEntityChangeHistoryGroup(Profile _prof, EntityItem _ei) throws MiddlewareException, MiddlewareRequestException, SQLException {
        return new EntityChangeHistoryGroup(this, _prof, _ei);
    }
    /**
     * Return an AttributeChangeHistoryGroup for the specified EANAttribute
     *
     * @param  _emf                            Description of the Parameter
     * @param  _prof                           Description of the Parameter
     * @param  _ea                             Description of the Parameter
     * @return                                 The attributeChangeHistoryGroup value
     * @exception  MiddlewareException         Description of the Exception
     * @exception  MiddlewareRequestException  Description of the Exception
     * @exception  SQLException                Description of the Exception
     */
    public AttributeChangeHistoryGroup getAttributeChangeHistoryGroup(Profile _prof, EANAttribute _ea) throws MiddlewareException, MiddlewareRequestException, SQLException {
        return new AttributeChangeHistoryGroup(this, _prof, _ea);
    }
    /**
     * Get a MetaColumnOrderGroup for a single Entity - EntityGroup Flavor
     *
     * @param  _strEntityType                  Description of the Parameter
     * @param  _prof                           Description of the Parameter
     * @return                                 The metaColumnOrderGroup value
     * @exception  SQLException                Description of the Exception
     * @exception  MiddlewareException         Description of the Exception
     * @exception  MiddlewareRequestException  Description of the Exception
     */
    public MetaColumnOrderGroup getMetaColumnOrderGroup(String _strEntityType, Profile _prof) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new MetaColumnOrderGroup(this, new EntityGroup(null, this, _prof, _strEntityType, "Edit"));
    }
    /**
     * Get a MetaColumnOrderGroup for a single Entity - MatrixList Flavor
     *
     * @param  _strEntityType                  Description of the Parameter
     * @param  _prof                           Description of the Parameter
     * @param  _strMatrixActionKey             Matrix ActionItem key
     * @return                                 The metaColumnOrderGroup value
     * @exception  SQLException                Description of the Exception
     * @exception  MiddlewareException         Description of the Exception
     * @exception  MiddlewareRequestException  Description of the Exception
     */
    public MetaColumnOrderGroup getMetaColumnOrderGroupForMatrix(String _strEntityType, String _strMatrixActionKey, Profile _prof) throws SQLException, MiddlewareException, MiddlewareRequestException {

        // we need just enough to build a MatrixList....
        MatrixActionItem mai = new MatrixActionItem(null, this, _prof, _strMatrixActionKey);
        EntityGroup eg = new EntityGroup(null, this, _prof, _strEntityType, "Edit");
        EntityItem[] aei = { new EntityItem(eg, _prof, _strEntityType, 0) };

        mai.setEntityItems(aei);

        MatrixList ml = new MatrixList(this, _prof, mai);

        return new MetaColumnOrderGroup(this, ml);
    }

    /**
     * Get a MetaColumnOrderGroup for a single Entity - SearchBinder Flavor
     *
     * @param  _searchBinder                  Description of the Parameter
     * @param  _prof                           Description of the Parameter
     * @return                                 The metaColumnOrderGroup value
     * @exception  SQLException                Description of the Exception
     * @exception  MiddlewareException         Description of the Exception
     * @exception  MiddlewareRequestException  Description of the Exception
     */
    public MetaColumnOrderGroup getMetaColumnOrderGroup(SearchBinder _searchBinder) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new MetaColumnOrderGroup(this, _searchBinder);
    }


    /**
     * Update the MetaTable
     *
     * @param  _mr                      Description of the Parameter
     * @exception  MiddlewareException  Description of the Exception
     */
    public void updatePdhMetaRow(MetaRow _mr) throws MiddlewareException {
        _mr.updatePdh(this);
    }
//  methods for PDG
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _pdgai                                     Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  SBRException                           Description of the Exception
     */
    public final void executeAction(Profile _prof, PDGActionItem _pdgai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException, SBRException {

        String strValOn = _prof.getValOn();
        String strEffOn = _prof.getEffOn();

        try {
//          PDGUtility util = new PDGUtility();
//          util.updateEntity(this, _prof, _pdgai.getEntityItem());

            _pdgai.executeAction(this, _prof);
            //reset profile dates to the way it was for preview
            _prof.setValOn(strValOn);
            _prof.setEffOn(strEffOn);
        } catch (SBRException ex) {
            //reset profile dates to the way it was for preview
            _prof.setValOn(strValOn);
            _prof.setEffOn(strEffOn);

            throw ex;
        }
    }
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _pdgai                                     Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void queuedABR(Profile _prof, PDGActionItem _pdgai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException, SBRException {
//      PDGUtility util = new PDGUtility();
//      util.updateEntity(this, _prof, _pdgai.getEntityItem());

        _pdgai.queuedABR(this, _prof);
    }
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _pdgai                                     Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     */
    public final void queuedABR(Profile _prof, SPDGActionItem _spdgai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException, SBRException {
//      PDGUtility util = new PDGUtility();
//      util.updateEntity(this, _prof, _spdgai.getEntityItem());

        _spdgai.queuedABR(this, _prof);
    }
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _pdgai                                     Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  SBRException                           Description of the Exception
     */
    public final byte[] viewMissingData(Profile _prof, PDGActionItem _pdgai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException, SBRException {

        String strValOn = _prof.getValOn();
        String strEffOn = _prof.getEffOn();

        debug(D.EBUG_DETAIL, "before view: " + strValOn + ", " + strEffOn);

        byte[] baReturn = null;

        try {
//          PDGUtility util = new PDGUtility();
//          util.updateEntity(this, _prof, _pdgai.getEntityItem());

            baReturn = _pdgai.viewMissing(this, _prof);

            //reset profile dates to the way it was for preview
            _prof.setValOn(strValOn);
            _prof.setEffOn(strEffOn);
        } catch (SBRException ex) {
            //reset profile dates to the way it was for preview
            _prof.setValOn(strValOn);
            _prof.setEffOn(strEffOn);

            throw ex;
        }

        return baReturn;
    }
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _pdgai                                     Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  SBRException                           Description of the Exception
     */
    public final PDGCollectInfoList collectInfo(Profile _prof, int _iStep, PDGActionItem _pdgai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException, SBRException {
        return _pdgai.collectPDGInfo(this, _prof, _iStep);
    }
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _pdgai                                     Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  SBRException                           Description of the Exception
     */
    public final PDGCollectInfoList collectInfo(Profile _prof, EANMetaAttribute _meta, PDGActionItem _pdgai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException, SBRException {
        return _pdgai.collectPDGInfo(this, _prof, _meta);
    }

    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _spdgai                                     Description of the Parameter
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  SBRException                           Description of the Exception
     */
    public final void executeAction(Profile _prof, SPDGActionItem _spdgai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException, SBRException {
//      PDGUtility util = new PDGUtility();
//      util.updateEntity(this, _prof, _spdgai.getEntityItem());

        _spdgai.executeAction(this, _prof);
    }
    /**
     *  Description of the Method
     *
     * @param  _prof                                      Description of the Parameter
     * @param  _spdgai                                     Description of the Parameter
     * @return                                            Description of the Return Value
     * @exception  SQLException                           Description of the Exception
     * @exception  MiddlewareException                    Description of the Exception
     * @exception  MiddlewareShutdownInProgressException  Description of the Exception
     * @exception  SBRException                           Description of the Exception
     */
    public final byte[] viewMissingData(Profile _prof, SPDGActionItem _spdgai) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException, SBRException {
//      PDGUtility util = new PDGUtility();
//      util.updateEntity(this, _prof, _spdgai.getEntityItem());

        return _spdgai.viewMissing(this, _prof);
    }
//  end of methods for PDG
    /**
     * get a Serialized EANActionItem from the BOOKMARK table
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strActionItemKey        Description of the Parameter
     * @param  _strUserDescription      Description of the Parameter
     * @return                          The bookmarkedActionItem value
     * @exception  Exception
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final EANActionItem getBookmarkedActionItem(Profile _prof, String _strActionItemKey, String _strUserDescription) throws Exception, SQLException, MiddlewareException {

        // For building SQL statement
        StringBuffer strbSQL = null;
        // For executing SQL statement
        ResultSet rs = null;
        byte[] baBlob = null;
        EANActionItem eai = null;
        int iOPID = _prof.getOPID();
        String strEnterprise = _prof.getEnterprise();

        debug(D.EBUG_DETAIL, "Enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "OPID: " + iOPID);
        debug(D.EBUG_DETAIL, "ActionItemKey: " + _strActionItemKey);
        debug(D.EBUG_DETAIL, "UserDescription:" + _strUserDescription);

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        isPending();

        strbSQL = new StringBuffer();

        strbSQL.append("SELECT LENGTH(BlobValue), ActionItemType, SessionInfo, BlobValue FROM opicm.Bookmark");
        strbSQL.append(" WHERE OPID = ? ");
        strbSQL.append(" AND Enterprise = ? ");
        strbSQL.append(" AND ActionItemKey = ? ");
        strbSQL.append(" AND UserDescription = ? ");

        try {
            m_pstmtHandle = m_conPDHHandle.prepareStatement(strbSQL.toString());

            m_pstmtHandle.setInt(1, iOPID);
            m_pstmtHandle.setString(2, strEnterprise);
            m_pstmtHandle.setString(3, _strActionItemKey);
            m_pstmtHandle.setString(4, _strUserDescription);

            rs = m_pstmtHandle.executeQuery();

            test(rs != null, "getBookmarkedActionItem:rs is null");
        } catch (RuntimeException rx) {
            debug("RuntimeException on ? " + rx);
            rx.printStackTrace();

            throw rx;
        } catch (Exception x) {
            debug("Exception on ? " + x);
        }

        if (rs == null) {
            freeStatement();
            isPending();
            test(rs != null, "rs is null");
        }

        if (rs.next()) {
            int iBlobSize = rs.getInt(1);
            String strActionItemType = Unicode.rtrim(rs.getString(2));
            String strSessionInfo = Unicode.rtrim(rs.getString(3));

            if (iBlobSize > 0) {
                // not needed baBlob = new byte[iBlobSize];
                baBlob = rs.getBytes(4);

                // column three!
                debug("getBookmarkedActionItem:read a blob of size " + iBlobSize + " bytes");

                ///// DO OUR OBJECT STREAM THANG HERE!!
                try {
                    // pull object out of stream
                    ByteArrayInputStream BAin = new ByteArrayInputStream(baBlob);
                    ObjectInputStream Oin = new ObjectInputStream(BAin);

                    eai = (EANActionItem) Oin.readObject();

                    Oin.close();
                    BAin.close();

                    baBlob = null;
                } catch (Exception generalExc) {
                    debug("Exception on ? " + generalExc);
                    generalExc.printStackTrace();
                }

                baBlob = null;
            } else {
                // blobValue is empty
                baBlob = new byte[0];
                eai = new ActionItemImplicator(null, _prof, _strActionItemKey, strActionItemType);
            }

            // parse out session info: (EntityType:EntityID)
            // IF any important session info exists, AND a NavActionItem was successfully retrieved
            if ((strSessionInfo.length() > 0) && (eai != null) && (eai instanceof NavActionItem)) {
                StringTokenizer st = new StringTokenizer(strSessionInfo, ":");
                int iSessEntityID = -1;
                String strSessEntityType = "";
                String strSessEntityID = "";

                while (st.hasMoreElements()) {
                    strSessEntityType = st.nextToken();
                    strSessEntityID = st.nextToken();
                }

                try {
                    iSessEntityID = Integer.parseInt(strSessEntityID);
                } catch (NumberFormatException nfExc) {
                    this.debug(D.EBUG_WARN, "Database.getBookmarkedActionItem: session EntityID could not be parsed!! (" + strSessEntityID + ")");
                }

                if ((iSessEntityID > -1) && (strSessEntityType.length() > 0)) {
                    int iSessionID = _prof.getSessionID();
                    int iOPWGID = _prof.getOPWGID();
                    int iFlag = 1;

                    this.callGBL7547(new ReturnStatus(-1), strEnterprise, iSessionID, iOPWGID, strSessEntityType, iSessEntityID, iFlag);
                    this.commit();
                    this.freeStatement();
                    this.isPending();
                }
            }
            //
        } else {
            // rs has no rows
            // NOTHING -- let's return null
        }

        // Close out the ResultSet
        rs.close();

        rs = null;

        commit();
        freeStatement();
        isPending();

        return eai;
    }
    /**
     * putBookmarkedActionItem method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _eai                     Description of the Parameter
     * @param  _strUserDescription      Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     * @exception  BookmarkException
     */
    public final BookmarkItem putBookmarkedActionItem(Profile _prof, EANActionItem _eai, String _strUserDescription, int _iDupMode) throws SQLException, MiddlewareException, BookmarkException {

        // For building SQL statement
        StringBuffer strbSQL = null;
        // For executing SQL statement
        //ReturnStatus returnStatus = new ReturnStatus(-1);
        // Now and forever
        //String strNow = null;
        //String strForever = null;
        int iOPID = _prof.getOPID();
        int iOPWGID = _prof.getOPWGID();
        int iNLSID = _prof.getReadLanguage().getNLSID();
        String strActionItemKey = _eai.getActionItemKey();
        String strActionItemType = _eai.getActionClass();
        String strEnterprise = _prof.getEnterprise();
        //
        String strSessionInfo = "";

        if (m_conPDHHandle == null) {
            connect();
        }

        isPending();

        try {
            // FIRST - ensure that the total number of action items for this user are not exceeded
            this.debug(D.EBUG_DETAIL, "callGBL7543(" + "," + strEnterprise + "," + iOPID + "," + iNLSID + ")");

            ResultSet rs7543 = this.callGBL7543(new ReturnStatus(-1), strEnterprise, iOPID, iNLSID);
            ReturnDataResultSet rdrs7543 = new ReturnDataResultSet(rs7543);

            rs7543.close();

            rs7543 = null;

            this.commit();
            this.freeStatement();
            this.isPending();

            if (rdrs7543.getRowCount() >= BookmarkGroup.MAX_BOOKMARKITEMS) {
                BookmarkException bookmarkException = new BookmarkException("Save not performed. " + BookmarkException.MAX_LIMIT_MSG);

                throw bookmarkException;
            }

            //
            ResultSet rs7546 = this.callGBL7546(new ReturnStatus(-1), _prof.getEnterprise(), _prof.getSessionID(), iOPWGID);
            String strSessEntityType = "";
            String strSessEntityID = "";

            while (rs7546.next()) {
                strSessEntityType = Unicode.rtrim(rs7546.getString(1));
                strSessEntityID = Unicode.rtrim(rs7546.getString(2));
            }

            rs7546.close();
            rs7546 = null;
            this.commit();
            this.freeStatement();
            this.isPending();
            strSessionInfo = strSessEntityType + ":" + strSessEntityID;
        } catch (MiddlewareException mwExc) {
            this.debug(D.EBUG_ERR, "putBookmarkActionItem - GBL7546:" + mwExc);

            throw mwExc;
        }

        //
        debug(D.EBUG_DETAIL, "Enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "OPID: " + iOPID);
        debug(D.EBUG_DETAIL, "OPWGID: " + iOPWGID);
        debug(D.EBUG_DETAIL, "ActionItemKey: " + strActionItemKey);
        debug(D.EBUG_DETAIL, "ActionItemType: " + strActionItemType);
        debug(D.EBUG_DETAIL, "UserDescription: " + _strUserDescription);
        debug(D.EBUG_DETAIL, "SessionInfo: " + strSessionInfo);

        // this byte[] will hold our Serialized ActionItem
        byte[] byteArray = null;
        ByteArrayOutputStream BAout = null;
        ObjectOutputStream Oout = null;
        FileOutputStream Fos = null;
        FileInputStream Fin = null;
        String strFileName = "BookmarkTempBlob";

        try {
            //put object into byte array so we can streamify it later
            BAout = new ByteArrayOutputStream();
            Oout = new ObjectOutputStream(BAout);

            Oout.writeObject(_eai);
            Oout.flush();
            Oout.close();

            byteArray = BAout.toByteArray();

            //now we have byte array -- we will need this to produce InputStream for put to db
            BAout.close();
            test(byteArray.length <= 5242880, "blob size > 5MB");

            Fos = new FileOutputStream(strFileName);

            Fos.write(byteArray);
            Fos.close();
        } catch (IOException ioExc) {
            debug("putBookmarkedActionItem cannot convert ActionItem to byte[]:" + ioExc);

            throw new MiddlewareException("putBookmarkedActionItem cannot convert ActionItem to byte[]:");
        }

        // If we are not already connected, now is the time!
        getNow();

        //strNow = new String(c_strNow);
        //strForever = new String(c_strForever);
        // OK, now check for existence of primary key
        strbSQL = new StringBuffer();

        strbSQL.append("SELECT * from opicm.BOOKMARK WHERE ");
        strbSQL.append("    OPID = ? ");
        strbSQL.append("AND ENTERPRISE = ? ");
        strbSQL.append("AND ACTIONITEMKEY = ? ");
        strbSQL.append("AND USERDESCRIPTION = ? ");

        ResultSet rs = null;
        boolean bValueFound = false;

        try {
            m_pstmtHandle = m_conPDHHandle.prepareStatement(strbSQL.toString());

            m_pstmtHandle.setInt(1, iOPID);
            m_pstmtHandle.setString(2, strEnterprise);
            m_pstmtHandle.setString(3, strActionItemKey);
            m_pstmtHandle.setString(4, _strUserDescription);

            rs = m_pstmtHandle.executeQuery();

            test(rs != null, "putBookmarkedActionItem:rs is null");

            bValueFound = rs.next();

            rs.close();
            commit();
            freeStatement();
            isPending();
        } catch (RuntimeException rx) {
            debug("RuntimeException 1 on " + rx);
            rx.printStackTrace();
            freeStatement();
            isPending();

            throw rx;
        } catch (Exception x) {
            debug("Exception 1 on " + x);
            x.printStackTrace();
            freeStatement();
            isPending();

            throw new MiddlewareException("putBookmarkedActionItem Exception 1");
        } finally {
            // we dont need rs anymore from here on out
            if (rs != null) {
                rs.close();

                rs = null;
            }
        }

        // if we've found a row --> we must ~update~ it w/ new value b/c of unique key
        if (bValueFound) {
            if (_iDupMode == BookmarkGroup.DUP_REPLACE_MODE) {
                // Insert the new BLOB row
                strbSQL = new StringBuffer();

                strbSQL.append("UPDATE opicm.BOOKMARK");
                strbSQL.append(" SET (ActionItemType,OPWGID,BlobValue,SessionInfo) = ");
                strbSQL.append(" (?, ?, ?, ?)");
                strbSQL.append(" WHERE");
                strbSQL.append("    OPID = " + iOPID + " ");
                strbSQL.append("AND ENTERPRISE = '" + strEnterprise + "' ");
                strbSQL.append("AND ACTIONITEMKEY = '" + strActionItemKey + "' ");
                strbSQL.append("AND USERDESCRIPTION = '" + _strUserDescription + "'");

                m_pstmtHandle = m_conPDHHandle.prepareStatement(strbSQL.toString());

                m_pstmtHandle.setString(1, strActionItemType);
                m_pstmtHandle.setInt(2, iOPWGID);

                try {
                    //now get Input Stream from byte[] so we can put it into db
                    Fin = new FileInputStream(strFileName);

                    m_pstmtHandle.setBinaryStream(3, Fin, byteArray.length);
                    m_pstmtHandle.setString(4, strSessionInfo);

                    try {
                        m_pstmtHandle.execute();
                    } catch (RuntimeException rx) {
                        debug("putBookmarkedActionItem:execute failed " + rx);
                        rx.printStackTrace();

                        throw rx;
                    } catch (Exception x) {
                        debug("putBookmarkedActionItem:execute failed " + x);

                        throw new MiddlewareException("putBookmarkedActionItem Exception 2");
                    } finally {
                        // close these guys on bail out
                        try {
                            Fin.close();

                            File f = new File(strFileName);

                            if (f.exists()) {
                                f.delete();
                            }
                        } catch (IOException x) {
                            debug(D.EBUG_ERR, "putBookmarkedActionItem: unable to close Object Stream 1 " + x);

                            throw new MiddlewareException("putBookmarkedActionItem: unable to close Object Stream 1");
                        }
                    }

                    // end prepared statement execute try{}
                    commit();
                    freeStatement();
                    isPending();
                } catch (IOException exc) {
                    debug(D.EBUG_ERR, "putBookmarkedActionItem: unable to open Input Stream 1" + exc);

                    throw new MiddlewareException("putBookmarkedActionItem: unable to open Input Stream 1");
                } finally {
                    commit();
                    freeStatement();
                    isPending();
                }
            } else if (_iDupMode == BookmarkGroup.DUP_GEN_NEW_MODE) {
                // 3/19/04 - if key already exists, we need to find a unique key. lets use timestamp.
                String strUserDescNew = _strUserDescription;

                // we need timestamp length + " - " xtra.
                if (strUserDescNew.length() >= 225) {
                    strUserDescNew = strUserDescNew.substring(0, 225);
                }

                strUserDescNew = strUserDescNew + " - " + c_strNow;

                return this.putBookmarkedActionItem(_prof, _eai, strUserDescNew, BookmarkGroup.DUP_GEN_NEW_MODE);
                // end 3/19/24
            } else {
                throw new DuplicateBookmarkException(_prof, _eai, _strUserDescription);
            }
        } else {
            // insert new!!!
            // Insert the new BLOB row
            strbSQL = new StringBuffer();

            strbSQL.append("INSERT INTO opicm.BOOKMARK");
            strbSQL.append(" (Enterprise, OPID, OPWGID, ActionItemKey, ActionItemType, UserDescription, BlobValue, SessionInfo)");
            strbSQL.append(" VALUES (?, ?, ?, ?, ?, ?, ?, ?)");

            m_pstmtHandle = m_conPDHHandle.prepareStatement(strbSQL.toString());

            m_pstmtHandle.setString(1, strEnterprise);
            m_pstmtHandle.setInt(2, iOPID);
            m_pstmtHandle.setInt(3, iOPWGID);
            m_pstmtHandle.setString(4, strActionItemKey);
            m_pstmtHandle.setString(5, strActionItemType);
            m_pstmtHandle.setString(6, _strUserDescription);

            try {
                //now get Input Stream from byte[] so we can put it into db
                Fin = new FileInputStream(strFileName);

                m_pstmtHandle.setBinaryStream(7, Fin, byteArray.length);
                m_pstmtHandle.setString(8, strSessionInfo);

                try {
                    m_pstmtHandle.execute();
                } catch (RuntimeException rx) {
                    debug("putBookmarkedActionItem:execute failed " + rx);
                    rx.printStackTrace();

                    throw rx;
                } catch (Exception x) {
                    debug("putBookmarkedActionItem:execute failed " + x);

                    throw new MiddlewareException("putBookmarkedActionItem Exception 3");
                } finally {
                    // close these guys on bail out
                    try {
                        Fin.close();

                        File f = new File(strFileName);

                        if (f.exists()) {
                            f.delete();
                        }
                    } catch (IOException x) {
                        debug(D.EBUG_ERR, "putBookmarkedActionItem: unable to close Object Stream 2 " + x);

                        throw new MiddlewareException("putBookmarkedActionItem: unable to close Object Stream 2");
                    }
                }

                // end prepared statement execute try{}
                commit();
                freeStatement();
                isPending();
            } catch (IOException exc) {
                debug(D.EBUG_ERR, "putBookmarkedActionItem: unable to open Input Stream 2" + exc);

                throw new MiddlewareException("putBookmarkedActionItem: unable to open Input Stream 2");
            } finally {
                commit();
                freeStatement();
                isPending();
            }
        }

        // end insert new
        // 3/19/04 - return a BookmarkItem b/c it could have new properties i.e. new description for dup keys.
        return new BookmarkItem(null, _eai, _strUserDescription);
    }
    // end putBookmarkedActionItem
    /**
     *  Gets the bookmarkGroup attribute of the Database object
     *
     * @param  _prof                           Description of the Parameter
     * @return                                 The bookmarkGroup value
     * @exception  MiddlewareException         Description of the Exception
     * @exception  MiddlewareRequestException  Description of the Exception
     */
    public final BookmarkGroup getBookmarkGroup(Profile _prof) throws MiddlewareException, MiddlewareRequestException {
        return new BookmarkGroup(this, _prof);
    }
    /**
     *  Description of the Method
     *
     * @param  _strEnterprise           Description of the Parameter
     * @param  _iOPID                   Description of the Parameter
     * @param  _strActionItemKey        Description of the Parameter
     * @param  _strUserDescription      Description of the Parameter
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */
    public final void deleteBookmark(String _strEnterprise, int _iOPID, String _strActionItemKey, String _strUserDescription) throws SQLException, MiddlewareException {
        this.debug(D.EBUG_DETAIL, "callGBL7544(" + _strEnterprise + ":" + _iOPID + ":" + _strActionItemKey + ":" + _strUserDescription + ")");

        try {
            this.callGBL7544(new ReturnStatus(-1), _strEnterprise, _iOPID, _strActionItemKey, _strUserDescription);
        } finally {
            commit();
            freeStatement();
            isPending();
        }
    }
    /**
     *  Gets the metaEntityList attribute of the Database object
     *
     * @param  _prof                           Description of the Parameter
     * @return                                 The metaEntityList value
     * @exception  SQLException                Description of the Exception
     * @exception  MiddlewareException         Description of the Exception
     * @exception  MiddlewareRequestException  Description of the Exception
     */
    public final MetaEntityList getMetaEntityList(Profile _prof) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new MetaEntityList(this, _prof);
    }
    /**
     *  Gets a MiddlewareMail object
     *
     * @param                                  Description of the Parameter
     * @return                                 A MiddlewareMail object
     */
    public final MiddlewareMail getMiddlewareMail() {
        Properties props = System.getProperties();
        String strMailHost = (String) props.get("mail.smtp.host");

        this.debug(D.EBUG_DETAIL, "getMiddlewareMail:TRACE:smtphost is:" + strMailHost + ":");

        return new MiddlewareMail(MiddlewareMail.getSession());
    }
    /**
     *  refresh EntityItem
     *
     * @param                                  Description of the Parameter
     * @return                                 A EntityItem
     */
    public final EntityItem refreshEntityItem(Profile _prof, EntityGroup _eg, EntityItem _ei) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new EntityItem(_eg, _prof, this, _ei.getEntityType(), _ei.getEntityID());
    }
    /**
     *  getAllSoftLocksForWGID(Database _db, Profile _prof)
     *
     * @param                                  Description of the Parameter
     * @return                                 A EntityItem
     */
    public final LockList getAllSoftLocksForWGID(Profile _prof) throws SQLException, MiddlewareException, MiddlewareRequestException {
        LockList ll = new LockList(_prof);

        ll.getAllSoftLocksForWGID(this, _prof);

        return ll;
    }
    /**
     * Get a new SearchActionItem object from the Database.
     */
    public final SearchActionItem getSearchActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new SearchActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new NavActionItem object from the Database.
     */
    public final NavActionItem getNavActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new NavActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new DeleteActionItem object from the Database.
     */
    public final DeleteActionItem getDeleteActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new DeleteActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new CreateActionItem object from the Database.
     */
    public final CreateActionItem getCreateActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new CreateActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new WhereUsedActionItem object from the Database.
     */
    public final WhereUsedActionItem getWhereUsedActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new WhereUsedActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new LinkActionItem object from the Database.
     */
    public final LinkActionItem getLinkActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new LinkActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new WatchdogActionItem object from the Database.
     */
    public final WatchdogActionItem getWatchdogActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new WatchdogActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new WorkflowActionItem object from the Database.
     */
    public final WorkflowActionItem getWorkflowActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new WorkflowActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new ExtractActionItem object from the Database.
     */
    public final ExtractActionItem getExtractActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new ExtractActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new EditActionItem object from the Database.
     */
    public final EditActionItem getEditActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new EditActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new LockActionItem object from the Database.
     */
    public final LockActionItem getLockActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new LockActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new MatrixActionItem object from the Database.
     */
    public final MatrixActionItem getMatrixActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new MatrixActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new ReportActionItem object from the Database.
     */
    public final ReportActionItem getReportActionItem(EANMetaFoundation _emf, Profile _prof, String _strActionItemKey) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new ReportActionItem(_emf, this, _prof, _strActionItemKey);
    }
    /**
     * Get a new InactiveGroup object from the Database.
     */
    public final InactiveGroup getInactiveGroup(Profile _prof, String _strStartDate, boolean _bViewAll) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return new InactiveGroup(this, _prof, _strStartDate, _bViewAll);
    }
    public final InactiveGroup deactivatedUndo(Profile _prof, InactiveGroup _iag, InactiveItem[] _aiai) throws SQLException, MiddlewareException, MiddlewareRequestException {
        return _iag.deactivatedUndo(this, _prof, _aiai);
    }
    /**
     * Get a set of Profiles sharing Roles w/ the passed Profile.
     */
    public final ProfileSet getCommonProfiles(Profile _prof) throws SQLException, MiddlewareException, MiddlewareRequestException {

        ProfileSet psReturn = new ProfileSet();
        int iOPWGID = _prof.getOPWGID();
        String strEnterprise = _prof.getEnterprise();
        ResultSet rs = null;

        this.debug(D.EBUG_DETAIL, "callGBL7557(" + strEnterprise + ":" + iOPWGID + ")");

        try {
            rs = this.callGBL7557(new ReturnStatus(-1), strEnterprise, iOPWGID);

            ReturnDataResultSet rdrs = new ReturnDataResultSet(rs);

            if (rs != null) {
                rs.close();

                rs = null;
            }

            this.debug(D.EBUG_SPEW, "callGBL7557 row count:" + rdrs.getRowCount());

            RDRS7557_LOOP:
                for (int row = 0; row < rdrs.getRowCount(); row++) {
                    // If we are not already connected, now is the time!
                    if (m_conPDHHandle == null) {
                        connect();
                    }

                    isPending();

                    int i1 = rdrs.getColumnInt(row, 0);

                    this.debug(D.EBUG_SPEW, "callGBL7557 answers:" + i1);

                    try {

                        Profile profBuddy = new Profile(this, strEnterprise, i1);

                        boolean bContainsOperator = false;
                        PSRETURN_LOOP:
                            for(int j = 0; j < psReturn.size(); j++) {
                                if(psReturn.elementAt(j).getOPName().trim().equals(profBuddy.getOPName().trim())) {
                                    bContainsOperator = true;
                                    break PSRETURN_LOOP;
                                }
                            }

                        if ((profBuddy.getOPWGID() != _prof.getOPWGID()) && (profBuddy.getOPWGID() > 0) && (profBuddy.getOPName() != null) && (profBuddy.getReadLanguage() != null) && !profBuddy.getOPName().trim().equals(_prof.getOPName().trim()) && !bContainsOperator) {
                            psReturn.add(profBuddy);
                        }
                    } catch(Exception profExc) {
                        this.debug(D.EBUG_WARN,"in getCommonProfiles: 7557 returned an invalid/incomplete OPWGID:" + i1 + ". Skipping this Profile.");
                        continue RDRS7557_LOOP;
                    }
                }
        } finally {
            commit();
            freeStatement();
            isPending();
        }

        return psReturn;
    }
    public final StringBuffer genVEChangeXML(String _strAppRoot, Profile _prof, String _strExtractActionItem, String _strT1, String _strT2, String _strEntityType, int _iEntityID) throws MiddlewareRequestException, SQLException {
        return EANNetChanges.genVEChangeXML(_strAppRoot, this, _prof, _strExtractActionItem, _strT1, _strT2, _strEntityType, _iEntityID);
    }
    /**
     * Grab our Latest Runtime Information
     */
    public final String getRuntime(String _strEnterprise, String _strRunType) throws SQLException, MiddlewareException, MiddlewareRequestException {

        String strLatestTime = null;
        ResultSet rs = null;

        this.debug(D.EBUG_DETAIL, "callGBL7558(" + _strEnterprise + ":" + _strRunType + ")");

        try {
            rs = this.callGBL7558(new ReturnStatus(-1), _strEnterprise, _strRunType);

            ReturnDataResultSet rdrs = new ReturnDataResultSet(rs);

            if (rs != null) {
                rs.close();

                rs = null;
            }

            for (int row = 0; row < rdrs.getRowCount(); row++) {
                strLatestTime = rdrs.getColumn(row, 0);

                this.debug(D.EBUG_SPEW, "callGBL7558 answers:" + strLatestTime);
            }
        } finally {
            commit();
            freeStatement();
            isPending();
        }

        return strLatestTime;
    }
    /**
     * Save Runtime Information
     */
    public final void saveRuntime(String _strEnterprise, String _strRunType, String _strRunTime) throws SQLException, MiddlewareException, MiddlewareRequestException {
        this.debug(D.EBUG_DETAIL, "callGBL7559(" + _strEnterprise + ":" + _strRunType + ":" + _strRunTime + ")");

        try {
            this.callGBL7559(new ReturnStatus(-1), _strEnterprise, _strRunType, _strRunTime);
        } finally {
            commit();
            freeStatement();
            isPending();
        }
    }
    /**
     * Retrieve a BluePageEntry
     */
    public final BluePageEntry getBluePageEntry(InternetAddress _iaEmailAddress) throws BluePageException {
        return new BluePageEntry(_iaEmailAddress);
    }
    /**
     * Retrieve a BluePageEntryGroup
     */
    public final BluePageEntryGroup getBluePageEntryGroup(String _strLastName, String _strFirstName) throws BluePageException {
        return new BluePageEntryGroup(_strLastName, _strFirstName);
    }
    //
    // The individual methods for each stored procedure call
    //

    /**
     * putSoftwareImage method
     *
     * @param  _prof                    Description of the Parameter
     * @param  enterprise               Description of the Parameter
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @param  blobExtension            Description of the Parameter
     * @param  effFrom                  Description of the Parameter
     * @param  effTo                    Description of the Parameter
     * @param  attributeValue           Description of the Parameter
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final void putSoftwareImage(Profile _prof, String _enterprise, String entityType, int entityID, String attributeCode, String blobExtension, String effFrom, String effTo, byte[] attributeValue) throws SQLException, MiddlewareException {

        // For building SQL statement
        StringBuffer strbSQL = null;
        StringBuffer strbSQLX = null;
        // For executing SQL statement
        ReturnStatus returnStatus = new ReturnStatus(-1);
        // Now and forever
        String strNow = null;
        String strForever = null;
        COM.ibm.opicmpdh.objects.Blob blobAttribute = null;
        String strEnterprise = _enterprise;
        int iNLSID = _prof.getReadLanguage().getNLSID();
        int iOPWGID = _prof.getOPWGID();
        int iTranID = _prof.getTranID();

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "OPWGID: " + iOPWGID);
        debug(D.EBUG_DETAIL, "tranID: " + iTranID);
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "blobExtension: " + blobExtension);
        debug(D.EBUG_DETAIL, "nlsID: " + iNLSID);
        debug(D.EBUG_DETAIL, "effFrom: " + effFrom);
        debug(D.EBUG_DETAIL, "effTo: " + effTo);
        test(attributeValue.length <= 52428800, "blob size > 50MB");

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        // Need to grab now and forever
        isPending();
        getNow();

        strNow = c_strNow;
        strForever = c_strForever;
        // Deactivate the existing BLOB row
        strbSQL = new StringBuffer();

        strbSQL.append("UPDATE opicm.Software_update");
        strbSQL.append(" SET ValTo = '" + strNow + "'");
        strbSQL.append(" WHERE");
        strbSQL.append(" Enterprise = '" + strEnterprise + "' AND");
        strbSQL.append(" EntityType = '" + entityType + "' AND");
        strbSQL.append(" EntityID = " + entityID + " AND");
        strbSQL.append(" AttributeCode = '" + attributeCode + "' AND");
        strbSQL.append(" NLSID = " + iNLSID + " AND");
        strbSQL.append(" ValTo = '" + strForever + "'");

        m_rstmtHandle = m_conPDHHandle.createStatement();

        if (m_rstmtHandle == null) {
            throw new MiddlewareException("putUpdate:Statement handle is null");
        }

        try {
            m_rstmtHandle.executeUpdate(strbSQL.toString());
            freeStatement();
            isPending();
        } catch (SQLException x) {
            debug("SQLException on executeQuery " + x);
        } finally {
            freeStatement();
            isPending();
        }

        m_rstmtHandle = m_conPDHHandle.createStatement();

        if (m_rstmtHandle == null) {
            throw new MiddlewareException("putUpdate:Statement handle is null");
        }

        // Insert the new BLOB row
        strbSQL = new StringBuffer();

        strbSQL.append("INSERT INTO opicm.Software_Update");
        strbSQL.append(" (Enterprise, EntityType, EntityID, AttributeCode, BlobExtension, NLSID, ValFrom, ValTo, EffFrom, EffTo, OPENID, TRANID,AttributeValue)");
        strbSQL.append(" VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

        m_pstmtHandle = m_conPDHHandle.prepareStatement(strbSQL.toString());

        m_pstmtHandle.setString(1, strEnterprise);
        m_pstmtHandle.setString(2, entityType);
        m_pstmtHandle.setInt(3, entityID);
        m_pstmtHandle.setString(4, attributeCode);
        m_pstmtHandle.setString(5, blobExtension);
        m_pstmtHandle.setInt(6, iNLSID);
        m_pstmtHandle.setString(7, strNow);
        m_pstmtHandle.setString(8, strForever);
        m_pstmtHandle.setString(9, effFrom);
        m_pstmtHandle.setString(10, effTo);
        m_pstmtHandle.setInt(11, iOPWGID);
        m_pstmtHandle.setInt(12, iTranID);

        // This will create a temporary blob file
        try {
            blobAttribute = new COM.ibm.opicmpdh.objects.Blob(strEnterprise, entityType, entityID, attributeCode, attributeValue, blobExtension, iNLSID);

            m_pstmtHandle.setBinaryStream(13, blobAttribute.openBinaryStream(), blobAttribute.size());
        } catch (IOException x) {
            debug(D.EBUG_ERR, "putUpdate: unable to openBinaryStream() of blob " + x);
            freeStatement();
            isPending();

            throw new MiddlewareException("putUpdate: unable to openBinaryStream() of blob");
        }

        // This will remove the temporary blob file
        try {
            m_pstmtHandle.execute();
            freeStatement();
            isPending();
        } catch (RuntimeException rx) {
            debug("putUpdate:execute failed " + rx);
            rx.printStackTrace();
            freeStatement();
            isPending();

            try {
                blobAttribute.closeBinaryStream();
            } catch (IOException x) {
                debug(D.EBUG_ERR, "putUpdate: unable to closeBinaryStream() of blob " + x);

                throw new MiddlewareException("putUpdate: unable to closeBinaryStream() of blob");
            }
        } catch (Exception x) {
            debug("putUpdate:execute failed " + x);
            freeStatement();
            isPending();

            try {
                blobAttribute.closeBinaryStream();
            } catch (IOException y) {
                debug(D.EBUG_ERR, "putUpdate: unable to closeBinaryStream() of blob " + y);

                throw new MiddlewareException("putUpdate: unable to closeBinaryStream() of blob");
            }
        } finally {

            commit();
            freeStatement();
            isPending();

            try {
                blobAttribute.closeBinaryStream();
            } catch (IOException x) {
                debug(D.EBUG_ERR, "putUpdate: unable to closeBinaryStream() of blob " + x);

                throw new MiddlewareException("putUpdate: unable to closeBinaryStream() of blob");
            }
        }

    }
    /**
     * getSoftwareImage method
     *
     * @param  _prof                    Description of the Parameter
     * @param  enterprise               Description of the Paramater
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @return                          The blob value
     * @exception  Exception
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final COM.ibm.opicmpdh.objects.Blob getSoftwareImage(Profile _prof, String _enterprise, String entityType, int entityID, String attributeCode) throws Exception, SQLException, MiddlewareException {

        // For building SQL statement
        StringBuffer strbSQL = null;
        // For executing SQL statement
        ResultSet rs = null;
        byte[] baBlob = null;
        COM.ibm.opicmpdh.objects.Blob blobNew = null;
        String strEnterprise = _enterprise;
        int iNLSID = _prof.getReadLanguage().getNLSID();
        String strValOn = _prof.getValOn();
        String strEffOn = _prof.getEffOn();

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "nlsID: " + iNLSID);
        debug(D.EBUG_DETAIL, "valOn: " + strValOn);
        debug(D.EBUG_DETAIL, "effOn: " + strEffOn);

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        isPending();

        strbSQL = new StringBuffer();

        strbSQL.append("SELECT LENGTH(AttributeValue), BlobExtension, NLSID, ValFrom, ValTo, EffFrom, EffTo, OPENID, AttributeValue FROM opicm.Software_Update");
        strbSQL.append(" WHERE Enterprise = '" + strEnterprise + "'");
        strbSQL.append(" AND EntityType = '" + entityType + "'");
        strbSQL.append(" AND EntityID = " + entityID);
        strbSQL.append(" AND AttributeCode = '" + attributeCode + "'");
        strbSQL.append(" AND NLSID = " + iNLSID);
        strbSQL.append(" AND ValFrom <= '" + strValOn + "'");
        strbSQL.append(" AND '" + strValOn + "'");
        strbSQL.append(" < ValTo");
        strbSQL.append(" AND EffFrom <= '" + strEffOn + "'");
        strbSQL.append(" AND ");
        strbSQL.append(" '" + strEffOn + "'");
        strbSQL.append(" < EffTo");

        try {
            m_rstmtHandle = m_conPDHHandle.createStatement();

            test(m_rstmtHandle != null, "getUpdate:Statement handle is null");

            rs = m_rstmtHandle.executeQuery(strbSQL.toString());

            test(rs != null, "getUpdate:rs is null");
        } catch (RuntimeException rx) {
            debug("RuntimeException on ? " + rx);
            rx.printStackTrace();

            throw rx;
        } catch (Exception x) {
            debug("Exception on ? " + x);

            throw x;
        }

        if (rs == null) {
            freeStatement();
            isPending();
            test(rs != null, "rs is null");
        }

        if (rs.next()) {
            int iBlobSize = rs.getInt(1);

            if (iBlobSize > 0) {
                // not needed baBlob = new byte[iBlobSize];
                baBlob = rs.getBytes(9);

                // column nine!
                debug("getUpdate:read a blob of size " + iBlobSize + " bytes");

                blobNew = new COM.ibm.opicmpdh.objects.Blob(strEnterprise, entityType, entityID, attributeCode, baBlob, Unicode.rtrim(rs.getString(2)), rs.getInt(3), Unicode.rtrim(rs.getString(4)), Unicode.rtrim(rs.getString(5)), Unicode.rtrim(rs.getString(6)), Unicode.rtrim(rs.getString(7)), rs.getInt(8));
                baBlob = null;
            } else {
                baBlob = new byte[0];
                blobNew = new COM.ibm.opicmpdh.objects.Blob(strEnterprise, entityType, entityID, attributeCode, baBlob, Unicode.rtrim(rs.getString(2)), rs.getInt(3), Unicode.rtrim(rs.getString(4)), Unicode.rtrim(rs.getString(5)), Unicode.rtrim(rs.getString(6)), Unicode.rtrim(rs.getString(7)), rs.getInt(8));
            }
        } else {
            baBlob = new byte[0];
            blobNew = new COM.ibm.opicmpdh.objects.Blob();
        }

        // Close out the ResultSet
        rs.close();
        commit();

        rs = null;

        freeStatement();
        isPending();

        return blobNew;
    }
    /**
     * getSoftwareImage method
     *
     * @param  enterprise               Description of the Paramater
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @param  strValOn                 Description of the Parameter
     * @param  strEffOn                 Description of the Parameter
     * @return                          The blob value
     * @exception  Exception
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final COM.ibm.opicmpdh.objects.Blob getSoftwareImage(String strEnterprise, String entityType, int entityID, String attributeCode, String strValOn,String strEffOn) throws Exception, SQLException, MiddlewareException {
        // For building SQL statement
        StringBuffer strbSQL = null;
        // For executing SQL statement
        ResultSet rs = null;
        byte[] baBlob = null;
        COM.ibm.opicmpdh.objects.Blob blobNew = null;
        int iNLSID = 1;

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "nlsID: " + iNLSID);
        debug(D.EBUG_DETAIL, "valOn: " + strValOn);
        debug(D.EBUG_DETAIL, "effOn: " + strEffOn);

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        isPending();

        strbSQL = new StringBuffer();

        strbSQL.append("SELECT LENGTH(AttributeValue), BlobExtension, NLSID, ValFrom, ValTo, EffFrom, EffTo, OPENID, AttributeValue FROM opicm.Software_Update");
        strbSQL.append(" WHERE Enterprise = '" + strEnterprise + "'");
        strbSQL.append(" AND EntityType = '" + entityType + "'");
        strbSQL.append(" AND EntityID = " + entityID);
        strbSQL.append(" AND AttributeCode = '" + attributeCode + "'");
        strbSQL.append(" AND NLSID = " + iNLSID);
        strbSQL.append(" AND ValFrom <= '" + strValOn + "'");
        strbSQL.append(" AND '" + strValOn + "'");
        strbSQL.append(" < ValTo");
        strbSQL.append(" AND EffFrom <= '" + strEffOn + "'");
        strbSQL.append(" AND ");
        strbSQL.append(" '" + strEffOn + "'");
        strbSQL.append(" < EffTo");

        try {
            m_rstmtHandle = m_conPDHHandle.createStatement();

            test(m_rstmtHandle != null, "getUpdate:Statement handle is null");

            rs = m_rstmtHandle.executeQuery(strbSQL.toString());

            test(rs != null, "getUpdate:rs is null");
        } catch (RuntimeException rx) {
            debug("RuntimeException on ? " + rx);
            rx.printStackTrace();

            throw rx;
        } catch (Exception x) {
            debug("Exception on ? " + x);

            throw x;
        }

        if (rs == null) {
            freeStatement();
            isPending();
            test(rs != null, "rs is null");
        }

        if (rs.next()) {
            int iBlobSize = rs.getInt(1);

            if (iBlobSize > 0) {
                // not needed baBlob = new byte[iBlobSize];
                baBlob = rs.getBytes(9);

                // column nine!
                debug("getUpdate:read a blob of size " + iBlobSize + " bytes");

                blobNew = new COM.ibm.opicmpdh.objects.Blob(strEnterprise, entityType, entityID, attributeCode, baBlob, Unicode.rtrim(rs.getString(2)), rs.getInt(3), Unicode.rtrim(rs.getString(4)), Unicode.rtrim(rs.getString(5)), Unicode.rtrim(rs.getString(6)), Unicode.rtrim(rs.getString(7)), rs.getInt(8));
                baBlob = null;
            } else {
                baBlob = new byte[0];
                blobNew = new COM.ibm.opicmpdh.objects.Blob(strEnterprise, entityType, entityID, attributeCode, baBlob, Unicode.rtrim(rs.getString(2)), rs.getInt(3), Unicode.rtrim(rs.getString(4)), Unicode.rtrim(rs.getString(5)), Unicode.rtrim(rs.getString(6)), Unicode.rtrim(rs.getString(7)), rs.getInt(8));
            }
        } else {
            baBlob = new byte[0];
            blobNew = new COM.ibm.opicmpdh.objects.Blob();
        }

        // Close out the ResultSet
        rs.close();
        commit();

        rs = null;

        freeStatement();
        isPending();

        return blobNew;
    }
    /**
     * getSoftwareImageVersion method
     *
     * @param  _prof                    Description of the Parameter
     * @param  enterprise               Description of the Paramater
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @return                          The blob value
     * @exception  Exception
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final COM.ibm.opicmpdh.objects.Blob getSoftwareImageVersion(Profile _prof, String _enterprise, String entityType, int entityID, String attributeCode) throws Exception, SQLException, MiddlewareException {
        return getSoftwareImageVersion(_prof,_enterprise,entityType,entityID,attributeCode,"OBSOLETE");
    }
    /**
     * getSoftwareImageVersion method
     *
     * @param  _prof                    Description of the Parameter
     * @param  enterprise               Description of the Paramater
     * @param  entityType               Description of the Parameter
     * @param  entityID                 Description of the Parameter
     * @param  attributeCode            Description of the Parameter
     * @param  clientVersion
     * @return                          The blob value
     * @exception  Exception
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final COM.ibm.opicmpdh.objects.Blob getSoftwareImageVersion(Profile _prof, String _enterprise, String entityType, int entityID, String attributeCode, String _clientVersion) throws Exception, SQLException, MiddlewareException {

        // For building SQL statement
        StringBuffer strbSQL = null;
        // For executing SQL statement
        ResultSet rs = null;
        byte[] baBlob = null;
        COM.ibm.opicmpdh.objects.Blob blobNew = null;
        String strEnterprise = _enterprise;
        int iNLSID = _prof.getReadLanguage().getNLSID();
        String strValOn = _prof.getValOn();
        String strEffOn = _prof.getEffOn();

        debug(D.EBUG_DETAIL, "enterprise: " + strEnterprise);
        debug(D.EBUG_DETAIL, "entityType: " + entityType);
        debug(D.EBUG_DETAIL, "entityID: " + entityID);
        debug(D.EBUG_DETAIL, "attributeCode: " + attributeCode);
        debug(D.EBUG_DETAIL, "nlsID: " + iNLSID);
        debug(D.EBUG_DETAIL, "valOn: " + strValOn);
        debug(D.EBUG_DETAIL, "effOn: " + strEffOn);

        // If we are not already connected, now is the time!
        if (m_conPDHHandle == null) {
            connect();
        }

        isPending();

        strbSQL = new StringBuffer();

        strbSQL.append("SELECT LENGTH(AttributeValue), BlobExtension, NLSID, ValFrom, ValTo, EffFrom, EffTo, OPENID FROM opicm.Software_Update");
        strbSQL.append(" WHERE Enterprise = '" + strEnterprise + "'");
        strbSQL.append(" AND EntityType = '" + entityType + "'");
        strbSQL.append(" AND EntityID = " + entityID);
        strbSQL.append(" AND AttributeCode = '" + attributeCode + "'");
        strbSQL.append(" AND NLSID = " + iNLSID);
        strbSQL.append(" AND ValFrom <= '" + strValOn + "'");
        strbSQL.append(" AND '" + strValOn + "'");
        strbSQL.append(" < ValTo");
        strbSQL.append(" AND EffFrom <= '" + strEffOn + "'");
        strbSQL.append(" AND ");
        strbSQL.append(" '" + strEffOn + "'");
        strbSQL.append(" < EffTo");

        try {
            m_rstmtHandle = m_conPDHHandle.createStatement();

            test(m_rstmtHandle != null, "getUpdate:Statement handle is null");

            rs = m_rstmtHandle.executeQuery(strbSQL.toString());

            test(rs != null, "getUpdate:rs is null");
        } catch (RuntimeException rx) {
            debug("RuntimeException on ? " + rx);
            rx.printStackTrace();

            throw rx;
        } catch (Exception x) {
            debug("Exception on ? " + x);

            throw x;
        }

        if (rs == null) {
            freeStatement();
            isPending();
            test(rs != null, "rs is null");
        }

        if (rs.next()) {
            int iBlobSize = rs.getInt(1);

            baBlob = new byte[0];
            blobNew = new COM.ibm.opicmpdh.objects.Blob(strEnterprise, entityType, entityID, attributeCode, baBlob, Unicode.rtrim(rs.getString(2)), rs.getInt(3), Unicode.rtrim(rs.getString(4)), Unicode.rtrim(rs.getString(5)), Unicode.rtrim(rs.getString(6)), Unicode.rtrim(rs.getString(7)), rs.getInt(8));
            debug(D.EBUG_DETAIL, "APPLICATION_VERSION_OPWG    : " + _prof.getOPWGID());
            debug(D.EBUG_DETAIL, "APPLICATION_VERSION_USER    : " + _prof.getOPName());
            debug(D.EBUG_DETAIL, "APPLICATION_VERSION_CLIENT  : " + _clientVersion);
            debug(D.EBUG_DETAIL, "APPLICATION_VERSION_DATABASE: " + blobNew.getBlobExtension());
        } else {
            baBlob = new byte[0];
            blobNew = new COM.ibm.opicmpdh.objects.Blob();
        }

        // Close out the ResultSet
        rs.close();
        commit();

        rs = null;

        freeStatement();
        isPending();

        return blobNew;
    }

    public final void record_transaction(String _strTransaction) throws SQLException, MiddlewareException {
        record_transaction(m_strInstanceName, _strTransaction);
    }

    public final void record_transaction(String _strInstance, String _strTransaction) throws SQLException, MiddlewareException {
        ReturnStatus returnStatus = new ReturnStatus(-1);

        try {
            debug(D.EBUG_DETAIL, "record_transaction transaction");
            test(_strInstance != null, "instance is null");
            test(_strTransaction != null, "transaction is null");
            debug(D.EBUG_SPEW, "record_transaction:instance: " + _strInstance);
            debug(D.EBUG_SPEW, "record_transaction:transaction: " + _strTransaction);
            // If we are not already connected, now is the time!
            if (m_conPDHHandle == null) {
                connect();
            }
            isPending();
            callGBL9981(returnStatus, _strInstance, _strTransaction);
        } finally {
            commit();
            // Free any statement
            freeStatement();
            isPending();
            debug(D.EBUG_DETAIL, "record_transaction complete");
        }
    }

    public final void cleanUpPartNo(EntityItem _ei) {
        Vector vPartNo = new Vector();
        for (int j=0; j < _ei.getAttributeCount(); j++) {
            EANAttribute att = _ei.getAttribute(j);
            EANMetaAttribute meta = att.getMetaAttribute();
            if (att instanceof TextAttribute) {
                if (meta.isUnique()) {
                    if (meta.getUniqueClass().equals("LEVEL1")) {
                        vPartNo.addElement(att.toString() + meta.getKey());
                    } else if (meta.getUniqueClass().equals("LEVEL2") && meta.getUniqueType().equals(_ei.getEntityType())) {
                        vPartNo.addElement(att.toString() + meta.getKey() + _ei.getEntityType());
                    } else if (meta.getUniqueClass().equals("LEVEL3") ) {
                        StringTokenizer st = new StringTokenizer(meta.getUniqueType(),":");
                        boolean bMatch = false;
                        while(st.hasMoreTokens()) {
                            if(st.nextToken().equals(_ei.getEntityType())) {
                                bMatch = true;
                            }
                        }
                        if(bMatch) {
                            vPartNo.addElement(att.toString() + meta.getKey() + meta.getUniqueClass());
                        }
                    }
                } else if (meta.isComboUnique()) {
                    Vector v = meta.getComboUniqueAttributeCode();
                    String strComboUniqueGrouping = meta.getComboUniqueGrouping();
                    for (int k = 0; k < v.size(); k++) {
                        String strFlagAttributeCode = meta.getComboUniqueAttributeCode(k);
                        EANAttribute attcombo = _ei.getAttribute(strFlagAttributeCode);
                        if (attcombo instanceof EANFlagAttribute){
                        	EANFlagAttribute att2 = (EANFlagAttribute)attcombo;                        
                        	String strFlagAttributeValue = att2.getFlagCodes();
                        	// Here .. we have to parse out all the flag codes ...
                        	StringTokenizer st = new StringTokenizer(strFlagAttributeValue, ":");
                        	while (st.hasMoreTokens()) {
                        		String strFlagCode = st.nextToken();
                        		vPartNo.addElement(att.toString() + ":" + meta.getKey() + ":" + strFlagCode + ":" + strFlagAttributeCode + ":" + strComboUniqueGrouping);
                        	}
                        }else if (attcombo instanceof EANTextAttribute){
                            vPartNo.addElement(att.toString() + ":" + meta.getKey() + ":" + attcombo.toString() + ":" + strFlagAttributeCode + ":" + strComboUniqueGrouping);
                        }
                    }
                }
            } else if (att instanceof SingleFlagAttribute) {
                EANFlagAttribute flagAtt = (EANFlagAttribute)att;
                if (meta.isUnique()) {
                    if (meta.getUniqueClass().equals("EACHECK")) {
                        vPartNo.addElement(att.toString() + meta.getKey() + _ei.getEntityType());
                    } else if (meta.getUniqueClass().equals("LEVEL1")) {
                        vPartNo.addElement(att.toString() + meta.getKey());
                    } else if (meta.getUniqueClass().equals("LEVEL2") && meta.getUniqueType().equals(_ei.getEntityType())) {
                        vPartNo.addElement(att.toString() + meta.getKey() + _ei.getEntityType());
                    } else if (meta.getUniqueClass().equals("LEVEL3") ) {
                        StringTokenizer st = new StringTokenizer(meta.getUniqueType(),":");
                        boolean bMatch = false;
                        while(st.hasMoreTokens()) {
                            if(st.nextToken().equals(_ei.getEntityType())) {
                                bMatch = true;
                            }
                        }
                        if(bMatch) {
                            vPartNo.addElement(att.toString() + meta.getKey() + meta.getUniqueClass());
                        }
                    }
                } else if (meta.isComboUnique()) {
                    Vector v = meta.getComboUniqueAttributeCode();
                    String strComboUniqueGrouping = meta.getComboUniqueGrouping();
                    for (int k = 0; k < v.size(); k++) {
                        String strTextAttributeCode = meta.getComboUniqueAttributeCode(k);
                        EANAttribute att2 = _ei.getAttribute(strTextAttributeCode);
                        if (att2 instanceof EANTextAttribute) {
                        	String strTextAttributeValue = att2.toString();
                        	vPartNo.addElement(flagAtt.getFlagCodes() + ":" + meta.getKey() + ":" + strTextAttributeValue + ":" + strTextAttributeCode + ":" + strComboUniqueGrouping);
                        }else if (att2 instanceof EANFlagAttribute){                      
                        	String strFlagAttributeValue = ((EANFlagAttribute)att2).getFlagCodes();
                        	// Here .. we have to parse out all the flag codes ...
                        	StringTokenizer st = new StringTokenizer(strFlagAttributeValue, ":");
                        	while (st.hasMoreTokens()) {
                        		String strFlagCode = st.nextToken();
                        		vPartNo.addElement(att.toString() + ":" + meta.getKey() + ":" + strFlagCode + ":" + strTextAttributeCode + ":" + strComboUniqueGrouping);
                        	}
                        }
                    }
                }
            } else if (att instanceof MultiFlagAttribute) {
                EANFlagAttribute flagAtt = (EANFlagAttribute)att;
                if (meta.isComboUnique()) {
                    Vector v = meta.getComboUniqueAttributeCode();
                    String strComboUniqueGrouping = meta.getComboUniqueGrouping();
                    for (int k = 0; k < v.size(); k++) {
                        String strTextAttributeCode = meta.getComboUniqueAttributeCode(k);
                        EANAttribute att2 = _ei.getAttribute(strTextAttributeCode);
                        if (att2 instanceof EANTextAttribute) {
                            String strTextAttributeValue = att2.toString();
                            vPartNo.addElement(flagAtt.getFlagCodes() + ":" + meta.getKey() + ":" + strTextAttributeValue + ":" + strTextAttributeCode + ":" + strComboUniqueGrouping);
                        }else if (att2 instanceof EANFlagAttribute){                      
                        	String strFlagAttributeValue = ((EANFlagAttribute)att2).getFlagCodes();
                        	// Here .. we have to parse out all the flag codes ...
                        	StringTokenizer st = new StringTokenizer(strFlagAttributeValue, ":");
                        	while (st.hasMoreTokens()) {
                        		String strFlagCode = st.nextToken();
                        		vPartNo.addElement(att.toString() + ":" + meta.getKey() + ":" + strFlagCode + ":" + strTextAttributeCode + ":" + strComboUniqueGrouping);
                        	}
                        }
                    }
                }
            }
        }

        for (int i = 0; i < vPartNo.size(); i++) {
            String strPartNo = (String)vPartNo.elementAt(i);
            PartNo.remove(this, strPartNo);
        }
    }

    /**
     * getMetaFlagMaintList method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _bGetLock                Description of the Parameter
     * @return                          The lockList value
     * @exception  SQLException
     * @exception  MiddlewareException
     */
    public final MetaFlagMaintList getMetaFlagMaintList(MetaMaintActionItem _mmai, Profile _prof, String _strAttributeCode) throws SQLException, MiddlewareException {
        return new MetaFlagMaintList(_mmai, this, _prof, _strAttributeCode);
    }

    /*
     *  addFlagCodes method
     *
     *  Description of the Method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strAttributeCode           Description of the Parameter
     * @param  _amfmi       Description of the Parameter
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */

    public final OPICMList addFlagCodes(Profile _prof, String _strAttributeCode, MetaFlagMaintItem[] _amfmi) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        String strMethod = "addFlagCodes";
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();
        int iTranID = _prof.getTranID();
        OPICMList rList = new OPICMList();
        try {
            DatePackage dpNow = getDates();
            String strEffFrom = dpNow.getNow();
            String strEffTo = dpNow.getForever();

            debug(D.EBUG_DETAIL, strMethod + " transaction");
            test(strEnterprise != null, " enterprise is null");
            test(iOPWGID > 0, " OPWGID <= 0");

            for (int i=0; i < _amfmi.length; i++) {
                MetaFlagMaintItem mfmi = _amfmi[i];
                String strDescriptionClass = (String) mfmi.get(mfmi.DESCRIPTIONCLASS, true);
                String strShortDescription = (String) mfmi.get(mfmi.SHORTDESCRIPTION, true);
                String strLongDescription = (String) mfmi.get(mfmi.LONGDESCRIPTION, true);
                int iNLSID = mfmi.getNLSID();

                test(strDescriptionClass != null, " descriptionclass is null");

                //_db.debug(D.EBUG_SPEW, "gbl2909:parms:" + iOPWGID + ":" + strEnterprise + ":" + m_strAttributeCode + ":" + strDescriptionClass + ":" + strShortDescription + ":" + strLongDescription + ":" + iNLSID + ":" + iTranID + ":" + strEffFrom + ":" + EFFTO);
                callGBL2909(returnStatus, iOPWGID, strEnterprise, _strAttributeCode, strDescriptionClass, strShortDescription, strLongDescription, iNLSID, iTranID, strEffFrom, strEffTo);
                rList.put(mfmi.getKey(), mfmi.getKey());
                commit();
                freeStatement();
                isPending();
            }

        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            commit();
            freeStatement();
            isPending();
            // DO NOT FREE THE CONNECTION
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
        return rList;
    }

    /*
     *  expireFlagCodes method
     *
     *  Description of the Method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strAttributeCode           Description of the Parameter
     * @param  _amfmi       Description of the Parameter
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */

    public final OPICMList expireFlagCodes(Profile _prof, String _strAttributeCode, MetaFlagMaintItem[] _amfmi) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        String strMethod = "expireFlagCodes";
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();
        int iTranID = _prof.getTranID();
        OPICMList rList = new OPICMList();
        try {
            DatePackage dpNow = getDates();
            String strEffFrom = dpNow.getNow();
            String strEffTo = dpNow.getForever();

            debug(D.EBUG_DETAIL, strMethod + " transaction");
            test(strEnterprise != null, " enterprise is null");
            test(iOPWGID > 0, " OPWGID <= 0");

            for (int i=0; i < _amfmi.length; i++) {
                MetaFlagMaintItem mfmi = _amfmi[i];
                String strDescriptionClass = (String) mfmi.get(mfmi.DESCRIPTIONCLASS, true);

                test(strDescriptionClass != null, " descriptionclass is null");

                callGBL7504(returnStatus, iOPWGID, strEnterprise, "Attribute/Flag", _strAttributeCode, strDescriptionClass, "Expired", "Y", iTranID, strEffFrom, strEffTo);
                rList.put(mfmi.getKey(), mfmi.getKey());
                commit();
                freeStatement();
                isPending();
            }

        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            commit();
            freeStatement();
            isPending();
            // DO NOT FREE THE CONNECTION
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
        return rList;
    }

    /*
     *  unexpireFlagCodes method
     *
     *  Description of the Method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strAttributeCode           Description of the Parameter
     * @param  _amfmi       Description of the Parameter
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */

    public final OPICMList unexpireFlagCodes(Profile _prof, String _strAttributeCode, MetaFlagMaintItem[] _amfmi) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        String strMethod ="unexpireFlagCodes";
        String strEnterprise = _prof.getEnterprise();
        int iOPWGID = _prof.getOPWGID();
        int iTranID = _prof.getTranID();
        OPICMList rList = new OPICMList();
        try {
            DatePackage dpNow = getDates();
            String strEffFrom = dpNow.getNow();

            debug(D.EBUG_DETAIL, strMethod + " transaction");
            test(strEnterprise != null, " enterprise is null");
            test(iOPWGID > 0, " OPWGID <= 0");

            for (int i=0; i < _amfmi.length; i++) {
                MetaFlagMaintItem mfmi = _amfmi[i];
                String strDescriptionClass = (String) mfmi.get(mfmi.DESCRIPTIONCLASS, true);

                test(strDescriptionClass != null, " descriptionclass is null");

                callGBL7504(returnStatus, iOPWGID, strEnterprise, "Attribute/Flag", _strAttributeCode, strDescriptionClass, "Expired", "Y", iTranID, strEffFrom, strEffFrom);
                rList.put(mfmi.getKey(), mfmi.getKey());
                commit();
                freeStatement();
                isPending();
            }

        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            commit();
            freeStatement();
            isPending();
            // DO NOT FREE THE CONNECTION
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
        return rList;
    }


    /*
     *  addFlagCodes method
     *
     *  Description of the Method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strAttributeCode           Description of the Parameter
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */

    public final void clearCacheForAttribute(Profile _prof, String _strAttributeCode) throws SQLException, MiddlewareException {

        ReturnStatus returnStatus = new ReturnStatus(-1);
        ResultSet rs;
        ReturnDataResultSet rdrs;

        String strMethod = "clearCacheForAttribute";

        try {
            DatePackage dpNow = getDates();
            String strValOn = dpNow.getNow();
            String strEffOn = dpNow.getNow();
            int iOPWGID = _prof.getOPWGID();
            String strEnterprise = _prof.getEnterprise();

            debug(D.EBUG_DETAIL, strMethod + " transaction");
            test(strEnterprise != null, " enterprise is null");
            test(iOPWGID > 0, " OPWGID <= 0");

            rs = callGBL7668(returnStatus, strEnterprise, _strAttributeCode, strValOn, strEffOn);
            rdrs = new ReturnDataResultSet(rs);
            rs.close();
            rs = null;
            commit();
            freeStatement();
            isPending();

            MetaCacheManager mcm = new MetaCacheManager(_prof);
     	 	//RCQ00210066-WI only clear entity with this attrcode mcm.expireEGCacheAllRolesAllNls(this, " ");
            
            for (int i = 0; i < rdrs.size(); i++) {
            	String strEntityType = rdrs.getColumn(i, 0);
            	mcm.expireEGCacheAllRolesAllNls(this, strEntityType);
            }
        } catch (RuntimeException rx) {
            debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);

            StringWriter writer = new StringWriter();

            rx.printStackTrace(new PrintWriter(writer));

            String x = writer.toString();

            debug(D.EBUG_ERR, "" + x);

            throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
        } finally {
            // Free any statement
            commit();
            freeStatement();
            isPending();
            // DO NOT FREE THE CONNECTION
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
    }

    /*
     *  addFlagCodes method
     *
     *  Description of the Method
     *
     * @param  _prof                    Description of the Parameter
     * @param  _strAttributeCode           Description of the Parameter
     * @exception  SQLException         Description of the Exception
     * @exception  MiddlewareException  Description of the Exception
     */

    public final EANMetaAttribute buildMetaAttribute(MetaFlagMaintList _mfml, EANMetaAttribute _meta) throws SQLException, MiddlewareException {

        String strMethod = "buildMetaAttribute";
        debug(D.EBUG_DETAIL, strMethod + " transaction");
        return _mfml.buildMetaAttribute(this, _meta);
    }

    public final void sendEmail(String _strToAddress, String _strSubject, String _strBody) throws SQLException, MiddlewareException,MiddlewareShutdownInProgressException {

        String strMethod = "sendEmail";
        debug(D.EBUG_DETAIL, strMethod + " transaction");

        try {
            MiddlewareMail mm = getMiddlewareMail();
            mm.addRecipients(javax.mail.Message.RecipientType.TO,_strToAddress);
            //mm.setFrom(new InternetAddress(_strToAddress));
            mm.setSubject(_strSubject);
            mm.setContentText(_strBody);
            mm.send();
            mm = null;
        } catch (Exception x) {
            debug(D.EBUG_ERR, "Exception trapped at: " + strMethod + " " + x);

            StringWriter writer = new StringWriter();

            x.printStackTrace(new PrintWriter(writer));

            String xs = writer.toString();

            debug(D.EBUG_ERR, "" + xs);

            throw new MiddlewareException("Exception trapped at: " + strMethod + x);
        } finally {
            // Free any statement
            commit();
            freeStatement();
            isPending();
            // DO NOT FREE THE CONNECTION
            debug(D.EBUG_DETAIL, strMethod + " complete");
        }
    }

    /**
     * get target Version
     * @parameter profile
     * @parameter array
     * @parameter END OF TIME
     * @return array
     * @author Tony
     */
    public String[] getTargetVersions(Profile _prof, String[] _in, String _eod) throws MiddlewareException, MiddlewareShutdownInProgressException {
        String[] out = new String[5];
        out[0] = MiddlewareServerProperties.getTargetClientVersion();
        out[1] = MiddlewareServerProperties.getTargetServerVersion();
        out[2] = MiddlewareServerProperties.getTargetCompiledVersion();
        out[3] = MiddlewareServerProperties.getTargetApplicationVersion();
        out[4] = MiddlewareServerProperties.getTargetApplicationCompiledVersion();
        String strContact = MiddlewareServerProperties.getAdminContact();

        boolean bError = false;
        for (int i=0;i<5 && !bError; ++ i) {
            if (!out[i].equals(_eod)) {
                if (!out[i].equals(_in[i])) {
                    bError = true;
                }
            }
        }

        if (bError) {
            debug(D.EBUG_DETAIL, "APPLICATION_VERSION_TARGET_MISMATCH_DETECTED ");
        }
        debug(D.EBUG_DETAIL, "APPLICATION_VERSION_TARGET_CLIENT " + _prof.getOPName());
        debug(D.EBUG_DETAIL, "APPLICATION_VERSION_TARGET_CLIENT " + _in[0] + ", " +  out[0]);
        debug(D.EBUG_DETAIL, "APPLICATION_VERSION_TARGET_REMOTE " + _in[1] + ", " +  out[1]);
        debug(D.EBUG_DETAIL, "APPLICATION_VERSION_TARGET_COMPILED " + _in[2] + ", " +  out[2]);
        debug(D.EBUG_DETAIL, "APPLICATION_VERSION_TARGET_APPLICATION_VERSION " + _in[3] + ", " +  out[3]);
        debug(D.EBUG_DETAIL, "APPLICATION_VERSION_TARGET_APPLICATION_COMPILED " + _in[4] + ", " +  out[4]);
        return out;
    }
    /**
     *  Description of the Method
     *
     * @param  _prof
     * @param  _eai
     * @exception  SQLException
     * @exception  MiddlewareException
     * @exception  LockException
     * @exception  MiddlewareShutdownInProgressException
     * @exception  EANBusinessRuleException
     * @return Object
     * @author tony
     */
    public final Object execAdditional(Profile _prof, EANActionItem _eai, EntityItem[] _ei,Object[] _parms) throws SQLException, MiddlewareException, MiddlewareShutdownInProgressException {
        return _eai.processAdditional(this, _prof, _ei, _parms);
    }

    public final String getInstanceName() throws MiddlewareException, MiddlewareShutdownInProgressException {
        return m_strInstanceName;
    }
    /**
    * get the cached xml from the ods - RCQ285768
    * 
    * @param entityType
    * @param entityId
    * @return
    * @throws MiddlewareException
    * @throws SQLException
    */
   public final String getCachedXML(String entityType, int entityId) throws MiddlewareException, SQLException {
       // The stored procedure ReturnStatus
       ReturnStatus returnStatus = new ReturnStatus(-1);
       ResultSet rs = null;

       String strReturn = "No XML found for entityType: "+entityType+" entityId: "+entityId;
       String strMethod = "getCachedXML";
       String strTraceBase = setTraceBase(strMethod);

       try {
           debug(D.EBUG_DETAIL, strTraceBase + " transaction");

           test(entityType != null, strTraceBase + " EntityType is null");

           if (!c_bHasODS) {
               throw new MiddlewareException("ODS database is not available for "+strMethod);
           }

           // If we are not already connected, now is the time!
           if (m_conODSHandle == null) {
               connect();
           }
        
           Connection conn = m_conODSHandle;
           // After making a connection, we should have a connection handle
           test(conn != null, strTraceBase+":Connection handle is null");
        
		   StringBuffer strbSQL = new StringBuffer();
		   strbSQL.append(" SELECT XMLMESSAGE FROM cache.xmlidlcache");
		   strbSQL.append(" WHERE xmlentitytype = '" + entityType + "'");
		   strbSQL.append(" AND xmlentityID = " + entityId );
		   strbSQL.append(" AND xmlcachevalidto > current timestamp with ur");
		
		   debug(D.EBUG_SPEW, strMethod + " query is:" + strbSQL.toString());
		
	   	   m_rstmtHandle = conn.createStatement();
		   rs = m_rstmtHandle.executeQuery(strbSQL.toString());

		   if(rs.next()) {
			   strReturn = rs.getString(1);				                   				
		   }
		
           rs.close();
           rs = null;
        
           commit();
       } catch (RuntimeException rx) {
           debug(D.EBUG_ERR, "RuntimeException trapped at: " + strMethod + " " + rx);
           StringWriter writer = new StringWriter();
           rx.printStackTrace(new PrintWriter(writer));
           String x = writer.toString();
           debug(D.EBUG_ERR, x);
           throw new MiddlewareException("RuntimeException trapped at: " + strMethod + rx);
       } finally {
           // Free any statement
           freeStatement();
           isPending();
           debug(D.EBUG_DETAIL, strMethod + " complete");
       }

       return strReturn;
    }
    
    public boolean hasChanges(Profile _prof, EntityItem[] _aei, String fromTime, String _actionKey)
    {
      boolean hasChgs = true;
      try{
          if(_aei!=null && _aei.length>0){
              HashSet set = new HashSet();
              for (int i=0; i<_aei.length; i++){
                  set.add(_aei[i].getKey());
              }
              String now = getNow(0);
              COM.ibm.eannounce.hula.eDoc ed =
                  new COM.ibm.eannounce.hula.eDoc(this,_prof, _actionKey,_aei[0].getEntityType(),fromTime, now);

              ReturnDataResultSet rdrs =ed.getTransactions();
              hasChgs = false;
              for (int r = 0; r < rdrs.getRowCount(); r++)
              {
                  ReturnDataRow row = rdrs.getRow(r);
                  String rootKey = rdrs.getColumn(r,1)+rdrs.getColumn(r,2);
                  if (set.contains(rootKey)){
                      hasChgs = true;
                      break;
                  }
              }
              set.clear();
              ed.dereference();
          }
      }catch(Exception exc){
          hasChgs = true;
          exc.printStackTrace();
      }
      return hasChgs;
  }

@jdbcmethods
}
