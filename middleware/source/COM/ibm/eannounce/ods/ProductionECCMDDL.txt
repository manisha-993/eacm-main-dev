-- This CLP file was created using DB2LOOK Version 7.2
-- Timestamp: Fri Jul 25 11:50:51 EDT 2003
-- Database Name: ECCM
-- Database Manager Version: DB2/6000 Version 7.2.7
-- Database Codepage: 1208


CONNECT TO ECCM;

------------------------------------
-- DDL Statements for BUFFERPOOLS --
------------------------------------

CREATE BUFFERPOOL ECCMXSBP  SIZE 60000 PAGESIZE 4096 NOT EXTENDED STORAGE;

CREATE BUFFERPOOL ECCMLSBP  SIZE 4096 PAGESIZE 4096 NOT EXTENDED STORAGE;

CREATE BUFFERPOOL SCATALOGBP  SIZE 4096 PAGESIZE 4096 NOT EXTENDED STORAGE;

CREATE BUFFERPOOL ECCMAV32BP  SIZE 10000 PAGESIZE 32768 NOT EXTENDED STORAGE;

CONNECT RESET;
CONNECT TO ECCM;

------------------------------------
-- DDL Statements for TABLESPACES --
------------------------------------

CREATE TEMPORARY TABLESPACE ECCMTMP32TS IN NODEGROUP IBMTEMPGROUP PAGESIZE 32768 MANAGED BY SYSTEM
   USING ('/db/eccm_temp32k1/temp32k1.dbf',
    '/db/eccm_temp32k2/temp32k2.dbf',
    '/db/eccm_temp32k3/temp32k3.dbf',
    '/db/eccm_temp32k4/temp32k4.dbf')
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMAV32BP
   OVERHEAD 12.500000
   TRANSFERRATE 1.400000;

CREATE LONG TABLESPACE ECCM001LS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccm001ls1/file1'40960,
    FILE '/db/rlveccm001ls2/file2'40960)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMLSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCM001TS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccm001ts1/file1'220000,
    FILE '/db/rlveccm001ts2/file2'220000)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCM001XS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccm001xs1/file1'80000,
    FILE '/db/rlveccm001xs2/file2'80000)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCM002TS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccm002ts1/file1'16384,
    FILE '/db/rlveccm002ts2/file2'16384)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCM002XS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccm002xs1/file1'24576,
    FILE '/db/rlveccm002xs2/file2'24576)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMXSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMAV32TS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 32768 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmav32ts1/file1'21000,
    FILE '/db/rlveccmav32ts2/file2'21000)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMAV32BP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMAV32XS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 32768 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmav32xs1/file1'29696,
    FILE '/db/rlveccmav32xs2/file2'29696)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMAV32BP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMAVTS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmavts1/file1'16384,
    FILE '/db/rlveccmavts2/file2'16384)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMAVXS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmavxs1/file1'8192,
    FILE '/db/rlveccmavxs2/file2'8192)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMXSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMINTTS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmintts1/file1'49152,
    FILE '/db/rlveccmintts2/file2'49152)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMINTXS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmintxs1/file1'16384,
    FILE '/db/rlveccmintxs2/file2'16384)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMXSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMMULTTS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmmultts1/file1'179200,
    FILE '/db/rlveccmmultts2/file2'179200,
    FILE '/db/rlveccmmultts3/file3'179200,
    FILE '/db/rlveccmmultts4/file4'179200,
    FILE '/db/rlveccmmultts5/file5'179200)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMMULTXS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmmultxs1/file1'179200,
    FILE '/db/rlveccmmultxs2/file2'179200,
    FILE '/db/rlveccmmultxs3/file3'179200,
    FILE '/db/rlveccmmultxs4/file4'179200,
    FILE '/db/rlveccmmultxs5/file5'179200)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMXSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMPATTRTS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmpattrts1/file1a'171520,
    FILE '/db/rlveccmpattrts1/file1b'171520,
    FILE '/db/rlveccmpattrts2/file2a'171520,
    FILE '/db/rlveccmpattrts2/file2b'171520,
    FILE '/db/rlveccmpattrts3/file3a'171520,
    FILE '/db/rlveccmpattrts3/file3b'171520,
    FILE '/db/rlveccmpattrts4/file4a'171520,
    FILE '/db/rlveccmpattrts4/file4b'171520,
    FILE '/db/rlveccmpattrts5/file5a'171520,
    FILE '/db/rlveccmpattrts5/file5b'171520)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMPATTRXS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmpattrxs1/file1a'218454,
          FILE '/db/rlveccmpattrxs1/file1b'218454,
          FILE '/db/rlveccmpattrxs1/file1c'218454,
    FILE '/db/rlveccmpattrxs2/file2a'218454,
    FILE '/db/rlveccmpattrxs2/file2b'218454,
    FILE '/db/rlveccmpattrxs2/file2c'218454,
    FILE '/db/rlveccmpattrxs3/file3a'218454,
    FILE '/db/rlveccmpattrxs3/file3b'218454,
    FILE '/db/rlveccmpattrxs3/file3c'218454,
    FILE '/db/rlveccmpattrxs4/file4a'218454,
    FILE '/db/rlveccmpattrxs4/file4b'218454,
    FILE '/db/rlveccmpattrxs4/file4c'218454,
    FILE '/db/rlveccmpattrxs5/file5a'218454,
    FILE '/db/rlveccmpattrxs5/file5b'218454,
    FILE '/db/rlveccmpattrxs5/file5c'218454)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMXSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMPRICETS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmpricets1/file1'112640,
    FILE '/db/rlveccmpricets2/file2'112640,
    FILE '/db/rlveccmpricets3/file3'112640,
    FILE '/db/rlveccmpricets4/file4'112640,
    FILE '/db/rlveccmpricets5/file5'112640)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMPRICEXS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmpricexs1/file1'148480,
    FILE '/db/rlveccmpricexs2/file2'148480,
    FILE '/db/rlveccmpricexs3/file3'148480,
    FILE '/db/rlveccmpricexs4/file4'148480,
    FILE '/db/rlveccmpricexs5/file5'148480)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMXSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMPSGTS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmpsgts1/file1'153600,
    FILE '/db/rlveccmpsgts2/file2'153600)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMPSGXS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmpsgxs1/file1'51200,
    FILE '/db/rlveccmpsgxs2/file2'51200)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMXSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE REGULAR TABLESPACE ECCMSUMMTS IN NODEGROUP IBMDEFAULTGROUP PAGESIZE 4096 MANAGED BY DATABASE
   USING (FILE '/db/rlveccmsummts1/file1'64000,
    FILE '/db/rlveccmsummts2/file2'64000)
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL IBMDEFAULTBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;

CREATE TEMPORARY TABLESPACE ECCMTMP4KTS IN NODEGROUP IBMTEMPGROUP PAGESIZE 4096 MANAGED BY SYSTEM
   USING ('/db/eccm_temp4k1/temp4k1.dbf')
   EXTENTSIZE 32
   PREFETCHSIZE 32
   BUFFERPOOL ECCMLSBP
   OVERHEAD 12.500000
   TRANSFERRATE 0.100000;


-- Mimic tablespace

ALTER TABLESPACE SYSCATSPACE
      PREFETCHSIZE 32
      OVERHEAD 12.500000
      TRANSFERRATE 0.100000;


ALTER TABLESPACE USERSPACE1
      PREFETCHSIZE 32
      OVERHEAD 12.500000
      TRANSFERRATE 0.100000;


-- DDL Statements for aliases

CREATE ALIAS INT.ATTRGROUP FOR ECCM.ATTRGROUP;

CREATE ALIAS INT.ATTRIBUTE FOR ECCM.ATTRIBUTE;

CREATE ALIAS INT.PRODUCT_PRICE FOR ECCM.PRODUCT_PRICE;

CREATE ALIAS INT.WWCAT FOR ECCM.WWCAT;

CREATE ALIAS INT.WWCATCATREL FOR ECCM.WWCATCATREL;

CREATE ALIAS INT.WWCATPRDREL FOR ECCM.WWCATPRDREL;

CREATE ALIAS INT.WWPRDPRDREL FOR ECCM.WWPRDPRDREL;


------------------------------------------------
-- DDL Statements for table ECCM.PSGCTNLS
-- Reference table manually set up
--
-- CONVERTED dwb
-- Why double up on the key?
------------------------------------------------
DROP TABLE ECCM.PSGCTNLS;
CREATE TABLE ECCM.PSGCTNLS
(NLSID INTEGER NOT NULL
,COUNTRYCODE VARCHAR(6)NOT NULL
)
--  IN ECCMPSGTS INDEX IN ECCMPSGXS
;
ALTER TABLE ECCM.PSGCTNLS PCTFREE 10;
ALTER TABLE ECCM.PSGCTNLS ADD CONSTRAINT SQL020920182254000 PRIMARY KEY (NLSID, COUNTRYCODE);


------------------------------------------------
-- DDL Statements for table ECCM.PSGNLS
-- Reference table data
-- Converted DWB
-- Why double up on the key?
------------------------------------------------
DROP TABLE ECCM.PSGNLS;
CREATE TABLE ECCM.PSGNLS
(NLSID INTEGER NOT NULL
,LANGDESC VARCHAR(32)
,ISOLANGCODE2 CHAR(2)
,ISOLANGCODE3 CHAR(3)
,IBMLANGCODE VARCHAR(6)
)
-- IN ECCMPSGTS INDEX IN ECCMPSGXS
;
ALTER TABLE ECCM.PSGNLS PCTFREE 10;

-- DDL Statements for indexes on Table ECCM.PSGNLS

CREATE INDEX ECCM.TCPSGNLS ON ECCM.PSGNLS (NLSID ASC,ISOLANGCODE2 DESC);
ALTER TABLE ECCM.PSGNLS ADD CONSTRAINT SQL020920182254080 PRIMARY KEY(NLSID);

------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.AVCATCATSEQ
------------------------------------------------
DROP TABLE INT.AVCATCATSEQ  ;
CREATE TABLE INT.AVCATCATSEQ  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      PARENTIDENTIFIER VARCHAR(254) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      PUB_FLAG INTEGER ,
      SEQUENCE INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
--     IN ECCMAVTS INDEX IN ECCMAVXS
;
ALTER TABLE INT.AVCATCATSEQ
  ADD CONSTRAINT SQL020920182254160 PRIMARY KEY
    (CATIDENTIFIER,
     PARENTIDENTIFIER,
     COUNTRYCODE,
     AUDIENCE);

------------------------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.PROD_CHAR_VALUE
------------------------------------------------
 DROP TABLE ECCM.PROD_CHAR_VALUE;
 CREATE TABLE ECCM.PROD_CHAR_VALUE  (
      PARTNUMBER CHAR(18) NOT NULL ,
      CHARACTERISTICNAME CHAR(30) NOT NULL ,
      CHARACTERISTICVALUE CHAR(30) NOT NULL ,
      LOWERLIMIT DOUBLE ,
      UPPERLIMIT DOUBLE ,
      SOURCESYSTEM VARCHAR(10) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
 -- IN ECCM001TS INDEX IN ECCM001XS
 ;
ALTER TABLE ECCM.PROD_CHAR_VALUE PCTFREE 10;
ALTER TABLE ECCM.PROD_CHAR_VALUE ADD PRIMARY KEY (PARTNUMBER, CHARACTERISTICNAME,CHARACTERISTICVALUE);

------------------------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.DACAVAIL
------------------------------------------------
DROP TABLE INT.DACAVAIL  ;
CREATE TABLE INT.DACAVAIL  (
    PARTNUMBER VARCHAR(36) NOT NULL ,
    COUNTRYCODE VARCHAR(6) NOT NULL ,
    AVAILABLE_QUANTITY INTEGER ,
    SOURCE_SYSTEM VARCHAR(10) ,
    LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
--  IN ECCMINTTS INDEX IN ECCMINTXS
;

ALTER TABLE INT.DACAVAIL PCTFREE 10;
CREATE INDEX INT.WZ1DACAVAIL1 ON INT.DACAVAIL
    (PARTNUMBER ASC,
     COUNTRYCODE ASC,
     LASTUPDATED ASC,
     SOURCE_SYSTEM ASC,
     AVAILABLE_QUANTITY ASC);
ALTER TABLE INT.DACAVAIL
  ADD CONSTRAINT SQL020920182254440 PRIMARY KEY (PARTNUMBER, COUNTRYCODE);

------------------------------------------------
-- DDL Statements for table INT.FILE_COMMENT
------------------------------------------------

 DROP TABLE INT.FILE_COMMENT  ;
 CREATE TABLE INT.FILE_COMMENT  (
      FILE_COMMENT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY ( START WITH +1 , INCREMENT BY +1 , CACHE 20 ) ,
      WORKFLOW_ID INTEGER ,
      TASK_ID INTEGER ,
      FILENAME VARCHAR(127) ,
      DATE TIMESTAMP ,
      USER VARCHAR(45) NOT NULL ,
      BODY VARCHAR(2000) )
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.FILE_COMMENT PCTFREE 10;


-- DDL Statements for primary key on Table INT.FILE_COMMENT

ALTER TABLE INT.FILE_COMMENT
  ADD PRIMARY KEY
    (FILE_COMMENT_ID);


------------------------------------------------
-- DDL Statements for table INT.TASK_COMMENT
------------------------------------------------

 DROP TABLE INT.TASK_COMMENT  ;
 CREATE TABLE INT.TASK_COMMENT  (
      TASK_COMMENT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY ( START WITH +1 , INCREMENT BY +1 , CACHE 20 ) ,
      TASK_ID INTEGER ,
      DATE DATE NOT NULL ,
      USER VARCHAR(45) NOT NULL ,
      BODY VARCHAR(2000) )
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.TASK_COMMENT PCTFREE 10;


-- DDL Statements for primary key on Table INT.TASK_COMMENT

ALTER TABLE INT.TASK_COMMENT
  ADD PRIMARY KEY
    (TASK_COMMENT_ID);

------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.ATTRGROUPLABEL
------------------------------------------------

 DROP TABLE INT.ATTRGROUPLABEL  ;
 CREATE TABLE INT.ATTRGROUPLABEL  (
      ID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY ( START WITH +1 , INCREMENT BY +1 , CACHE 20 ) ,
      NSLID INTEGER ,
      ATTRGROUPID INTEGER ,
      ATTRIBUTELABEL VARCHAR(254) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
--     IN ECCMINTTS INDEX IN ECCMINTXS
;
 ALTER TABLE INT.ATTRGROUPLABEL PCTFREE 10;

CREATE INDEX INT.XIE1ATTRGROUPLABEL ON INT.ATTRGROUPLABEL (ATTRGROUPID ASC) PCTFREE 10 CLUSTER ;

------------------------------------------------
-- Converted DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.AVPRDPRDSEQ
------------------------------------------------

 DROP TABLE INT.AVPRDPRDSEQ  ;
 CREATE TABLE INT.AVPRDPRDSEQ  (
      PARENTPARTNUMBER VARCHAR(36) NOT NULL ,
      CHILDPARTNUMBER VARCHAR(36) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      PUB_FLAG INTEGER ,
      SEQUENCE INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAVTS INDEX IN ECCMAVXS
;
 ALTER TABLE INT.AVPRDPRDSEQ PCTFREE 10;

-- DDL Statements for indexes on Table INT.AVPRDPRDSEQ
ALTER TABLE INT.AVPRDPRDSEQ ADD CONSTRAINT SQL020920182254390 PRIMARY KEY (PARENTPARTNUMBER, CHILDPARTNUMBER, COUNTRYCODE, AUDIENCE);


------------------------------------------------
-- DDL Statements for table INT.AVPRODUCT_PRICE
------------------------------------------------

 DROP TABLE INT.AVPRODUCT_PRICE  ;
 CREATE TABLE INT.AVPRODUCT_PRICE  (
      PARTNUMBER VARCHAR(18) NOT NULL ,
      CTOVARIANTPARTNUMBER VARCHAR(18) NOT NULL ,
      COUNTRYCODE VARCHAR(3) NOT NULL ,
      DISTRIBUTIONCHANNEL VARCHAR(2) NOT NULL ,
      PRICEVALIDTODATE DATE NOT NULL ,
      PRICETYPE VARCHAR(4) NOT NULL ,
      MATERIALSTATUS VARCHAR(2) ,
      MATERIALSTATUSDATE DATE ,
      PRICEAMOUNT DECIMAL(16,3) ,
      CURRENCYCODE VARCHAR(5) ,
      PRICEVALIDFROMDATE DATE NOT NULL ,
      CALLFORQUOTE VARCHAR(1) ,
      PRECEDENCE SMALLINT ,
      SOURCESYSTEM VARCHAR(10) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMPRICETS INDEX IN ECCMPRICEXS ;
 ALTER TABLE INT.AVPRODUCT_PRICE PCTFREE 10;

-- DDL Statements for indexes on Table INT.AVPRODUCT_PRICE

CREATE INDEX INT.XIE1AVPRODUCT_P ON INT.AVPRODUCT_PRICE
    (CTOVARIANTPARTNUMBER ASC,
     COUNTRYCODE ASC,
     PRICEAMOUNT ASC,
     CURRENCYCODE ASC,
     PRICEVALIDFROMDATE ASC,
     PRICEVALIDTODATE ASC,
     DISTRIBUTIONCHANNEL ASC,
     CALLFORQUOTE ASC,
     PRECEDENCE ASC,
     PARTNUMBER ASC);


-- DDL Statements for primary key on Table INT.AVPRODUCT_PRICE

ALTER TABLE INT.AVPRODUCT_PRICE
  ADD PRIMARY KEY
    (PARTNUMBER,
     CTOVARIANTPARTNUMBER,
     COUNTRYCODE,
     DISTRIBUTIONCHANNEL,
     PRICEVALIDFROMDATE,
     PRICEVALIDTODATE,
     PRICETYPE);


------------------------------------------------
-- DDL Statements for table INT.AVPRDEVPROOT  Converted DWB
------------------------------------------------
DROP TABLE INT.AVPRDEVPROOT  ;
CREATE TABLE INT.AVPRDEVPROOT
(CATIDENTIFIER VARCHAR(254) NOT NULL
,COUNTRYCODE VARCHAR(6) NOT NULL
,LANGUAGE VARCHAR(6) NOT NULL
,AUDIENCE VARCHAR(254) NOT NULL
,LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP);

ALTER TABLE INT.AVPRDEVPROOT PCTFREE 10;
ALTER TABLE INT.AVPRDEVPROOT ADD PRIMARY KEY (CATIDENTIFIER, COUNTRYCODE, LANGUAGE, AUDIENCE);


------------------------------------------------
-- DDL Statements for table INT.AVFAMAT
------------------------------------------------

 DROP TABLE INT.AVFAMAT  ;
 CREATE TABLE INT.AVFAMAT  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      LANGUAGE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      ATTRIBTOKEN VARCHAR(254) NOT NULL ,
      COLSEQUENCE INTEGER NOT NULL ,
      ROWSEQUENCE INTEGER NOT NULL ,
      DESCRIPTION VARCHAR(512) ,
      VIEWBY INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVFAMAT PCTFREE 10;

-- DDL Statements for indexes on Table INT.AVFAMAT

CREATE INDEX INT.XIE1AVFAMAT ON INT.AVFAMAT
    (COUNTRYCODE ASC,
     LANGUAGE ASC,
     AUDIENCE ASC)
    PCTFREE 19 CLUSTER ;


-- DDL Statements for primary key on Table INT.AVFAMAT

ALTER TABLE INT.AVFAMAT
  ADD PRIMARY KEY
    (CATIDENTIFIER,
     COUNTRYCODE,
     LANGUAGE,
     AUDIENCE,
     ATTRIBTOKEN,
     COLSEQUENCE,
     ROWSEQUENCE);


-- Converted DWB
-- Compiled DWB
------------------------------------------------
-- DDL Statements for table INT.AVPRDCATSEQ
------------------------------------------------

 DROP TABLE INT.AVPRDCATSEQ  ;
 CREATE TABLE INT.AVPRDCATSEQ  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      PARTNUMBER VARCHAR(36) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      LANGUAGE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      PUB_FLAG INTEGER ,
      SEQUENCE INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVPRDCATSEQ PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVPRDCATSEQ

ALTER TABLE INT.AVPRDCATSEQ
  ADD PRIMARY KEY
    (CATIDENTIFIER,
     PARTNUMBER,
     COUNTRYCODE,
     LANGUAGE,
     AUDIENCE);


------------------------------------------------
-- DDL Statements for table INT.AVPSGIMG
------------------------------------------------

 DROP TABLE INT.AVPSGIMG  ;
 CREATE TABLE INT.AVPSGIMG  (
      IMAGEID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY ( START WITH +1 , INCREMENT BY +1 , CACHE 20 ) ,
      NLSID INTEGER ,
      DESCRIPTION VARCHAR(254) ,
      DISPLAYNAME VARCHAR(192) ,
      ENTITYTYPE VARCHAR(36) ,
      STATUS VARCHAR(30) ,
      IMAGEPATH VARCHAR(150) ,
      DATEFROM VARCHAR(10) ,
      DATETO VARCHAR(10) ,
      SIMAGE_ENTITY_ID INTEGER ,
      SOURCESYSTEM VARCHAR(10) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP,
      COLORIMAGENAME VARCHAR(150) )
;
--     IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVPSGIMG PCTFREE 10;

-- DDL Statements for indexes on Table INT.AVPSGIMG

CREATE INDEX INT.XIE1AVPSGIMG ON INT.AVPSGIMG
    (NLSID ASC,
     IMAGEID ASC,
     ENTITYTYPE ASC)
    PCTFREE 10 CLUSTER ;


-- DDL Statements for primary key on Table INT.AVPSGIMG

ALTER TABLE INT.AVPSGIMG
  ADD PRIMARY KEY
    (IMAGEID);


-- Converted DWB
-- Need 16k tablespace for this to work
--  VARCHAR 8192 is now 192
------------------------------------------------
-- DDL Statements for table INT.AVWWPRD
------------------------------------------------
 DROP TABLE INT.AVWWPRD  ;
 CREATE TABLE INT.AVWWPRD  (
      PRDSKU VARCHAR(254) NOT NULL ,
      PRDENTITYTYPE VARCHAR(36) ,
      PRDENTITYID INTEGER ,
      PRDNLSID INTEGER,
      PARTNUMBER VARCHAR(36) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      PRODUCTCLASS VARCHAR(16) ,
      AUDIENCE VARCHAR(254) ,
      AUXDESC1 VARCHAR(1192) ,
 -- AUXDESC1 VARCHAR(8192) ,
      AUXDESC2 VARCHAR(254) ,
      SHORTDESC VARCHAR(254) ,
      ANNOUNCEDATE VARCHAR(30) ,
      WITHDRAWDATE VARCHAR(30) ,
      FOTANNOUNCEDATE VARCHAR(30) ,
      FOTWITHDRAWDATE VARCHAR(30) ,
      NAVBARFILENAME VARCHAR(254) ,
      CONFIGURATORID VARCHAR(254) ,
      FOTSTATUS VARCHAR(75) ,
      WWPARTNUM VARCHAR(36) ,
      INSTALLABLE INTEGER ,
      BASESYSTEM INTEGER ,
      SERVICETYPE VARCHAR(6) ,
      SPECIALBID VARCHAR(6) ,
      SBBTYPE VARCHAR(36) ,
      UNSPSC VARCHAR(200) ,
      UNUOM VARCHAR(200) ,
      PUB_FLAG INTEGER ,
      REVIEWPUB_FLAG INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP,
      REFRESHTIME TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP,
      VALID_FLAG INTEGER NOT NULL WITH DEFAULT 1,
      INSTALLABLE_OVERRIDE INTEGER )
;
--     IN ECCMAV32TS INDEX IN ECCMAV32XS ;
ALTER TABLE INT.AVWWPRD PCTFREE 10;
ALTER TABLE INT.AVWWPRD VOLATILE CARDINALITY;

CREATE INDEX ECCM.I_AVWWPRD_LANG ON INT.AVWWPRD (LANGUAGE ASC);
CREATE INDEX INST1.WIZ2781 ON INT.AVWWPRD (PRDENTITYTYPE ASC, PRODUCTCLASS ASC, PARTNUMBER ASC, REFRESHTIME ASC, COUNTRYCODE ASC, PRDENTITYID ASC);
CREATE INDEX INST1.WIZ3327 ON INT.AVWWPRD (PRODUCTCLASS ASC, PRDENTITYTYPE ASC, COUNTRYCODE ASC, REFRESHTIME ASC, PARTNUMBER ASC, PRDENTITYID ASC);
CREATE INDEX INST1   .WIZ3429 ON INT.AVWWPRD (COUNTRYCODE DESC);
CREATE INDEX INT.XIE1AVWWPRD ON INT.AVWWPRD (PRDENTITYTYPE ASC, PRDENTITYID ASC, PRDSKU ASC) PCTFREE 10 CLUSTER ;
CREATE INDEX INT.XIE2AVWWPRD ON INT.AVWWPRD (PARTNUMBER ASC, COUNTRYCODE ASC) PCTFREE 10 ;
CREATE INDEX INT.XIE3AVWWPRD ON INT.AVWWPRD (COUNTRYCODE ASC, PRDENTITYTYPE ASC, PARTNUMBER ASC);
CREATE INDEX INT.XIE4AVWWPRD ON INT.AVWWPRD (PRDENTITYID ASC, PRDENTITYTYPE ASC);
ALTER TABLE INT.AVWWPRD ADD PRIMARY KEY (PRDSKU);

------------------------------------------------
-- CONVERTED DWB
-- MADE A TEMP CHANGE TO THE COLUMNS TO
-- NEED THE 32TEMP TABLE SPACE
-- Need the original table def to bring back to original
------------------------------------------------
-- DDL Statements for table INT.AVWWCAT
------------------------------------------------
DROP TABLE INT.AVWWCAT;
CREATE TABLE INT.AVWWCAT  (
      CATSKU VARCHAR(50) NOT NULL ,
      CATIDENTIFIER VARCHAR(25) NOT NULL ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      AUDIENCE VARCHAR(200) ,
      NAME VARCHAR(60) ,
      NAMEDESC VARCHAR(254) ,
      --NAMELONGDESC VARCHAR(8192) ,
      DISPLAY VARCHAR(25) ,
      SERIESHEADING VARCHAR(254) ,
      IMAGEDISCLAIMER VARCHAR(30) ,
      PRICEDISCLAIMER VARCHAR(30) ,
      --FEATURE VARCHAR(8192) ,
      --FOOTNOTE VARCHAR(8192) ,
      PAGENAME VARCHAR(254) ,
      LEVEL INTEGER ,
      PUB_FLAG INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP,
      SEARCHTITLE VARCHAR(500) ,
      --SEARCHKEYWORD VARCHAR(1000) ,
      SEARCHABSTRACT VARCHAR(50) ,
      SEARCHDESC VARCHAR(50) ,
      --SEARCHCATEGORY VARCHAR(100) ,
      SEARCHDOCTYPE VARCHAR(20),
      SEARCHCATEGORY LONG VARCHAR ,
      SEARCHKEYWORD LONG VARCHAR ,
      NAMELONGDESC LONG VARCHAR,
      FEATURE LONG VARCHAR,
      FOOTNOTE LONG VARCHAR)
--    IN ECCMAV32TS INDEX IN ECCMAV32XS
;
ALTER TABLE INT.AVWWCAT PCTFREE 10;
ALTER TABLE INT.AVWWCAT ADD PRIMARY KEY (CATSKU);


------------------------------------------------
-- DDL Statements for table INT.AVCATIM
------------------------------------------------

 DROP TABLE INT.AVCATIM  ;
 CREATE TABLE INT.AVCATIM  (
      CATSKU VARCHAR(254) NOT NULL ,
      STATUS VARCHAR(75) NOT NULL ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      IMAGEID INTEGER ,
      IMAGENAME VARCHAR(150) ,
      FROMDATE VARCHAR(30) ,
      TODATE VARCHAR(30) ,
      PREVIEWFROM VARCHAR(30) ,
      PREVIEWTO VARCHAR(30) ,
      ECCM_IMAGEID INTEGER ,
      ECCM_IMAGENAME VARCHAR(150) ,
      ECCM_FROMDATE VARCHAR(30) ,
      ECCM_TODATE VARCHAR(30) ,
      ECCM_PREVIEWFROM VARCHAR(30) ,
      ECCM_PREVIEWTO VARCHAR(30) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAV32TS INDEX IN ECCMAV32XS ;
 ALTER TABLE INT.AVCATIM PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVCATIM

ALTER TABLE INT.AVCATIM
  ADD PRIMARY KEY
    (CATSKU,
     STATUS);


------------------------------------------------
-- DDL Statements for table INT.AVPRDAT
------------------------------------------------

 DROP TABLE INT.AVPRDAT  ;
 CREATE TABLE INT.AVPRDAT  (
      PRDSKU VARCHAR(254) NOT NULL ,
      ATTRIBUTETOKEN VARCHAR(36) NOT NULL ,
      PRDENTITYTYPE VARCHAR(36) ,
      PRDENTITYID INTEGER ,
      PARTNUMBER VARCHAR(36) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      VALUE VARCHAR(8192) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAV32TS INDEX IN ECCMAV32XS ;
 ALTER TABLE INT.AVPRDAT PCTFREE 10;

-- DDL Statements for indexes on Table INT.AVPRDAT

CREATE INDEX INT.WZKAVPRDAT ON INT.AVPRDAT
    (ATTRIBUTETOKEN ASC,
     PRDENTITYID DESC);

-- DDL Statements for indexes on Table INT.AVPRDAT

CREATE INDEX INT.XIE1AVPRDAT ON INT.AVPRDAT
    (COUNTRYCODE ASC,
     LANGUAGE ASC)
    PCTFREE 10 CLUSTER ;


-- DDL Statements for primary key on Table INT.AVPRDAT

ALTER TABLE INT.AVPRDAT
  ADD PRIMARY KEY
    (PRDSKU,
     ATTRIBUTETOKEN);

------------------------------------------------
-- CONVERTED DWB
-- ADDED NLSID
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.AVPRDAVAIL
------------------------------------------------
DROP TABLE INT.AVPRDAVAIL  ;
 CREATE TABLE INT.AVPRDAVAIL  (
      PRDSKU VARCHAR(254) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      PRDENTITYTYPE VARCHAR(36) ,
      PRDENTITYID INTEGER ,
      PRDNLSID INTEGER,
      PARTNUMBER VARCHAR(36) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      FOCUS_FLAG INTEGER ,
      NEW_FLAG INTEGER ,
      HIDE_FLAG INTEGER ,
      BUYABLE_FLAG INTEGER ,
      ADDTOCART_FLAG INTEGER ,
      CUSTOMIZE_FLAG INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP,
      RATETYPE INTEGER )
--    IN ECCMAV32TS INDEX IN ECCMAV32XS'
;
ALTER TABLE INT.AVPRDAVAIL PCTFREE 10;

CREATE INDEX INST1.WIZ3943 ON INT.AVPRDAVAIL(LANGUAGE ASC, PARTNUMBER ASC);
CREATE INDEX INT.WZ1AVPRDAVAIL1 ON INT.AVPRDAVAIL (PARTNUMBER ASC, AUDIENCE ASC);
CREATE INDEX INT.XIE1AVPRDAVAIL ON INT.AVPRDAVAIL (PARTNUMBER ASC, COUNTRYCODE ASC, LANGUAGE ASC) PCTFREE 10 CLUSTER ;
ALTER TABLE INT.AVPRDAVAIL ADD PRIMARY KEY (PRDSKU, AUDIENCE);

-----------------------------------------------
-- Converted DWB
-- Compiled DWB
------------------------------------------------
-- DDL Statements for table INT.AVPRDCAT
------------------------------------------------

 DROP TABLE INT.AVPRDCAT  ;
 CREATE TABLE INT.AVPRDCAT  (
      PRDSKU VARCHAR(254) NOT NULL ,
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      PRDENTITYTYPE VARCHAR(36) ,
      PRDENTITYID INTEGER ,
      PARTNUMBER VARCHAR(36) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAV32TS INDEX IN ECCMAV32XS ;
 ALTER TABLE INT.AVPRDCAT PCTFREE 10;

-- DDL Statements for indexes on Table INT.AVPRDCAT

CREATE INDEX INT.XIE1AVPRDCAT ON INT.AVPRDCAT
    (CATIDENTIFIER ASC,
     PARTNUMBER ASC,
     COUNTRYCODE ASC,
     LANGUAGE ASC)
    PCTFREE 10 CLUSTER ;


-- DDL Statements for primary key on Table INT.AVPRDCAT

ALTER TABLE INT.AVPRDCAT
  ADD PRIMARY KEY
    (PRDSKU,
     CATIDENTIFIER,
     AUDIENCE);


------------------------------------------------
-- DDL Statements for table INT.AVPRDIM
------------------------------------------------

 DROP TABLE INT.AVPRDIM  ;
 CREATE TABLE INT.AVPRDIM  (
      PRDSKU VARCHAR(254) NOT NULL ,
      STATUS VARCHAR(75) NOT NULL ,
      PRDENTITYTYPE VARCHAR(36) ,
      PRDENTITYID INTEGER ,
      PARTNUMBER VARCHAR(36) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      IMAGEID INTEGER ,
      IMAGENAME VARCHAR(150) ,
      FROMDATE VARCHAR(30) ,
      TODATE VARCHAR(30) ,
      PREVIEWFROM VARCHAR(30) ,
      PREVIEWTO VARCHAR(30) ,
      ECCM_IMAGEID INTEGER ,
      ECCM_IMAGENAME VARCHAR(150) ,
      ECCM_FROMDATE VARCHAR(30) ,
      ECCM_TODATE VARCHAR(30) ,
      ECCM_PREVIEWFROM VARCHAR(30) ,
      ECCM_PREVIEWTO VARCHAR(30) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAV32TS INDEX IN ECCMAV32XS ;
 ALTER TABLE INT.AVPRDIM PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVPRDIM

ALTER TABLE INT.AVPRDIM
  ADD PRIMARY KEY
    (PRDSKU,
     STATUS);


------------------------------------------------
-- DDL Statements for table INT.AVPRDMM
------------------------------------------------

 DROP TABLE INT.AVPRDMM  ;
 CREATE TABLE INT.AVPRDMM  (
      PRDSKU VARCHAR(254) NOT NULL ,
      STATUS VARCHAR(75) NOT NULL ,
      PRDENTITYTYPE VARCHAR(36) ,
      PRDENTITYID INTEGER ,
      PARTNUMBER VARCHAR(36) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      MMID INTEGER ,
      MMVALUE VARCHAR(8192) ,
      FROMDATE VARCHAR(30) ,
      TODATE VARCHAR(30) ,
      PREVIEWFROM VARCHAR(30) ,
      PREVIEWTO VARCHAR(30) ,
      ECCM_MMID INTEGER ,
      ECCM_MMVALUE VARCHAR(8192) ,
      ECCM_FROMDATE VARCHAR(30) ,
      ECCM_TODATE VARCHAR(30) ,
      ECCM_PREVIEWFROM VARCHAR(30) ,
      ECCM_PREVIEWTO VARCHAR(30) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAV32TS INDEX IN ECCMAV32XS ;
 ALTER TABLE INT.AVPRDMM PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVPRDMM

ALTER TABLE INT.AVPRDMM
  ADD PRIMARY KEY
    (PRDSKU,
     STATUS);


------------------------------------------------
-- DDL Statements for table INT.ECCMCAT
------------------------------------------------

 DROP TABLE INT.ECCMCAT  ;
 CREATE TABLE INT.ECCMCAT  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      PARENTIDENTIFIER VARCHAR(254) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.ECCMCAT PCTFREE 10;


-- DDL Statements for primary key on Table INT.ECCMCAT

ALTER TABLE INT.ECCMCAT
  ADD PRIMARY KEY
    (CATIDENTIFIER);


------------------------------------------------
-- DDL Statements for table INT.ECCMTRACKER
------------------------------------------------

 DROP TABLE INT.ECCMTRACKER ;
 CREATE TABLE INT.ECCMTRACKER  (
      SKU VARCHAR(254) NOT NULL ,
      PARTNUMBER VARCHAR(36) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      SERIES VARCHAR(254) ,
      FAMILY VARCHAR(254) ,
      CATIDENTIFIER VARCHAR(254) ,
      PATH VARCHAR(512) ,
      VPATH VARCHAR(512) ,
      LASTUPDATED TIMESTAMP )
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.ECCMTRACKER PCTFREE 10;

-- DDL Statements for indexes on Table INT.ECCMTRACKER

CREATE INDEX INT.ICECCMTRACKER ON INT.ECCMTRACKER
    (CATIDENTIFIER DESC);


-- DDL Statements for primary key on Table INT.ECCMTRACKER

ALTER TABLE INT.ECCMTRACKER
  ADD PRIMARY KEY
    (SKU);


------------------------------------------------
-- DDL Statements for table INT.AVPRDINVALIDAT
------------------------------------------------

 DROP TABLE INT.AVPRDINVALIDAT  ;
 CREATE TABLE INT.AVPRDINVALIDAT  (
      PRDSKU VARCHAR(254) NOT NULL ,
      ATTRIBUTETOKEN VARCHAR(36) NOT NULL ,
      PRDENTITYTYPE VARCHAR(36) ,
      PRDENTITYID INTEGER ,
      PARTNUMBER VARCHAR(36) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      VALUE VARCHAR(8192) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMAV32TS INDEX IN ECCMAV32XS ;
 ALTER TABLE INT.AVPRDINVALIDAT PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVPRDINVALIDAT

ALTER TABLE INT.AVPRDINVALIDAT
  ADD PRIMARY KEY
    (PRDSKU,
     ATTRIBUTETOKEN);


------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.CURRENCY_XCHG
------------------------------------------------
 DROP TABLE INT.CURRENCY_XCHG  ;
 CREATE TABLE INT.CURRENCY_XCHG  (
      CURRENCYCODE VARCHAR(5) NOT NULL ,
      XCHGRATEMUL DECIMAL(30,15) NOT NULL ,
      XCHGRATEDIV DECIMAL(30,15) NOT NULL ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMINTTS INDEX IN ECCMINTXS
;
ALTER TABLE INT.CURRENCY_XCHG PCTFREE 10;
ALTER TABLE INT.CURRENCY_XCHG ADD PRIMARY KEY (CURRENCYCODE);


------------------------------------------------
-- DDL Statements for table INT.TIMECODE
------------------------------------------------
DROP TABLE INT.TIMECODE  ;
CREATE TABLE INT.TIMECODE  (
    ENTITYID INTEGER NOT NULL,
    NLSID INTEGER NOT NULL,
    TIMECODE INTEGER,
    ENTITYTYPE VARCHAR(36) NOT NULL )
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.TIMECODE PCTFREE 10;

ALTER TABLE INT.TIMECODE ADD PRIMARY KEY (ENTITYID, ENTITYTYPE, NLSID);


------------------------------------------------
-- DDL Statements for table INT.IWOV_IDMAPS
------------------------------------------------

 DROP TABLE INT.IWOV_IDMAPS  ;
 CREATE TABLE INT.IWOV_IDMAPS  (
      TYPE INTEGER NOT NULL ,
      SHORTID VARCHAR(30) NOT NULL ,
      LONGID VARCHAR(1024) NOT NULL )
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.IWOV_IDMAPS PCTFREE 10;

-- DDL Statements for indexes on Table INT.IWOV_IDMAPS

CREATE INDEX INT.IWOV_IDMAPS_INDEX ON INT.IWOV_IDMAPS
    (TYPE ASC);



------------------------------------------------
-- DDL Statements for table INT.IWDELTRACKER
------------------------------------------------

 DROP TABLE INT.IWDELTRACKER  ;
 CREATE TABLE INT.IWDELTRACKER  (
      PATH VARCHAR(255) NOT NULL ,
      AREA VARCHAR(255) NOT NULL ,
      KEYCOLNAME VARCHAR(255) NOT NULL ,
      KEYCOLVALUE VARCHAR(255) NOT NULL )
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.IWDELTRACKER PCTFREE 10;

-- DDL Statements for indexes on Table INT.IWDELTRACKER

CREATE INDEX INT.IWDELT_IDX ON INT.IWDELTRACKER
    (PATH ASC,
     AREA ASC);



------------------------------------------------
-- DDL Statements for table INT.FAMILYGROUPSEQ
------------------------------------------------

 DROP TABLE INT.FAMILYGROUPSEQ  ;
 CREATE TABLE INT.FAMILYGROUPSEQ  (
      GROUPTOKEN VARCHAR(36) NOT NULL ,
      CTID INTEGER NOT NULL ,
      FAMILYID INTEGER NOT NULL ,
      SEQUENCE INTEGER ,
      VISIBLE INTEGER NOT NULL ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.FAMILYGROUPSEQ PCTFREE 10;

-- DDL Statements for indexes on Table INT.FAMILYGROUPSEQ

CREATE UNIQUE INDEX INST1   .FAMILYGROUPSEQIND1 ON INT.FAMILYGROUPSEQ
    (CTID ASC,
     FAMILYID ASC,
     VISIBLE ASC,
     GROUPTOKEN ASC);


-- DDL Statements for primary key on Table INT.FAMILYGROUPSEQ

ALTER TABLE INT.FAMILYGROUPSEQ
  ADD PRIMARY KEY
    (GROUPTOKEN,
     CTID,
     FAMILYID);


------------------------------------------------
-- DDL Statements for table INT.FAMILYATTRSEQ
------------------------------------------------

 DROP TABLE INT.FAMILYATTRSEQ  ;
 CREATE TABLE INT.FAMILYATTRSEQ  (
      ATTRIBUTETOKEN VARCHAR(36) NOT NULL ,
      CTID INTEGER NOT NULL ,
      FAMILYID INTEGER NOT NULL ,
      SEQUENCE INTEGER ,
      GROUPID INTEGER ,
      VISIBLE INTEGER NOT NULL ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.FAMILYATTRSEQ PCTFREE 10;


-- DDL Statements for primary key on Table INT.FAMILYATTRSEQ

ALTER TABLE INT.FAMILYATTRSEQ
  ADD PRIMARY KEY
    (ATTRIBUTETOKEN,
     CTID,
     FAMILYID);


------------------------------------------------
-- DDL Statements for table INT.ECCMATTR
------------------------------------------------

 DROP TABLE INT.ECCMATTR  ;
 CREATE TABLE INT.ECCMATTR  (
      ATTRIBUTETOKEN VARCHAR(36) NOT NULL ,
      LANGUAGE CHAR(2) NOT NULL ,
      AUDIENCE_FLAG VARCHAR(18) ,
      GROUPTOKEN VARCHAR(36) ,
      ATTRIBUTEDESCRIPTION VARCHAR(512) ,
      ATTRIBUTENAME VARCHAR(60) NOT NULL ,
      ATTRSORT INTEGER NOT NULL ,
      ATTRIBUTETYPE CHAR(1) ,
      COMPARISONONLY CHAR(1) NOT NULL ,
      LASTUPDATED TIMESTAMP ,
      NEWATTRIBUTE CHAR(1) NOT NULL WITH DEFAULT 'Y',
      ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY ( START WITH +10000 , INCREMENT BY +1 , CACHE 20 ) )
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.ECCMATTR PCTFREE 10;

-- DDL Statements for indexes on Table INT.ECCMATTR

CREATE INDEX INT.WZECCMATTR ON INT.ECCMATTR
    (GROUPTOKEN ASC,
     COMPARISONONLY ASC,
     ATTRIBUTETOKEN ASC,
     ATTRIBUTENAME ASC,
     ID ASC);


-- DDL Statements for primary key on Table INT.ECCMATTR

ALTER TABLE INT.ECCMATTR
  ADD PRIMARY KEY
    (ATTRIBUTETOKEN,
     LANGUAGE);

------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.AVCATROOT
------------------------------------------------
 DROP TABLE INT.AVCATROOT  ;
 CREATE TABLE INT.AVCATROOT  (
      PARENTIDENTIFIER VARCHAR(254) NOT NULL ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
--     IN ECCMAVTS INDEX IN ECCMAVXS
;
ALTER TABLE INT.AVCATROOT PCTFREE 10;

ALTER TABLE INT.AVCATROOT ADD PRIMARY KEY (PARENTIDENTIFIER);

------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.AVCATCATREL
------------------------------------------------

 DROP TABLE INT.AVCATCATREL  ;
 CREATE TABLE INT.AVCATCATREL  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      PARENTIDENTIFIER VARCHAR(254) NOT NULL ,
      RELATIONSHIPONLY CHAR(1) NOT NULL ,
      SOURCE VARCHAR(8) ,
      MASTNAV CHAR(1) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
--     IN ECCMAVTS INDEX IN ECCMAVXS
;
ALTER TABLE INT.AVCATCATREL PCTFREE 10;
ALTER TABLE INT.AVCATCATREL ADD PRIMARY KEY (CATIDENTIFIER, PARENTIDENTIFIER);


------------------------------------------------
-- DDL Statements for table INT.AVPRODCTRY
------------------------------------------------

 DROP TABLE INT.AVPRODCTRY  ;
 CREATE TABLE INT.AVPRODCTRY  (
      PARTNUMBER VARCHAR(36) NOT NULL ,
      COUNTRYCODE CHAR(2) NOT NULL ,
      LANGUAGE CHAR(2) NOT NULL ,
      AUDIENCE VARCHAR(18) NOT NULL ,
      ADDTOCARTCUSTOMIZE INTEGER ,
      BUYABLE CHAR(10) ,
      PAGENAME VARCHAR(254) ,
      QUANTITY CHAR(10) ,
      SALESTATUS CHAR(2) ,
      LASTUPDATED TIMESTAMP )
;
--     IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVPRODCTRY PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVPRODCTRY

ALTER TABLE INT.AVPRODCTRY
  ADD PRIMARY KEY
    (PARTNUMBER,
     COUNTRYCODE,
     LANGUAGE,
     AUDIENCE);

------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.ECCMATGP
------------------------------------------------
DROP TABLE INT.ECCMATGP  ;
CREATE TABLE INT.ECCMATGP  (
      GROUPTOKEN VARCHAR(36) NOT NULL ,
      AUDIENCE_FLAG VARCHAR(18) ,
      GROUPDESCRIPTION VARCHAR(512) ,
      GROUPNAME VARCHAR(96) ,
      GROUPSORT INTEGER NOT NULL ,
      LASTUPDATED TIMESTAMP ,
      NEWGROUP CHAR(1) NOT NULL WITH DEFAULT 'Y',
      ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY ( START WITH +10000 , INCREMENT BY +1 , CACHE 20 ) )
--   IN ECCMINTTS INDEX IN ECCMINTXS
;

ALTER TABLE INT.ECCMATGP PCTFREE 10;
ALTER TABLE INT.ECCMATGP ADD PRIMARY KEY (GROUPTOKEN);


------------------------------------------------
-- DDL Statements for table INT.TASK
------------------------------------------------

 DROP TABLE INT.TASK  ;
 CREATE TABLE INT.TASK  (
      TASK_ID INTEGER NOT NULL ,
      WORKFLOW_ID INTEGER NOT NULL ,
      NAME VARCHAR(256) NOT NULL ,
      OWNER VARCHAR(45) NOT NULL ,
      TYPE VARCHAR(20) NOT NULL ,
      ACTIVATION INTEGER ,
      UNACTIVATION INTEGER )
;
--     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.TASK PCTFREE 10;


-- DDL Statements for primary key on Table INT.TASK

ALTER TABLE INT.TASK
  ADD PRIMARY KEY
    (TASK_ID);


------------------------------------------------
-- DDL Statements for table INT.WORKFLOW
------------------------------------------------

 DROP TABLE INT.WORKFLOW  ;
 CREATE TABLE INT.WORKFLOW  (
      WORKFLOW_ID INTEGER NOT NULL ,
      NAME VARCHAR(256) NOT NULL ,
      OWNER VARCHAR(45) NOT NULL ,
      CREATOR VARCHAR(45) NOT NULL )
;
--IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.WORKFLOW PCTFREE 10;


-- DDL Statements for primary key on Table INT.WORKFLOW

ALTER TABLE INT.WORKFLOW
  ADD PRIMARY KEY
    (WORKFLOW_ID);


------------------------------------------------
-- DDL Statements for table INT.AVCMDROOT
------------------------------------------------

 DROP TABLE INT.AVCMDROOT;
 CREATE TABLE INT.AVCMDROOT  (
      FAMILYID INTEGER NOT NULL ,
      CTID INTEGER NOT NULL ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
;
--IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVCMDROOT PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVCMDROOT

ALTER TABLE INT.AVCMDROOT
  ADD PRIMARY KEY
    (FAMILYID,
     CTID);


------------------------------------------------
-- DDL Statements for table INT.AVCATPRODRELSEQOPTIONS
------------------------------------------------

 DROP TABLE INT.AVCATPRODRELSEQOPTIONS  ;
 CREATE TABLE INT.AVCATPRODRELSEQOPTIONS  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      LANGUAGE VARCHAR(6) NOT NULL ,
      ORDERBY_FLAG VARCHAR(10) ,
      ORDER_AD INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL )
;
--     IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVCATPRODRELSEQOPTIONS PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVCATPRODRELSEQOPTIONS

ALTER TABLE INT.AVCATPRODRELSEQOPTIONS
  ADD PRIMARY KEY
    (CATIDENTIFIER,
     COUNTRYCODE,
     AUDIENCE,
     LANGUAGE);


------------------------------------------------
-- DDL Statements for table INT.AVCATPRODRELSEQMANUAL
------------------------------------------------

 DROP TABLE INT.AVCATPRODRELSEQMANUAL  ;
 CREATE TABLE INT.AVCATPRODRELSEQMANUAL  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      PARTNUMBER VARCHAR(36) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      LANGUAGE VARCHAR(6) NOT NULL ,
      PUB_FLAG INTEGER ,
      SEQUENCE INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL )
;
--     IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVCATPRODRELSEQMANUAL PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVCATPRODRELSEQMANUAL

ALTER TABLE INT.AVCATPRODRELSEQMANUAL
  ADD PRIMARY KEY
    (CATIDENTIFIER,
     PARTNUMBER,
     COUNTRYCODE,
     AUDIENCE,
     LANGUAGE);


------------------------------------------------
-- DDL Statements for table INT.AVCATPRODRELPUBOTHER
------------------------------------------------

 DROP TABLE INT.AVCATPRODRELPUBOTHER  ;
 CREATE TABLE INT.AVCATPRODRELPUBOTHER  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      LANGUAGE VARCHAR(6) NOT NULL ,
      PARTNUMBER VARCHAR(36) NOT NULL ,
      PUB_FLAG INTEGER ,
      LASTUPDATED TIMESTAMP NOT NULL )
;
--     IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVCATPRODRELPUBOTHER PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVCATPRODRELPUBOTHER

ALTER TABLE INT.AVCATPRODRELPUBOTHER
  ADD PRIMARY KEY
    (CATIDENTIFIER,
     COUNTRYCODE,
     AUDIENCE,
     LANGUAGE,
     PARTNUMBER);

-------------------------------------------------------------
-- CONVERTED DWB
-- MAY NOT NEED BECAUSE OF THE SOFTWARE ENTITY TABLE
--
------------------------------------------------
-- DDL Statements for table ECCM.SOFTWARE
------------------------------------------------
DROP TABLE ECCM.SOFTWARE  ;
CREATE TABLE ECCM.SOFTWARE
(ENTITYTYPE VARCHAR(30)
,ENTITYID INTEGER
,NLSID INT
,ATTRIBUTETOKEN VARCHAR(36)
,VALUE VARCHAR(1024) )
;
ALTER TABLE ECCM.SOFTWARE PCTFREE 10;
CREATE INDEX ECCM.IXS1 ON ECCM.SOFTWARE (ENTITYID ASC,ENTITYTYPE ASC, NLSID ASC);

------------------------------------------------
-- DDL Statements for table INT.NEWFLAGDATES
------------------------------------------------
DROP TABLE INT.NEWFLAGDATES  ;
CREATE TABLE INT.NEWFLAGDATES  (
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      NUMBEROFDAYS INTEGER NOT NULL ,
      LASTUPDATED TIMESTAMP NOT NULL )
--   IN ECCMINTTS INDEX IN ECCMINTXS
;
ALTER TABLE INT.NEWFLAGDATES PCTFREE 10;

ALTER TABLE INT.NEWFLAGDATES ADD PRIMARY KEY (COUNTRYCODE);


------------------------------------------------
-- DDL Statements for table ECCM.SECURITY
------------------------------------------------

 CREATE TABLE ECCM.SECURITY  (
      USERID VARCHAR(100) NOT NULL ,
      LISTTYPE CHAR(1) NOT NULL ,
      LISTVALUE VARCHAR(254) NOT NULL ,
      NAME VARCHAR(254) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP,
      LASTMODIFIED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
     IN ECCM001TS INDEX IN ECCM001XS ;
 ALTER TABLE ECCM.SECURITY PCTFREE 10;


-- DDL Statements for primary key on Table ECCM.SECURITY

ALTER TABLE ECCM.SECURITY
  ADD PRIMARY KEY
    (USERID,
     LISTTYPE,
     LISTVALUE);

------------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.AVPRICE_STATE
------------------------------------------------

 CREATE TABLE INT.AVPRICE_STATE  (
      PARTNUMBER VARCHAR(18) NOT NULL ,
      CTOVARIANTPARTNUMBER VARCHAR(18) NOT NULL ,
      COUNTRYCODE VARCHAR(3) NOT NULL ,
      DISTRIBUTIONCHANNEL VARCHAR(2) NOT NULL ,
      PRICEVALIDTODATE DATE NOT NULL ,
      PRICETYPE VARCHAR(2) NOT NULL ,
      MATERIALSTATUS VARCHAR(2) ,
      MATERIALSTATUSDATE DATE ,
      PRICEAMOUNT DECIMAL(16,3) ,
      CURRENCYCODE VARCHAR(5) ,
      PRICEVALIDFROMDATE DATE NOT NULL ,
      CALLFORQUOTE VARCHAR(1) ,
      STATE VARCHAR(5) NOT NULL ,
      PRECEDENCE SMALLINT ,
      SOURCESYSTEM VARCHAR(10) ,
      MARKEDFORDELETION CHAR(1) ,
      LASTUPDATED TIMESTAMP NOT NULL ,
      DELTA_TS TIMESTAMP NOT NULL )
 -- IN ECCMPRICETS INDEX IN ECCMPRICEXS
 ;
 ALTER TABLE INT.AVPRICE_STATE VOLATILE CARDINALITY;

-- DDL Statements for indexes on Table INT.AVPRICE_STATE

CREATE INDEX ECCM.WIZ655 ON INT.AVPRICE_STATE
    (DISTRIBUTIONCHANNEL ASC,
     PRICEVALIDTODATE ASC,
     PRICEVALIDFROMDATE ASC,
     CALLFORQUOTE ASC);

-- DDL Statements for indexes on Table INT.AVPRICE_STATE

CREATE INDEX INT.X010AVPRICESTATE ON INT.AVPRICE_STATE
    (DELTA_TS ASC)
    PCTFREE 10 ;


-- DDL Statements for primary key on Table INT.AVPRICE_STATE

ALTER TABLE INT.AVPRICE_STATE
  ADD PRIMARY KEY
    (PARTNUMBER,
     CTOVARIANTPARTNUMBER,
     COUNTRYCODE,
     DISTRIBUTIONCHANNEL,
     PRICEVALIDTODATE,
     PRICETYPE);


------------------------------------------------
-- DDL Statements for table INT.VALID_PRICE_RANGE
------------------------------------------------

 CREATE TABLE INT.VALID_PRICE_RANGE  (
      FAMILYNAME VARCHAR(60) NOT NULL ,
      MIN_PRICE DECIMAL(16,3) NOT NULL ,
      MAX_PRICE DECIMAL(16,3) NOT NULL )
     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.VALID_PRICE_RANGE PCTFREE 10;


-- DDL Statements for primary key on Table INT.VALID_PRICE_RANGE

ALTER TABLE INT.VALID_PRICE_RANGE
  ADD PRIMARY KEY
    (FAMILYNAME);


------------------------------------------------
-- DDL Statements for table INT.TEAMCATALOG_DELTAFORCE
------------------------------------------------

 CREATE TABLE INT.TEAMCATALOG_DELTAFORCE  (
      CATEGORY VARCHAR(10) NOT NULL ,
      CATALOG VARCHAR(20) NOT NULL ,
      REGION VARCHAR(10) NOT NULL ,
      COUNTRYCODE CHAR(2) NOT NULL ,
      DELTA_INDICATOR TIMESTAMP NOT NULL )
     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.TEAMCATALOG_DELTAFORCE PCTFREE 10;


-- DDL Statements for primary key on Table INT.TEAMCATALOG_DELTAFORCE

ALTER TABLE INT.TEAMCATALOG_DELTAFORCE
  ADD PRIMARY KEY
    (CATEGORY,
     CATALOG,
     REGION,
     COUNTRYCODE);


------------------------------------------------
-- DDL Statements for table INT.AVFAMATROOT
------------------------------------------------

 CREATE TABLE INT.AVFAMATROOT  (
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      LANGUAGE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
     IN ECCMAVTS INDEX IN ECCMAVXS ;
 ALTER TABLE INT.AVFAMATROOT PCTFREE 10;


-- DDL Statements for primary key on Table INT.AVFAMATROOT

ALTER TABLE INT.AVFAMATROOT
  ADD CONSTRAINT PKAVFAMATROOT PRIMARY KEY
    (CATIDENTIFIER,
     COUNTRYCODE,
     LANGUAGE,
     AUDIENCE);


------------------------------------------------
-- DDL Statements for table INT.AVCATMM
------------------------------------------------

 CREATE TABLE INT.AVCATMM  (
      SKU VARCHAR(254) NOT NULL ,
      CATSKU VARCHAR(254) ,
      COUNTRYCODE VARCHAR(6) ,
      LANGUAGE VARCHAR(6) ,
      MMID INTEGER ,
      MMVALUE VARCHAR(32001) ,
      STATUS VARCHAR(30) ,
      FROMDATE VARCHAR(30) ,
      TODATE VARCHAR(30) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
     IN ECCMAV32TS INDEX IN ECCMAV32XS ;
-- DDL Statements for indexes on Table INT.AVCATMM

CREATE INDEX INT.XIE1AVCATMM ON INT.AVCATMM
    (COUNTRYCODE ASC,
     LANGUAGE ASC)
    PCTFREE 10 CLUSTER ;


-- DDL Statements for primary key on Table INT.AVCATMM

ALTER TABLE INT.AVCATMM
  ADD PRIMARY KEY
    (SKU);


------------------------------------------------
-- DDL Statements for table INT.ATTRLISTSEQ
------------------------------------------------

 CREATE TABLE INT.ATTRLISTSEQ  (
      UPDATED INTEGER NOT NULL ,
      FAMILYID INTEGER NOT NULL ,
      ATTRLIST VARCHAR(32617) ,
      CTID INTEGER NOT NULL ,
      GROUPTOKEN VARCHAR(36) NOT NULL )
     IN ECCMAV32TS INDEX IN ECCMAV32XS ;

-- DDL Statements for primary key on Table INT.ATTRLISTSEQ

ALTER TABLE INT.ATTRLISTSEQ
  ADD PRIMARY KEY
    (FAMILYID,
     CTID,
     GROUPTOKEN);


------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
-- DDL Statements for table ECCM.CMD_SRC
-- This is the cartesion product of families to countries?
-- each family accross all countries?
-- TMPCHANGED ATTRLIST TO LONG VARCHAR
------------------------------------------------
DROP TABLE ECCM.CMD_SRC;
CREATE TABLE ECCM.CMD_SRC  (
     CTID INTEGER NOT NULL ,
     FAMILYID INTEGER NOT NULL ,
     COUNTRYCODE VARCHAR(6) ,
     COUNTRYNAME VARCHAR(45) ,
     FAMILYNAME VARCHAR(60) ,
     GROUPTOKEN VARCHAR(36) ,
     GROUPLABEL VARCHAR(96) ,
     GROUPSEQ INTEGER NOT NULL ,
     FILENAME VARCHAR(40) ,
     --ATTRLIST VARCHAR(32312) ,
     ATTRLIST LONG VARCHAR,
     VISIBLE INTEGER NOT NULL ,
     LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
     --IN ECCMAV32TS INDEX IN ECCMAV32XS
     ;
CREATE INDEX ECCM.IX1CMD_SRC ON ECCM.CMD_SRC (GROUPTOKEN ASC, CTID ASC, FAMILYID ASC);

------------------------------------------------
-- Converted DWB
-- Compiled DWB
------------------------------------------------
-- DDL Statements for table INT.AVPRDEVP
------------------------------------------------
 DROP TABLE INT.AVPRDEVP;
 CREATE TABLE INT.AVPRDEVP  (
      PARTNUMBER VARCHAR(36) NOT NULL ,
      COUNTRYCODE VARCHAR(6) NOT NULL ,
      LANGUAGE VARCHAR(6) NOT NULL ,
      AUDIENCE VARCHAR(254) NOT NULL ,
      CATIDENTIFIER VARCHAR(254) NOT NULL ,
      EVP_INDICATOR CHAR(1) NOT NULL ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)

-- IN ECCMAVTS INDEX IN ECCMAVXS LONG IN ECCM001LS
 ;

ALTER TABLE INT.AVPRDEVP
  ADD CONSTRAINT SQL020920182254320 PRIMARY KEY
    (PARTNUMBER,
     COUNTRYCODE,
     LANGUAGE,
     AUDIENCE,
     CATIDENTIFIER,
     EVP_INDICATOR);

------------------------------------------------
-- Converted DWB
-- Compiled DWB
-- Removed a field AAttribute...
-- This has to be a view..and will be joined with
-- the ECCM.PRODATTRELATOR TABLE
------------------------------------------------
-- DDL Statements for table ECCM.PRODATTRIBUTE - CONVERTED DWB
------------------------------------------------
DROP TABLE ECCM.PRODATTRIBUTE;
CREATE TABLE ECCM.PRODATTRIBUTE
(PARENTENTITYTYPE VARCHAR(32) NOT NULL
,PARENTENTITYID INTEGER NOT NULL
,ATTRIBUTECODE VARCHAR(32) NOT NULL
,VALUE VARCHAR(254)
,FLAGCODE VARCHAR(32)
,NLSID INTEGER NOT NULL
,VALFROM DATE
,VALTO DATE
,LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP
)
--IN ECCMPATTRTS INDEX IN ECCMPATTRXS
;

ALTER TABLE ECCM.PRODATTRIBUTE PCTFREE 15;
CREATE INDEX ECCM.CLPRODATTRIBUTE ON ECCM.PRODATTRIBUTE (NLSID ASC, PARENTENTITYID ASC, ATTRIBUTECODE ASC, PARENTENTITYTYPE ASC) CLUSTER;
CREATE INDEX ECCM.MVPRODATTRIBUTE ON ECCM.PRODATTRIBUTE(NLSID ASC, ATTRIBUTEID ASC,FLAGCODE ASC);
CREATE INDEX ECCM.PCPRDATTRIBUTE ON ECCM.PRODATTRIBUTE (PARENTENTITYID ASC, PARENTENTITYTYPE ASC, NLSID ASC, VALUE ASC, ATTRIBUTECODE ASC);
--CREATE INDEX ECCM.TCPRODATTRIBUTE ON ECCM.PRODATTRIBUTE(PARENTENTITYTYPE DESC, PARENTENTITYID DESC, NLSID DESC);
CREATE INDEX ECCM.WIZ724 ON ECCM.PRODATTRIBUTE (LASTUPDATED DESC);
CREATE INDEX INST1.SPAPRODATTRIBUTE ON ECCM.PRODATTRIBUTE (PARENTENTITYID ASC, PARENTENTITYTYPE ASC, NLSID ASC, ATTRIBUTECODE ASC, VALUE ASC);
ALTER TABLE ECCM.PRODATTRIBUTE ADD PRIMARY KEY (PARENTENTITYID, PARENTENTITYTYPE, NLSID);

------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
-- Removed ID
-- AUDIANCE FLAG ALWAYS SAYS 'ALL'
-- So i Beliewe it is not needed
------------------------------------------------
-- DDL Statements for table ECCM.ATTRIBUTE
-- This table is reference data
------------------------------------------------
CREATE TABLE ECCM.ATTRIBUTE
(ID INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY ( START WITH +1 , INCREMENT BY +1 , CACHE 20 ) ,
 ATTRIBUTECODE VARCHAR(32)
,NLSID INTEGER
,ATTRGROUPID INTEGER
,ATTRIBUTDESCRIPTION VARCHAR(256)
,ATTRIBUTENAME VARCHAR(60)
,ATTRIBUTETOKEN VARCHAR(36)
,ATTRSORT INTEGER
,ATTRIBUTETYPE VARCHAR(1)
,LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
 -- IN ECCM002TS INDEX IN ECCM002XS
  ;

ALTER TABLE ECCM.ATTRIBUTE PCTFREE 20;
CREATE UNIQUE INDEX ECCM.ATTRIBUTE_I1 ON ECCM.ATTRIBUTE(ATTRIBUTECODE ASC, ATTRGROUPID ASC, ATTRIBUTETOKEN ASC);
CREATE UNIQUE INDEX ECCM.ICATTRIBUTE ON ECCM.ATTRIBUTE (ATTRIBUTECODE ASC, ATTRGROUPID DESC);
CREATE UNIQUE INDEX ECCM.PCATTRIBUTE ON ECCM.ATTRIBUTE (ATTRIBUTECODE ASC, ATTRIBUTETOKEN DESC);
CREATE INDEX ECCM.WZ1ATTRIBUTE4 ON ECCM.ATTRIBUTE (ATTRIBUTETYPE DESC);
CREATE INDEX ECCM.WZ4ATTRIBUTE ON ECCM.ATTRIBUTE(ATTRIBUTETOKEN ASC, ATTRIBUTENAME ASC, NLSID ASC, ATTRGROUPID ASC, ATTRIBUTEOCODE ASC);
CREATE INDEX ECCM.XIE1ATTRIBUTE ON ECCM.ATTRIBUTE (ATTRGROUPID ASC);
CREATE INDEX ECCM.XIE2ATTRIBUTE ON ECCM.ATTRIBUTE (NLSID ASC, AUDIENCE_FLAG ASC, ATTRGROUPID ASC, PCTFREE 10;
CREATE INDEX ECCM.XIE3ATTRIBUTE ON ECCM.ATTRIBUTE (ATTRIBUTETOKEN ASC) PCTFREE 10 CLUSTER;
ALTER TABLE ECCM.ATTRIBUTE ADD PRIMARY KEY (ID);


------------------------------------------------
-- DOES NOT APPEAR TO BE CALLED OUT IN ANY TABLE SPEC
-- NOR SUPPORTING TABLE
-- Converted DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.PRDMESSAGE
------------------------------------------------
drop table eccm.prdmessage;
create summary table eccm.prdmessage (
  parententitytype
, parententityid
, nlsid
, mmentitytype
, mmentityid
, datefrom
, dateto
, status) AS
(SELECT
 'CSOL'
, csol.entityID
, csol.nlsid
,'MM'
, COALESCE(mm.entityid,mm2.entityid)
, COALESCE(mm.mmfrom,mm2.mmfrom)
, COALESCE(mm.mmto, mm2.mmto)
, COALESCE(mm.mmstatus,mm2.mmstatus)
FROM pcd.csol csol
LEFT JOIN  pcd.csolmm csolmm on
    csol.entityid = csolmm.ID1
LEFT JOIN pcd.mm mm on
    mm.EntityID = csolmm.ID2
and mm.nlsid = csol.nlsid
INNER JOIN pcd.ofcsol ofcsol on
    ofcsol.ID2 = csol.EntityID
LEFT JOIN pcd.ofmm ofmm on
    ofmm.ID1 = ofcsol.ID1
LEFT JOIN pcd.mm mm2 on
    mm2.EntityID =ofmm.ID2
and mm2.nlsid = csol.nlsid
UNION ALL
SELECT
'CCTO'
,CCTO.EntityID
,CCTO.nlsid
,'MM'
,COALESCE(mm.entityid,mm2.entityid)
,COALESCE(mm.mmfrom,mm2.mmfrom)
,COALESCE(mm.mmto, mm2.mmto)
,COALESCE(mm.mmstatus,mm2.mmstatus)
FROM pcd.ccto ccto
LEFT JOIN  pcd.cctomm cctomm on
    ccto.entityid = cctomm.ID1
LEFT JOIN pcd.mm mm on
    mm.EntityID = cctomm.ID2
and mm.nlsid = ccto.nlsid
INNER JOIN pcd.ctoccto ctoccto on
    ctoccto.ID2 = ccto.EntityID
LEFT JOIN pcd.ctomm ctomm on
    ctomm.ID1 = ctoccto.ID1
LEFT JOIN pcd.mm mm2 on
    mm2.EntityID =ctomm.ID2
and mm2.nlsid = ccto.nlsid
UNION ALL
SELECT
'CB'
,CB.EntityID
,CB.nlsid
,'MM'
,mm.entityid
,mm.mmfrom
,mm.mmto
,mm.mmstatus
FROM pcd.cb cb
INNER JOIN  pcd.cbmm cbmm on
    cb.entityid = cbmm.ID1
INNER JOIN pcd.mm mm on
    mm.EntityID = cbmm.ID2
and mm.nlsid = cb.nlsid
) DATA INITIALLY DEFERRED REFRESH DEFERRED;
REFRESH TABLE ECCM.PRDMESSAGE;

CREATE INDEX ECCM.MMINDEX001 ON ECCM.PRDMESSAGE (PARENTENTITYID ASC, PARENTENTITYTYPE ASC, NLSID ASC,MMENTITYID ASC) PCTFREE 10 ;

------------------------------------------------
-- CALLED OUT IN THE TABLE SPEC - AND USED IN OTHER VIEWS
--
-- Converted DWB
-- Compiled DWB
------------------------------------------------
-- DDL Statements for table ECCM.PRODUCTCOUNTRY
------------------------------------------------
drop table eccm.productcountry;
create summary table eccm.productcountry (parententitytype, parententityid, nlsid,ctid, countrycode) as (

SELECT
'CSOL'
,csol.entityid
,csol.nlsid
,ga.entityid
,ga.genareacode
FROM pcd.csol csol
JOIN pcd.generalarea ga on
    ga.genareaname = csol.genareaname
UNION
SELECT
'CVAR'
,cvar.entityid
,cvar.nlsid
,ga.entityid
,ga.genareacode
FROM pcd.cvar cvar
JOIN pcd.generalarea ga on
    ga.genareaname = cvar.genareaname
UNION
SELECT
'CCTO'
,ccto.entityid
,ccto.nlsid
,ga.entityid
,ga.genareacode
FROM pcd.ccto ccto
JOIN pcd.generalarea ga on
    ga.genareaname = ccto.genareaname
UNION
SELECT
'CB '
,cb.entityid
,cb.nlsid
,ga.entityid
,ga.genareacode
FROM pcd.cb cb
JOIN pcd.generalarea ga on
    ga.genareaname = cb.genareaname

) DATA INITIALLY DEFERRED REFRESH DEFERRED ;
REFRESH TABLE ECCM.PRODUCTCOUNTRY;

CREATE INDEX ECCM.PCINDEX001 ON ECCM.PRODUCTCOUNTRY (PARENTENTITYID ASC, PARENTENTITYTYPE ASC, NLSID ASC) PCTFREE 10;
CREATE INDEX ECCM.PRODUCTCOUNTRY_I2 ON ECCM.PRODUCTCOUNTRY (CTID ASC) PCTFREE 10 CLUSTER;
CREATE INDEX ECCM.XIE3PRODUCTCOUNTRY ON ECCM.PRODUCTCOUNTRY (PARENTENTITYID ASC, NLSID ASC, COUNTRYCODE ASC, PARENTENTITYTYPE ASC);

------------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- Converted DWB
-- Compiled DWB
------------------------------------------------
-- DDL Statements for table ECCM.CATIMAGE
------------------------------------------------
 drop table eccm.catimage;
 create summary table eccm.catimage (
   parententitytype
 , parententityid
 , nlsid
 , imageid
 , displayname
 , colorimagename
 , datefrom
 , dateto
 , status ) as
 (
  SELECT
   'FAM'
   ,fam.entityid
   ,fam.nlsid
   ,img.entityid
   ,img.IMAGEDESCRIPTION
   ,'COLORIMAGENAME GONE'
   ,img.imgfrom
   ,img.imgto
   ,img.imgstatus
   from pcd.fam fam
   join pcd.famimg famimg on
       famimg.ID1 = fam.entityid
   join pcd.img img on
       img.EntityID = famimg.ID2
   and  img.nlsid = fam.nlsid
   UNION
    select
   'SE'
   ,se.entityid
   ,se.nlsid
   ,img.entityid
   ,img.IMAGEDESCRIPTION
   ,'COLORIMAGENAME GONE'
   ,img.imgfrom
   ,img.imgto
   ,img.imgstatus
   from pcd.se se
   join pcd.seimg seimg on
       seimg.ID1 = se.entityid
   join pcd.img img on
       img.EntityID = seimg.ID2
   and  img.nlsid = se.nlsid

  ) DATA INITIALLY DEFERRED REFRESH DEFERRED ;
REFRESH TABLE ECCM.CATIMAGE;
CREATE INDEX ECCM.CATIMINDEX001 ON ECCM.CATIMAGE (PARENTENTITYTYPE ASC, PARENTENTITYID ASC, IMAGEID ASC) PCTFREE 10;

------------------------------------------------
-- SUPPORTS ANOTHER SUMMARY TABLE IN THE TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
--
-- SEEMED TO BE MISSING
------------------------------------------------
-- DDL Statements for table ECCM.ATTRUNITS
------------------------------------------------
DROP TABLE ECCM.ATTRUNITS;
CREATE TABLE ECCM.ATTRUNITS
 (
    attributetoken VARCHAR(36) NOT NULL,
    attributeunittoken VARCHAR(36) NOT NULL
 );

 CREATE INDEX ECCM.ATTRUNITX1 ON ECCM.ATTRUNITS(ATTRIBUTETOKEN ASC);
 ALTER TABLE ECCM.ATTRUNITS ADD PRIMARY KEY (ATTRIBUTETOKEN, ATTRIBUTEUNITTOKEN);

------------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
-----------------------------------------------
-- DDL Statements for table ECCM.ATTRWITHUNIT
------------------------------------------------
 DROP TABLE ECCM.ATTRWITHUNIT;
 create summary table eccm.attrwithunit as (
select
  attr1.id as attrid
, attr1.attributetoken as attrtoken
, attr2.id as attrunitid
, attr2.attributetoken as attrunittoken
from eccm.attribute attr1
left outer join eccm.attrunits attrunits on
    attrunits.attributetoken = attr1.attributetoken
left join eccm.attribute attr2 on
    attr2.attributetoken  = attrunits.attributeunittoken
where
    attr1.attributetoken not in (select attributeunittoken from eccm.attrunits)

) Data initially deferred refresh deferred
-- IN ECCMSUMMTS INDEX IN ECCMSUMMTS LONG IN ECCM001LS
;
REFRESH TABLE ECCM.ATTRWITHUNIT;

CREATE INDEX ECCM.WZATTRWITHUNIT ON ECCM.ATTRWITHUNIT (ATTRID ASC, ATTRUNITID ASC);

------------------------------------------------
-- NOT USED FROM WHAT I CAN GATHER
-- Converted DWB
-- Compiled DWB
------------------------------------------------
-- DDL Statements for table ECCM.COUNTRYREGION
------------------------------------------------
create summary table eccm.countryregion (ctid, nlsid ,countrycode ,regioncode) as (
select
 ga.entityid
,ga.nlsid
,ga.GENAREACODE
,ga.GENAREAPARENT
FROM pcd.generalarea ga
WHERE
  ga.genareatype = 'Cty'

) DATA INITIALLY DEFERRED REFRESH DEFERRED;

refresh table eccm.countryregion;

CREATE INDEX ECCM.CRINDEX001 ON ECCM.COUNTRYREGION(CTID ASC);

------------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWBw
------------------------------------------------
-- DDL Statements for table INT.CHARVALUE
------------------------------------------------
DROP TABLE INT.CHARVALUE;
CREATE SUMMARY TABLE INT.CHARVALUE
(
  PARTNUMBER,
  SBBPARTNUMBER,
  CHARACTERISTIC,
  CHARACTERISTIC_QTY,
  LOWERLIMIT,
  UPPERLIMIT
)
  as (
        select    cv.partnumber,
                  cv.characteristicvalue,
                  cv.characteristicname,
                  cvq.characteristicname,
                  cvq.lowerlimit,
                  cvq.upperlimit

        from      eccm.prod_char_value cv

        left join eccm.prod_char_value cvq on
                  cv.partnumber = cvq.partnumber and
                  rtrim(cv.characteristicname) || '_' || rtrim(cv.characteristicvalue) = rtrim(SUBSTR(cvq.characteristicname,1,(POSSTR(cvq.characteristicname,'_QTY')-1))) AND
                  rtrim(cvq.characteristicname) like '%_QTY'

        where     rtrim(cv.characteristicname) not like '%_QTY'


      ) DATA INITIALLY DEFERRED REFRESH DEFERRED;

REFRESH TABLE int.charvalue;
CREATE INDEX INT.CHARVALUEIDX1 ON INT.CHARVALUE (PARTNUMBER ASC, SBBPARTNUMBER ASC) PCTFREE 10;

------------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- Converted DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.CBUNSPSC
------------------------------------------------
drop table eccm.cbunspsc;
create summary table eccm.cbunspsc (entitytype, entityid,nlsid, unspsc) as
(
 select
'CB'
,cb.EntityID
,cb.nlsid
,COALESCE(of.unspsc,'4317800')
from pcd.cb cb
join pcd.cbcsol cbcsol on
    cbcsol.ID1 = cb.EntityID
join pcd.ofcsol ofcsol on
    ofcsol.ID2 = cbcsol.ID2
join pcd.of of on
    of.entityid = ofcsol.ID1
and of.nlsid = cb.nlsid
UNION
select
'CB'
,cb.EntityID
,cb.nlsid
,COALESCE(var.unspsc,'4317800')
from pcd.cb cb
join pcd.cbcvar cbcvar on
    cbcvar.ID1 = cb.EntityID
join pcd.varcvar varcvar on
    varcvar.ID2 = cbcvar.ID2
join pcd.var var on
    var.entityid = varcvar.ID1
and var.nlsid = cb.nlsid
) DATA INITIALLY DEFERRED REFRESH DEFERRED;
refresh table eccm.cbunspsc;

CREATE INDEX ECCM.CBUX0001 ON ECCM.CBUNSPSC (ENTITYTYPE ASC, ENTITYID ASC);


-----------------------------------------------
-- CALLED OUT IN THE SPEC
-- ADDED NLSID
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.PSGSERVICETYPE
------------------------------------------------
drop table eccm.psgservicetype;
create summary table eccm.psgservicetype as
(
    select    prdat.parententitytype,
              prdat.parententityid,
              prdat.nlsid,
              prdat.flagcode

    from      eccm.attribute at

    join      eccm.prodattribute prdat on
              prdat.attributecode = at.attibutecode

    where     at.attributetoken = 'PSGSERVICETYPE' and
              prdat.parententitytype in ('OF','SBB')

) DATA INITIALLY DEFERRED REFRESH DEFERRED;
REFRESH TABLE ECCM.PSGSERVICETYPE;

------------------------------------------------
-- USED TO SUPPORT OTHER TABLES
-- Converted DWB
-- Compiled DWB
------------------------------------------------
-- DDL Statements for table ECCM.AUDIENCE
------------------------------------------------
DROP TABLE ECCM.AUDIENCE;
CREATE SUMMARY TABLE ECCM.AUDIENCE AS (
select
 csol.nlsid as nlsid
,'CSOL' as entityname
,csol.entityid as entityid
,f.attributecode as columnname
,CASE f.attributevalue
    WHEN '0120' THEN 'SHOP'
    WHEN '0200' THEN 'LE'
 END as longdescription
from pcd.csol csol
join pcd.FLAG f on
    f.entityid = csol.entityid
and f.entitytype = 'CSOL'
and f.attributecode = 'CATALOG_NAME_CT'
and f.attributevalue in ('0120','0200')
UNION ALL
select
 ccto.nlsid as nlsid
,'CCTO' as entityname
,ccto.entityid as entityid
,f.attributecode as columnname
,CASE f.attributevalue
    WHEN '0120' THEN 'SHOP'
    WHEN '0200' THEN 'LE'
 END as longdescription
from pcd.ccto ccto
join pcd.FLAG f on
    f.entityid = ccto.entityid
and f.entitytype = 'CCTO'
and f.attributecode = 'CCOSOLCATALOGNAME'
and f.attributevalue in ('0120','0200')
UNION ALL
select
 cb.nlsid as nlsid
,'CB' as entityname
,cb.entityid as entityid
,f.attributecode as columnname
,CASE f.attributevalue
    WHEN '0120' THEN 'SHOP'
    WHEN '0200' THEN 'LE'
 END as longdescription
from pcd.cb cb
join pcd.FLAG f on
    f.entityid = cb.entityid
and f.entitytype = 'CB'
and f.attributecode = 'CATALOG_NAME_CB'
and f.attributevalue in ('0120','0200')
UNION ALL
select
 cvar.nlsid as nlsid
,'CVAR' as entityname
,cvar.entityid as entityid
,f.attributecode as columnname
,CASE f.attributevalue
    WHEN '0120' THEN 'SHOP'
    WHEN '0200' THEN 'LE'
 END as longdescription
from pcd.cvar cvar
join pcd.FLAG f on
    f.entityid = cvar.entityid
and f.entitytype = 'CVAR'
and f.attributecode = 'CATALOGNAME_CVAR'
and f.attributevalue in ('0120','0200')
) DATA INITIALLY DEFERRED REFRESH DEFERRED ;
REFREST TABLE ECCM.AUDIENCE;
CREATE INDEX ECCM.AUDIENCEIX1 ON ECCM.AUDIENCE (ENTITYID ASC, ENTITYNAME ASC, NLSID ASC) PCTFREE 10 ;


------------------------------------------------
-- CALLED OUT IN SPECFICICATION DOC
-- CONVERTED DWB
-- COMPILED DWB
-- TESTED
------------------------------------------------
-- DDL Statements for table ECCM.PROJSERBRANDFAM
------------------------------------------------
DROP TABLE ECCM.PROJSERBRANDFAM;
CREATE SUMMARY TABLE ECCM.PROJSERBRANDFAM AS (
SELECT
 PR.NLSID as NLSID
,PR.ENTITYID AS PROJECTID
,SE.ENTITYID AS SERIESID
,SE.SERIESNAME AS SERIESNAME
,BR.ENTITYID  AS BRANDID
,BR.SUBGROUPNAME AS BRANDNAME
,FAM.ENTITYID AS FAMILYID
,FAM.FAMILYNAME AS FAMILYNAME
,FAM.Familyname || '@' || SE.SeriesName as FAMSERNAME
FROM pcd.pr pr

join pcd.br br on
    br.brandcode = pr.brandcode and
    br.nlsid = pr.nlsid
join pcd.fam fam on
    fam.FAMNAMEASSOC = pr.FAMNAMEASSOC and
   fam.nlsid = pr.nlsid
join pcd.se se on
    se.SENAMEASSOC = pr.SENAMEASSOC and
   se.nlsid = pr.nlsid
) DATA INITIALLY DEFERRED REFRESH DEFERRED;
REFRESH TABLE ECCM.PROJSERBRANDFAM;

CREATE INDEX ECCM.PSBFINDEX ON ECCM.PROJSERBRANDFAM(PROJECTID ASC, NLSID ASC);

------------------------------------------------
-- CALLED OUT IN SPECIFICATION
-- CONVERETED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table INT.EFFECTIVEPRICE
------------------------------------------------
 CREATE SUMMARY TABLE int.effectiveprice as
 (
    select        a.partnumber as parentpartnumber,
                  a.ctovariantpartnumber as childpartnumber,
                  a.countrycode as countrycode,
                  a.distributionchannel as distributionchannel,
                  a.pricetype as pricetype,
                  a.priceamount as priceamount,
                  a.currencycode as currencycode,
                  a.materialstatus as materialstatus,
                  a.materialstatusdate as materialstatusdate,
                  a.callforquote as callforquote,
                  a.precedence as precedence,
                  a.pricevalidtodate as pricevalidtodate,
                  a.pricevalidfromdate as pricevalidfromdate

    from          int.avprice_state a,
                  int.avprice_state b

    where         a.partnumber = b.partnumber and
                  a.countrycode=b.countrycode and
                  a.ctovariantpartnumber = b.ctovariantpartnumber and
                  a.distributionchannel = b.distributionchannel and
                  a.pricevalidtodate != b.pricevalidtodate and
                  (a.precedence > b.precedence) and
                  current date between a.pricevalidfromdate and a.pricevalidtodate and
                  current date between b.pricevalidfromdate and b.pricevalidtodate and
                  a.distributionchannel = '00' and
                  a.callforquote in ('0','1') and
                  b.callforquote in ('0','1')

    union

    select        a.partnumber as parentpartnumber,
                  a.ctovariantpartnumber as childpartnumber,
                  a.countrycode as countrycode,
                  a.distributionchannel as distributionchannel ,
                  a.pricetype as pricetype,
                  a.priceamount as priceamount,
                  a.currencycode as currencycode,
                  a.materialstatus as materialstatus,
                  a.materialstatusdate as materialstatusdate,
                  a.callforquote as callforquote,
                  a.precedence as precedence,
                  a.pricevalidtodate as pricevalidtodate,
                  a.pricevalidfromdate as pricevalidfromdate

    from          int.avprice_state a

    where         current date between a.pricevalidfromdate and
                  a.pricevalidtodate and
                  a.distributionchannel = '00' and
                  a.callforquote in ('0','1') and
                  partnumber||ctovariantpartnumber||countrycode not in (

                  select    a.partnumber||a.ctovariantpartnumber||a.countrycode

                  from      int.avprice_state a,
                            int.avprice_state b

                  where     a.partnumber = b.partnumber and
                            a.countrycode=b.countrycode and
                            a.ctovariantpartnumber = b.ctovariantpartnumber and
                            a.distributionchannel = b.distributionchannel and
                            a.pricevalidtodate != b.pricevalidtodate and
                            (a.precedence > b.precedence) and
                            current date between a.pricevalidfromdate and a.pricevalidtodate and
                            current date between b.pricevalidfromdate and b.pricevalidtodate and
                            a.distributionchannel = '00' and
                            a.callforquote in ('0','1') and
                            b.callforquote in ('0','1')
                  )

) DATA INITIALLY DEFERRED REFRESH DEFERRED;
REFRESH TABLE INT.EFFECTIVEPRICE;

CREATE INDEX ECCM.I_EFP_DISTCHAN ON INT.EFFECTIVEPRICE (DISTRIBUTIONCHANNEL ASC);
CREATE INDEX INST1   .WIZ1912 ON INT.EFFECTIVEPRICE (PARENTPARTNUMBER DESC, COUNTRYCODE DESC);
CREATE INDEX INT.EFPINDEX001 ON INT.EFFECTIVEPRICE (PARENTPARTNUMBER ASC,  CHILDPARTNUMBER ASC, COUNTRYCODE ASC) PCTFREE 10 ;

-------------------------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
-- DOCUMENTATION REFERS TO DELTAFORCE?
-- CANNOT FIND THAT VIEW HERE
------------------------------------------------
-- DDL Statements for table ECCM.COMPAT
-- This should be NLSID 1 only because we are only
-- Reoporting on partnumbers
--
-- What is the purpose of joining data to the int table avwwprd
------------------------------------------------
DROP TABLE ECCM.COMPAT;
create summary table eccm.compat
(
  entitytype,
  wwpartnum,
  optionpnumb,
  mtm,
  operatingsys,
  exceptmodel
)
  as
    (
     with avwwprd_tmp (entityid) as

      (

      select
      distinct ofcsol.id1

      from        pcd.csol csol

      join        int.avwwprd prd on
                  prd.prdentitytype = 'CSOL' and
                  prd.prdentityid = csol.entityid and
                  prd.prdnlsid = csol.nlsid

      join        pcd.ofcsol ofcsol on
                  ofcsol.ID2 = csol.entityid

      where       csol.nlsid = 1
      )
      , avwwprd_tmp2 (entityid) as

      (

      select
      distinct    ctoccto.id1

      from        pcd.ccto ccto

      join        int.avwwprd prd on
                  prd.prdentitytype = 'CCTO' and
                  prd.prdentityid = ccto.entityid and
                  prd.prdnlsid = 1

      join        pcd.ctoccto ctoccto on
                  ctoccto.ID2 = ccto.entityid
      where       ccto.nlsid = 1
      )

      select
      distinct    'OFCMPOF',
                  of1.OFFERINGPNUMB,
                  of2.OFFERINGPNUMB,
                  '-',
                  '-',
                  '-'

      from       pcd.ofcmpof ofcmpof

      join        pcd.of of1 on
                  of1.entityid = ofcmpof.ID1 and
                  of1.nlsid = 1

      join        pcd.of of2 on
                  of2.entityid = ofcmpof.ID2 and
                  of2.nlsid = 1

      join        avwwprd_tmp tmp1 on
                  tmp1.entityid = of1.entityid

      join        avwwprd_tmp tmp2 on
                  tmp2.entityid = of2.entityid

      UNION all

      select
      distinct    'CPGOS',
                  of.OFFERINGPNUMB,
                  '-',
                  cpg.MACHTYPE,
                  coalesce(cpgos.CPGOSNAME,'-'),
                  coalesce('NOT SURE','-')

      from        pcd.cpgos cpgos

      join        pcd.cpgcpgos cpgcpgos on
                  cpgcpgos.id2 = cpgos.entityid

      join        pcd.cpg cpg on
                  cpg.entityid = cpgcpgos.id1 and
                  cpg.nlsid = 1

      join        pcd.cpgof cpgof on
                  cpgof.id1 = cpg.entityid

      join        pcd.of of on
                  of.entityid = cpgof.id2 and
                  of.nlsid = 1

      join        avwwprd_tmp tmp on
                  tmp.entityid = of.entityid

      where       cpgos.nlsid = 1

      union ALL

      select
      distinct    'CPGMT',
                  of.OFFERINGPNUMB,
                  '-',
                  cpg.MACHTYPE,
                  '-',
                  '-'

      from        pcd.of of

      join        pcd.cpgof cpgof on
                  cpgof.ID2 = of.entityid

      join        pcd.cpg cpg on
                  cpg.entityid = cpgof.id1 and
                  cpg.nlsid = 1

      join        avwwprd_tmp tmp on
                  tmp.entityid = of.entityid

      where       of.nlsid = 1 and
                  of.entityid not in (select entityid from pcd.ofcpgos)

      union ALL

      select
      distinct    'PSGMTOSOF',
                  cto.COFPNUMB,
                  '-',
                  cpg.MACHTYPE,
                  '-',
                  '-'

      from        pcd.cto cto

      join        pcd.cpgcto cpgcto on
                  cpgcto.id2 = cto.entityid

      join        pcd.cpg cpg on
                  cpg.entityid = cpgcto.id1 and
                  cpg.nlsid = 1

      join        avwwprd_tmp2 tmp on
                  tmp.entityid = cto.entityid

      where       cto.nlsid = 1

  ) DATA INITIALLY DEFERRED REFRESH DEFERRED
  ;
  REFRESH TABLE ECCM.COMPAT;

-----------------------------------------------
-- Used to support SPECT TABLES
-- Converted DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.SBBALLDATES
------------------------------------------------
drop table eccm.sbballdates;
CREATE SUMMARY TABLE eccm.sbballdates

(
  entitytype,
  entityid,
  nlsid,
  sbbid,
  anndate,
  wdate,
)
 as
  (
    select      'CCTO',
                ccto.EntityID,
                ccto.nlsid,
                cctosbb.ID2,
                cctosbb.SBBPUBLISHCTDATE,
                cctosbb.SBBUNPUBLISHCTDATE

    from        pcd.ccto ccto

    join        pcd.cctosbb cctosbb on
                cctosbb.ID1 = ccto.EntityID

    UNION ALL

    select      'CVAR',
                cvar.EntityID,
                cvar.nlsid,
                cvarsbb.ID2,
                CAST(NULL AS DATE),
                CAST(NULL AS DATE)


    from        pcd.cvar cvar

    join        pcd.cvarsbb cvarsbb on
                cvarsbb.ID1 = cvar.EntityID

    UNION ALL

    select      'CVAR',
                cvar.EntityID,
                cvar.nlsid,
                varsbb.ID2,
                CAST(NULL AS DATE),
                CAST(NULL AS DATE)


    from        pcd.cvar cvar

    join        pcd.varcvar varcvar on
                varcvar.ID2 = cvar.EntityID

    join        pcd.varsbb varsbb on
                varsbb.ID1 = varcvar.ID1

) DATA INITIALLY DEFERRED REFRESH DEFERRED;
REFRESH TABLE ECCM.SBBALLDATES;

CREATE INDEX ECCM.SBBALLDATESIDX ON ECCM.SBBALLDATES (ENTITYTYPE ASC, ENTITYID ASC, SBBID ASC) PCTFREE 10 ;

------------------------------------------------
-- Used to support table spec views
-- Converted DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.CCECTRY
------------------------------------------------
DROP TABLE ECCM.CCECTRY;
CREATE SUMMARY TABLE ECCM.CCECTRY AS (

  SELECT
  DISTINCT  COUNTRYCODE

  FROM      ECCM.PSGCTNLS
) DATA INITIALLY DEFERRED REFRESH DEFERRED
--IN ECCMSUMMTS INDEX IN ECCMSUMMTS
;
REFRESH TABLE ECCM.CCECTRY;

-------------------------------------------------
-- Used to support Other required views and tables
-- Converted DWB
-- Compiled DWB
-- ADDed CHildType, CHild ID to help out other views
------------------------------------------------
-- DDL Statements for table ECCM.CBPARTS
------------------------------------------------
drop table eccm.cbparts;
create summary table eccm.cbparts
(
  entitytype,
  entityid,
  nlsid,
  catid,
  PROJECTID,
  BRANDNAME,
  FAMILYNAME,
  SERIESNAME,
  childtype,
  childid

)
  as
  (
 select    'CB' entitytype,
                  cb.entityid entityid,
                  cb.nlsid nlsid,
                  FAM.Familyname || '@' || SE.SeriesName as catid,
                  PR.ENTITYID AS PROJECTID,
                  BR.SUBGROUPNAME AS BRANDNAME,
                  FAM.FAMILYNAME AS FAMILYNAME,
                  SE.SERIESNAME AS SERIESNAME,
                  'CSOL',
                  csol.entityid

        from      pcd.cb cb

        join      pcd.cbcsol cbcsol on
                  cbcsol.id1 = cb.entityid

        join      pcd.csol  csol on
                  csol.entityid = cbcsol.id2 and
                  csol.nlsid = cb.nlsid

        join      pcd.ofcsol  ofcsol on
                  ofcsol.ID2 = cbcsol.id2

        join      pcd.prof prof on
                  prof.id2 = ofcsol.id1

        join      pcd.pr pr on
                  pr.entityid = prof.id1 and
                  pr.nlsid = cb.nlsid

        join      pcd.br br on
                  br.brandcode = pr.brandcode and
                  br.nlsid = pr.nlsid

        join      pcd.fam fam on
                  fam.FAMNAMEASSOC = pr.FAMNAMEASSOC and
                  fam.nlsid = pr.nlsid

        join      pcd.se se on
                  se.SENAMEASSOC = pr.SENAMEASSOC and
                  se.nlsid = pr.nlsid

        where     csol.ACT_WDRAWDATE_CT is not null and
                  csol.ACT_WDRAWDATE_CT < date(current timestamp)

        union ALL

        select    'CB' enitytype,
                  cb.entityid entityid,
                  cb.nlsid nlsid,
                  FAM.Familyname || '@' || SE.SeriesName as catid,
                  PR.ENTITYID AS PROJECTID,
                  BR.SUBGROUPNAME AS BRANDNAME,
                  FAM.FAMILYNAME AS FAMILYNAME,
                  SE.SERIESNAME AS SERIESNAME,
                  'CVAR',
                  cvar.entityid

        from      pcd.cb cb

        join      pcd.cbcvar cbcvar on
                  cbcvar.id1 = cb.entityid

        join      pcd.cvar cvar on
                  cvar.entityid = cbcvar.id2 and
                  cvar.nlsid =cb.nlsid

        join      pcd.varcvar varcvar on
                  varcvar.ID2 = varcvar.id2

        join      pcd.prvar prvar on
                  prvar.id2 = varcvar.id1

        join      pcd.pr pr on
                  pr.entityid = prvar.id1 and
                  pr.nlsid = cb.nlsid

        join      pcd.br br on
                  br.brandcode = pr.brandcode and
                  br.nlsid = pr.nlsid

        join      pcd.fam fam on
                  fam.FAMNAMEASSOC = pr.FAMNAMEASSOC and
                  fam.nlsid = pr.nlsid

        join      pcd.se se on
                  se.SENAMEASSOC = pr.SENAMEASSOC and
                  se.nlsid = pr.nlsid

        where     cvar.ACTWDRAWDATE_CVAR is not null and
                  cvar.ACTWDRAWDATE_CVAR < date(current timestamp)

  )DATA INITIALLY DEFERRED REFRESH DEFERRED;
REFRESH TABLE ECCM.CBPARTS;
CREATE INDEX ECCM.CBPARTSIDX ON ECCM.CBPARTS (ENTITYID ASC, ENTITYTYPE ASC, NLSID ASC) PCTFREE 10 ;

------------------------------------------------
-- SUPPORTS THE TABLE SPEC TABLES
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.PRDROOT
------------------------------------------------
DROP TABLE eccm.prdroot;
create summary table eccm.prdroot
(
  entitytype,
  entityid,
  nlsid,
  partnumber,
  partnumberdescription,
  announcedate,
  withdrawaldate,
  specialbid,
  status,
  solentitytype,
  solentityid,
  modelname,
  ofentitytype,
  ofentityid,
  wwpartnumber,
  contractinvtitle,
  type,
  installopt,
  ratecardcode,
  unspsc,
  unuom,
  projectid,
  lastupdated,
  rglastupdated,
  wwlastupdated,
  publishflag

) as
    (
      select    'CSOL',
                csol.entityid,
                csol.nlsid,
                csol.PNUMB_CT,
                csol.PNUMB_DESC_CT,
                csol.TARG_ANN_DATE_CT,
                csol.TARG_WDRAWDATE_CT,
                of.BAVLFORSPECIALBID,
                csol.CSOLSTATUS,
                'SOL',
                of.entityid,
                of.OFMODELNAME,
                'PSGOF',
                of.entityid,
                of.OFFERINGPNUMB,
                of.OFCONTRCTINVTITLE,
                of.OFFERINGTYPE,
                of.OFINSTOPT,
                of.OFRATECARDCODE,
                of.UNSPSC,
                of.UNUOM,
                prof.ID1,
                csol.VALFROM,
                of.VALFROM,
                of.VALFROM,
                1
                -- csol.publishflag

      from      pcd.csol csol

      join      pcd.ofcsol ofcsol on
                ofcsol.id2 = csol.entityid

      join      pcd.of of on
                of.entityid = ofcsol.id1 and
                of.nlsid = csol.nlsid

      join      pcd.prof prof on
                prof.id2 =  of.entityid

      UNION ALL

      select    'CCTO',
                ccto.entityid,
                ccto.nlsid,
                ccto.CCOSOLPNUMB,
                ccto.CCOSOLPNUMBDESC,
                ccto.CCOSOLTARGANNDATE,
                ccto.CCOSOLTRGWDRAWDAT,
                '',
                ccto.CCOSOLSTATUS,
                'CTO',
                cto.entityid,
                cto.COFMODELNAME,
                'CTO',
                cto.entityid,
                cto.COFPNUMB,
                '',
                '',
                '',
                cto.CVOFRATECARDCODE,
                cto.UNSPSC,
                cto.UNUOM,
                prcto.ID1,
                ccto.VALFROM,
                cto.VALFROM,
                cto.VALFROM,
                1
                --ccto.publishflag

      from      pcd.ccto ccto

      join      pcd.ctoccto ctoccto on
                ctoccto.id2 = ccto.entityid

      join      pcd.cto cto on
                cto.entityid = ctoccto.id1 and
                cto.nlsid = cto.nlsid

      join      pcd.prcto prcto on
                prcto.id2 =  cto.entityid

      UNION ALL

      select    'CVAR',
                cvar.entityid,
                cvar.nlsid,
                cvar.PNUMB_CT,
                cvar.PNUMBDESC_CVAR,
                cvar.TARGANNDATE_CVAR,
                cvar.ACTWDRAWDATE_CVAR,
                '',
                cvar.STATUS_CVAR,
                'var',
                var.entityid,
                var.VARMODELNAME,
                'var',
                var.entityid,
                var.OFFERINGPNUMB,
                '',
                '',
                '',
                var.VARRATECARDCODE,
                var.UNSPSC,
                var.UNUOM,
                prvar.ID1,
                cvar.VALFROM,
                var.VALFROM,
                var.VALFROM,
                1
                --cvar.publishflag

      from      pcd.cvar cvar

      join      pcd.varcvar varcvar on
                varcvar.id2 = cvar.entityid

      join      pcd.var var on
                var.entityid = varcvar.id1 and
                var.nlsid = var.nlsid

      join      pcd.prvar prvar on
                prvar.id2 =  var.entityid

      UNION ALL

      select    'CB',
                cb.entityid,
                cb.nlsid,
                cb.PNUMB_CT,
                cb.PNUMB_DESC_CB,
                cb.TARG_ANN_DATE_CB,
                cb.ACT_WDRAWDATE_CB,
                '',
                cb.CBSOLSTATUS,
                'PSGCB',
                0,
                cb.PNUMB_DESC_CB,
                'PSGCB',
                0,
                cb.PNUMB_CT,
                '',
                '',
                '',
                cb.CBRATECARDCODE,
                '',
                '',
                0,
                cb.valfrom,
                cb.valfrom,
                cb.valfrom,
                1
                --cb.publishflag

                from   pcd.cb cb
) DATA INITIALLY DEFERRED REFRESH DEFERRED
-- IN ECCMSUMMTS INDEX IN ECCMSUMMTS
;
REFRESH TABLE ECCM.PRDROOT;
CREATE INDEX ECCM.I_PRDROOT_OFENID ON ECCM.PRDROOT (OFENTITYID ASC);
CREATE INDEX ECCM.I_PRDROOT_OFENTYPE ON ECCM.PRDROOT (OFENTITYTYPE ASC);
CREATE INDEX ECCM.PRDRINDEX001 ON ECCM.PRDROOT (ENTITYID ASC, ENTITYTYPE ASC, NLSID ASC, PARTNUMBER ASC, PROJECTID ASC) PCTFREE 10;
CREATE INDEX ECCM.WZ2APRDROOT ON ECCM.PRDROOT (PARTNUMBER ASC, LASTUPDATED ASC, ENTITYTYPE ASC, ENTITYID ASC);
CREATE INDEX ECCM.WZ2PRDROOT ON ECCM.PRDROOT(NLSID DESC, PARTNUMBER ASC);
CREATE INDEX INST1.WIZ4836 ON ECCM.PRDROOT (PROJECTID ASC, OFENTITYID ASC, ENTITYTYPE ASC, ENTITYID ASC);

------------------------------------------------
-- DDL Statements for table INT.ATTRLABEL -
------------------------------------------------
CREATE TABLE INT.ATTRLABEL  (
      NLSID INTEGER NOT NULL ,
      ATTRGROUPID INTEGER ,
      ATTRIBUTECODE VARCHAR(32) NOT NULL ,
      ATTRIBUTELABEL VARCHAR(254) ,
      LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
     IN ECCMINTTS INDEX IN ECCMINTXS ;
 ALTER TABLE INT.ATTRLABEL PCTFREE 20;

-- DDL Statements for indexes on Table INT.ATTRLABEL

CREATE INDEX INT.XIE1ATTRLABEL ON INT.ATTRLABEL
    (ATTRIBUTECODE ASC,
     ATTRGROUPID ASC)
    PCTFREE 10 CLUSTER ;

-- DDL Statements for indexes on Table INT.ATTRLABEL

CREATE INDEX INT.XIE2ATTRLABEL ON INT.ATTRLABEL
    (ATTRIBUTELABEL ASC);


-- DDL Statements for primary key on Table INT.ATTRLABEL

ALTER TABLE INT.ATTRLABEL
  ADD PRIMARY KEY
    (NLSID,
     ATTRIBUTECODE);

------------------------------------------------
-- USED TO SUPPORT VIEWS THAT ARE IN THE TABLE SPEc
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.PACKAGE1
------------------------------------------------
drop table eccm.package1;
create summary table eccm.package1
(
  entitytype,
  entityid,
  nlsid,
  wunits,
  weight,
  width,
  height,
  dunits,
  depth
) AS (

  SELECT
  distinct      p.parententitytype,
                p.parententityid,
                p.nlsid,
                case a.attributetoken when 'PSGB1WEIGHTUNITS_US' then substr(p.value,1,5) else ' ' end,
                case a.attributetoken when 'PSGB1WEIGHT_US' then substr(p.value,1,5) else ' ' end,
                case a.attributetoken when 'PSGB1WIDTH_US' then substr(p.value,1,5) else ' ' end,
                case a.attributetoken when 'PSGB1HEIGHT_US' then substr(p.value,1,5) else ' ' end,
                case a.attributetoken when 'PSGB1DEPTHUNITS_US' then substr(p.value,1,5) else ' ' end,
                case a.attributetoken when 'PSGB1DEPTH_US' then substr(p.value,1,5) else ' ' end

  FROM          eccm.prodattribute p,
                eccm.attribute a

  where         p.attributecode =a.attributecode and
                a.attributetoken IN (
                  'PSGB1WEIGHTUNITS_US',
                  'PSGB1WEIGHT_US',
                  'PSGB1WIDTH_US',
                  'PSGB1HEIGHT_US',
                  'PSGB1DEPTHUNITS_US',
                  'PSGB1DEPTH_US'
                )
) DATA INITIALLY DEFERRED REFRESH DEFERRED;
REFRESH TABLE ECCM.PACKAGE1;
CREATE INDEX ECCM.PK1INDEX ON ECCM.PACKAGE1(ENTITYID ASC, ENTITYTYPE ASC,NLSID ASC);


----------------------------------
-- SUPPORTS OTHER TABLE SPEC NEEDS
-- CONVERTED DWB
-- COMPILED DWB
-- ADDED NLSID
----------------------------------
DROP VIEW eccm.package;
CREATE VIEW eccm.package
----------------------------------
(
    entitytype,
    entityid,
    nlsid,
    wunits,
    weight,
    width,
    height,
    dunits,
    depth
 ) AS

    SELECT    entitytype,
              entityid,
              nlsid,
              MAX(wunits),
              MAX(weight),
              MAX(width),
              MAX(height),
              MAX(dunits),
              MAX(depth)

    FROM      eccm.package1

    GROUP BY  entitytype,
              entityid,
              nlsid
;
-----------------------------------
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------
DROP TABLE ECCM.ATTRGROUP;
CREATE TABLE ECCM.ATTRGROUP
(ID  INT NOT NULL,
 NLSID INT,
 AUDIENCE_FLAG VARCHAR(18),
 GROUPDESCRIPTION VARCHAR (254),
 GROUPNAME VARCHAR(96),
 GROUPSORT INT,
 GROUPTOKEN VARCHAR (36),
 LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP
 )
;
ALTER TABLE ECCM.ATTRGROUP PCTFREE 10;
ALTER TABLE ECCM.ATTRGROUP ADD CONSTRAINT SQL020920182254000 PRIMARY KEY (ID);

CREATE INDEX ECCM.WZ1ATTRGROUP ON ECCM.ATTRGROUP(GROUPTOKEN,NLSID,LASTUPDATED,GROUPSORT,GROUPNAME,GROUPDESCRIPTION,AUDIENCE_FLAG,ID);
CREATE INDEX ECCM.XIE1ATTRGROUP ON  ECCM.ATTRGROUP(NLSID,AUDIENCE_FLAG);


--------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
--------------------------------
DROP VIEW int.attrgroups;
CREATE VIEW int.attrgroups
AS
    SELECT    grouptoken,
              groupname

    FROM      eccm.attrgroup

    UNION

    SELECT    grouptoken,
              groupname

    FROM     int.eccmatgp

;

----------------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
----------------------------------------
DROP VIEW eccm.wwcat;
CREATE VIEW eccm.wwcat
(
  countrycode,
  language,
  categoryidentifier,
  parentidentifier,
  source
) AS (

  SELECT      cat.countrycode,
              cat.language,
              cat.catidentifier,
              cat.catidentifier,
             'ECCM'

   FROM      int.avwwcat cat

   WHERE     posstr(cat.catidentifier, '@') <> 0
 );

-----------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
------------------------------------------------
-- DDL Statements for table ECCM.PROD_RATE_CARD
------------------------------------------------
DROP TABLE ECCM.PROD_RATE_CARD;
CREATE TABLE ECCM.PROD_RATE_CARD  (
    RATECARDCODE CHAR(10) NOT NULL ,
    COUNTRYCODE CHAR(3) NOT NULL ,
    SHIPPINGCONDITION CHAR(2) NOT NULL ,
    PRICEVALIDFROMDATE DATE NOT NULL ,
    PRICEAMOUNT DECIMAL(16,3) ,
    CURRENCYCODE CHAR(5) ,
    PRICEVALIDTODATE DATE ,
    SOURCESYSTEM VARCHAR(10) ,
    LASTUPDATED TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP)
IN TSPACE01 INDEX IN ISPACE01 LONG IN LSPACE06;
ALTER TABLE ECCM.PROD_RATE_CARD PCTFREE 10;

CREATE INDEX ECCM.WZ1PROD_RATE_CARD1 ON ECCM.PROD_RATE_CARD
  (RATECARDCODE ASC,
   COUNTRYCODE ASC,
   SHIPPINGCONDITION ASC,
   PRICEVALIDTODATE ASC,
   LASTUPDATED ASC,
   SOURCESYSTEM ASC,
   CURRENCYCODE ASC,
   PRICEAMOUNT ASC,
   PRICEVALIDFROMDATE ASC);

CREATE INDEX ECCM.XIE1PROD_RATE_CARD ON ECCM.PROD_RATE_CARD (COUNTRYCODE ASC) PCTFREE 10 CLUSTER ;
ALTER TABLE ECCM.PROD_RATE_CARD ADD PRIMARY KEY (RATECARDCODE, COUNTRYCODE, SHIPPINGCONDITION,PRICEVALIDFROMDATE);


----------------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
----------------------------------------
DROP VIEW eccm.ratecarddesc_vw;
CREATE VIEW eccm.ratecarddesc_vw
AS
    SELECT
    DISTINCT    rc.countrycode,
                isolangcode2 AS language,
                shippingcondition

    FROM        eccm.prod_rate_card rc,
                eccm.psgctnls ctnls,
                eccm.psgnls nls

    WHERE       ctnls.countrycode = rc.countrycode and
                ctnls.nlsid = nls.nlsid
 ;

----------------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
----------------------------------------
DELETE VIEW INT.AVOUTPRD;
CREATE VIEW int.avoutprd
----------------------------------------
(
  PRDSKU,
  PRDENTITYTYPE,
  PRDENTITYID,
  PRDNLSID,
  PARTNUMBER,
  COUNTRYCODE,
  LANGUAGE,
  PRODUCTCLASS,
  AUDIENCE,
  AUXDESC1,
  AUXDESC2,
  SHORTDESC,
  ANNOUNCEDATE,
  WITHDRAWDATE,
  FOTANNOUNCEDATE,
  FOTWITHDRAWDATE,
  NAVBARFILENAME,
  CONFIGURATORID,
  FOTSTATUS,
  WWPARTNUM,
  INSTALLABLE,
  BASESYSTEM,
  SERVICETYPE,
  SPECIALBID,
  SBBTYPE,
  UNSPSC,
  UNUOM,
  PUB_FLAG,
  REVIEWPUB_FLAG,
  LASTUPDATED,
  REFRESHTIME,
  VALID_FLAG,
  SBBGADATE,
  INSTALLABLE_OVERRIDE
) AS (

  SELECT      prdsku,
              prdentitytype,
              prdentityid,
              prdnlsid,
              partnumber,
              countrycode,
              language,
              productclass,
              audience,
              auxdesc1,
              auxdesc2,
              shortdesc,
              announcedate,
              withdrawdate,
              fotannouncedate,
              fotwithdrawdate,
              navbarfilename,
              configuratorid,
              fotstatus,
              wwpartnum,
              installable,
              basesystem,
              servicetype,
              specialbid,
              sbbtype,
              unspsc,
              unuom,
              pub_flag,
              reviewpub_flag,
              lastupdated,
              refreshtime,
              valid_flag,
              announcedate AS DATE,
              installable_override

  FROM        int.avwwprd

  UNION

  SELECT      RTRIM(sbb.SBBPNUMB) || '_' || RTRIM(ct.countrycode) || '_' || RTRIM(language.isolangcode2),
              'SBB',
              sbb.entityid,
              sbb.nlsid,
              sbb.SBBPNUMB,
              ct.countrycode,
              language.isolangcode2,
              'SBB',
              'ALL',
              '',
              '',
              sbb.SBBPNUMBDESC,
              sbb.SBBANNOUNCETGT,
              sbb.SBBWITHDRAWLDATE,
              sbb.SBBANNOUNCETGT - 21 days,
              sbb.SBBWITHDRAWLDATE,
              '',
              '',
              sbb.SBBSTATUS,
              sbb.SBBPNUMB,
              0,
              0,
              '',
              '',
              sbb.SBBTYPE,
              '',
              '',
              1,
              1,
              sbb.VALFROM,
              sbb.VALFROM,
              1,
              sbb.SBBANNOUNCETGT,
              1

  FROM        int.avwwprd prd

  JOIN        pcd.cctosbb cctosbb on
              cctosbb.id2 = prd.prdentityid

  JOIN        pcd.sbb sbb on
              sbb.entityid = cctosbb.id2 and
              sbb.nlsid = prd.prdnlsid

  JOIN        eccm.psgnls language on
              language.nlsid = prd.prdnlsid

  JOIN        eccm.productcountry ct on
              ct.parententityid = cctosbb.id2 and
              ct.parententitytype = 'CCTO'

  WHERE       (cctosbb.SBBPUBLISHCTDATE  is NULL OR cctosbb.SBBPUBLISHCTDATE  >= current date) and
              (cctosbb.SBBUNPUBLISHCTDATE is NULL OR cctosbb.SBBUNPUBLISHCTDATE <= current date) and
              prd.prdentitytype = 'CCTO'

  UNION

  SELECT      RTRIM(sbb.SBBPNUMB) || '_' || RTRIM(ct.countrycode) ||
              '_' || RTRIM(language.isolangcode2),
              'SBB',
              sbb.entityid,
              sbb.nlsid,
              sbb.SBBPNUMB,
              ct.countrycode,
              language.isolangcode2,
              'SBB',
              'ALL',
              '',
              '',
              sbb.SBBPNUMBDESC,
              sbb.SBBANNOUNCETGT,
              sbb.SBBWITHDRAWLDATE,
              sbb.SBBANNOUNCETGT - 21 days,
              sbb.SBBWITHDRAWLDATE,
              '',
              '',
              sbb.SBBSTATUS,
              sbb.SBBPNUMB,
              0,
              0,
              '',
              '',
              sbb.SBBTYPE,
              '',
              '',
              1,
              1,
              sbb.VALFROM,
              sbb.VALFROM,
              1,
              sbb.SBBANNOUNCETGT,
              1

  FROM        int.avwwprd prd

  JOIN        pcd.cvarsbb cvarsbb on
              cvarsbb.id2 = prd.prdentityid

  JOIN        pcd.sbb sbb on
              sbb.entityid = cvarsbb.id2 and
              sbb.nlsid = prd.prdnlsid

  JOIN        eccm.psgnls language on
              language.nlsid = prd.prdnlsid

  JOIN        eccm.productcountry ct on
              ct.parententityid = cvarsbb.id2 and
              ct.parententitytype = 'CVAR'

  WHERE       prd.prdentitytype = 'CVAR'

);

-----------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- CONVERTED DWB
-- COMPILE DWB
-- REMOVED ONE UNION..Inthe WITH CLAUSE..LOOKED
-- LIKE A DUMPLICATE
-----------------------------------------------
DROP VIEW ECCM.PACK_COMPLETE;
CREATE VIEW eccm.pack_complete
(
  partnumber,
  country,
  weight,
  weightunits,
  depth,
  depthunits,
  height,
  width
) AS

    WITH pack_temp
    (
      partnumber,
      country,
      weight,
      weightunits,
      depth,
      depthunits,
      height,
      width
    ) AS (

      SELECT
      DISTINCT      RTRIM(csol.PNUMB_CT),
                    RTRIM(ct.countrycode),
                    weight,
                    wunits,
                    depth,
                    dunits,
                    height,
                    width

      FROM          eccm.package of

      JOIN          pcd.ofcsol ofcsol on
                    ofcsol.id1 = of.entityid

      JOIN          pcd.csol csol on
                    csol.entityid = ofcsol.id1 and
                    csol.nlsid = of.nlsid

      JOIN          eccm.productcountry ct on
                    ct.parententityid =  csol.entityid and
                    ct.nlsid = csol.nlsid

      WHERE         of.entitytype = 'OF' and
                    (csol.entityid, csol.nlsid) IN (

                    SELECT
                    DISTINCT    prdentityid,
                                prdnlsid

                    FROM        int.avoutprd

                    WHERE       prdentitytype ='CSOL' and
                                ct.countrycode = int.avoutprd.countrycode
                    )

   )

   SELECT
   DISTINCT     pt.partnumber,
                country,
                weight,
                weightunits,
                depth,
                depthunits,
                height,
                width

   FROM         pack_temp pt,
                int.avprice_state pp

   WHERE        country = countrycode and
                pt.partnumber = pp.partnumber and
                distributionchannel = '00'and
                (callforquote ='0' OR callforquote = '1') and
                current date BETWEEN date(pricevalidfromdate) and date(pricevalidtodate)
;
                                          ;

-----------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
-----------------------------------------
DELETE VIEW eccm.wwprdctry;
CREATE VIEW eccm.wwprdctry
-----------------------------------------
(
  PARTNUMBER,
  ENTITYTYPE,
  ENTITYID,
  NLSID,
  COUNTRYCODE,
  LANGUAGE,
  AUDIENCE,
  QUANTITY,
  NEW_FLAG,
  BUYABLE_FLAG,
  ADDTOCART_FLAG,
  CUSTOMIZE_FLAG,
  FOCUS_FLAG,
  HIDE_FLAG,
  REFRESHTIME,
  PRODUCTCLASS,
  RATETYPE,
  COUNTRY_NEWFLAG,
  LASTUPDATED
) AS

  SELECT      prd.partnumber,
              prd.prdentitytype,
              prd.prdentityid,
              prd.prdnlsid,
              prd.countrycode,
              prd.language,
              multi.longdescription,
              dac.available_quantity,
              prdavail.new_flag,
              prdavail.buyable_flag,
              prdavail.addtocart_flag,
              prdavail.customize_flag,
              prdavail.focus_flag,
              prdavail.hide_flag ,
              prd.refreshtime,
              prd.productclass,
              prdavail.ratetype,
              CASE WHEN
                current date - date(prd.announcedate) <= newdate.numberofdays THEN 1 ELSE 0
              END,
              dac.lastupdated

  FROM        int.avwwprd prd

  JOIN        eccm.audience multi on
              multi.entityid = prd.prdentityid and
              multi.entityname = prd.prdentitytype and
              multi.nlsid = prd.prdnlsid

  LEFT JOIN   int.dacavail dac on
              dac.partnumber = prd.partnumber and
              dac.countrycode = prd.countrycode and
              multi.longdescription = 'SHOP'

  LEFT JOIN   int.avprdavail prdavail on
              prd.partnumber = prdavail.partnumber and
              prd.countrycode = prdavail.countrycode and
              prd.language = prdavail.language and
              multi.longdescription = prdavail.audience

  LEFT JOIN   int.newflagdates newdate on
              prd.countrycode = newdate.countrycode

;

--------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- CONVERTED DWB (ADDED NLS)
-- COMPILED DWB
--------------------------------------
DROP VIEW ECCM.VARIANTATTR;
CREATE VIEW eccm.variantattr
-------------------------------------
(
    parententitytype,
    parententityid,
    nlsid,
    attributetoken,
    value
) AS (

      SELECT      'CVAR',
                  cvar.entityid,
                  cvar.nlsid,
                  'WW_' || attr.attributetoken,
                  prdat.value

      FROM        pcd.cvar cvar

      JOIN        pcd.cvarsbb cvarsbb on
                  cvarsbb.id1 = cvar.entityid

      JOIN        eccm.prodattribute prdat on
                  prdat.parententityid = cvarsbb.ID2 and
                  prdat.parententitytype = 'PSGSBB' and
                  prdat.nlsid = cvar.nlsid

      JOIN        eccm.attribute attr on
                  prdat.attributecode = attr.attributecode
 );

-------------------------------------------
-- USED IN SUPPORT OF THE TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
-------------------------------------------
CREATE VIEW eccm.catcatrel
(
  parentidentifier,
  childidentifier
) AS (

      SELECT
      DISTINCT      'PSG',
                    fam.familyname
      FROM          eccm.projserbrandfam fam

      UNION ALL

      SELECT        fam.familyname,
                    fam.famsername

      FROM          eccm.projserbrandfam fam

      UNION ALL

      SELECT
      DISTINCT      fam.famsername,
                    fam.famsername || '@' || of.OPTGROUPNAME

      FROM          eccm.projserbrandfam fam

      JOIN          pcd.prof  prof on
                    prof.id1 = fam.projectid

      JOIN          pcd.of of on
                    of.entityid = prof.id2 and
                    of.nlsid = fam.nlsid

      WHERE         (of.OPTGROUPNAME <> '' or of.OPTGROUPNAME IS NOT NULL) and
                    of.nlsid <> 8

      UNION ALL

      SELECT
      DISTINCT      fam.famsername || '@' || of.OPTGROUPNAME,
                    fam.famsername || '@' || of.OPTGROUPNAME || '@' || of.subgroup

      FROM          eccm.projserbrandfam fam

      JOIN          pcd.prof  prof on
                    prof.id1 = fam.projectid

      JOIN          pcd.of of on
                    of.entityid = prof.id2 and
                    of.nlsid = fam.nlsid

      WHERE         of.subgroup <> ''  and
                    of.OPTGROUPNAME <> '' and
                    of.nlsid <> 8
 );

-------------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- TOOK OUT THE REFERENCE TO BR
-- CONVERTED DWB
-- COMPILED DWB
-------------------------------------------------
DROP VIEW eccm.catroot;
CREATE VIEW eccm.catroot
-------------------------------------------------
(
  CATEGORYIDENTIFIER,
  COUNTRYCODE,
  LANGUAGE,
  PARENTIDENTIFIER,
  NAMEDESC,
  ENTITYTYPE,
  ENTITYID,
  NLSID,
  SOURCE,
  LASTUPDATED
) AS

  SELECT
  DISTINCT        fam.familyname,
                  ctnls.countrycode,
                  nls.isolangcode2,
                  '',
                  fam.familyname,
                  'FAM',
                  fam.familyid,
                  fam.nlsid,
                  '',
                  current timestamp

  FROM            eccm.psgctnls ctnls,
                  eccm.projserbrandfam fam,
                  eccm.psgnls nls

  WHERE           ctnls.nlsid = nls.nlsid and
                  fam.nlsid= ctnls.nlsid

  UNION

  SELECT
  DISTINCT        fam.famsername,
                  ctnls.countrycode,
                  nls.isolangcode2,
                  fam.familyname,
                  fam.seriesname,
                  'SE',
                  fam.seriesid,
                  fam.nlsid,
                  '',
                  current timestamp

  FROM            eccm.psgctnls ctnls,
                  eccm.projserbrandfam fam,
                  eccm.psgnls nls

  WHERE           ctnls.nlsid = nls.nlsid and
                  fam.nlsid= ctnls.nlsid
  UNION

  SELECT
  DISTINCT        cat.catidentifier,
                  ctnls.countrycode,
                  nls.isolangcode2,
                  cat.parentidentifier,
                  '',
                  '',
                  0,
                  1,
                  'ECCM',
                  current timestamp

   FROM           eccm.psgctnls ctnls,
                  int.avcatcatrel cat,
                  eccm.psgnls nls

   WHERE          ctnls.nlsid = nls.nlsid and
                  cat.relationshiponly = 'N'

   UNION

   SELECT
   DISTINCT         cat.parentidentifier,
                  ctnls.countrycode,
                  nls.isolangcode2,
                  '',
                  '',
                  '',
                  0,
                  1,
                  'ECCM',
                  current timestamp

 FROM             eccm.psgctnls ctnls,
                  int.avcatcatrel cat,
                  eccm.psgnls nls

 WHERE            ctnls.nlsid = nls.nlsid and
                  cat.parentidentifier NOT IN (
                      SELECT    catidentifier
                      FROM      int.avcatcatrel
                      WHERE     relationshiponly = 'N'
                  )
 UNION

 SELECT
 DISTINCT         psbf.famsername ||'@'|| of.OPTGROUPNAME,
                  ctnls.countrycode,
                  nls.isolangcode2,
                  psbf.famsername,
                  of.OPTGROUPNAME,
                  '',
                  0,
                  of.nlsid,
                  '',
                  current timestamp

  FROM            eccm.projserbrandfam psbf

  JOIN            pcd.prof prof on
                  prof.id1 = psbf.projectid

  JOIN            pcd.of of on
                  of.entityid = prof.id2 and
                  of.nlsid = psbf.nlsid

                  ,
                  eccm.psgctnls ctnls,
                  eccm.psgnls nls

  WHERE           ctnls.nlsid = nls.nlsid and
                  ctnls.nlsid = psbf.nlsid and
                  ctnls.nlsid <> 8 and
                  of.OPTGROUPNAME IS NOT NULL and
                  of.OPTGROUPNAME <> ''
  UNION

  SELECT
  DISTINCT        psbf.famsername || '@'||  of.OPTGROUPNAME ||  '@' || of.subgroup,
                  ctnls.countrycode,
                  nls.isolangcode2,
                  psbf.famsername || '@'||  of.OPTGROUPNAME,
                  of.subgroup,
                  '',
                  0,
                  of.nlsid,
                  '',
                  current timestamp

  FROM            eccm.projserbrandfam psbf

  JOIN            pcd.prof prof on
                  prof.id1 = psbf.projectid

  JOIN            pcd.of of on
                  of.entityid = prof.id2 and
                  of.nlsid = psbf.nlsid

                  ,
                  eccm.psgctnls ctnls,
                  eccm.psgnls nls

  WHERE           ctnls.nlsid = nls.nlsid and
                  ctnls.nlsid = psbf.nlsid and
                  ctnls.nlsid <> 8 and
                  of.OPTGROUPNAME IS NOT NULL and
                  of.OPTGROUPNAME <> '' and
                  of.SUBGROUP IS NOT NULL and
                  of.SUBGROUP <> ''
;

--------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
--------------------------------------------
CREATE VIEW int.avprice_state_v
(
  partnumber,
  ctovariantpartnumber,
  countrycode,
  distributionchannel,
  pricevalidtodate,
  pricetype,
  materialstatus,
  materialstatusdate,
  priceamount,
  currencycode,
  pricevalidfromdate,
  callforquote,
  state,
  precedence,
  sourcesystem,
  markedfordeletion,
  lastupdated,
  delta_ts
) AS (

      SELECT    price.partnumber,
                price.ctovariantpartnumber,
                price.countrycode,
                price.distributionchannel,
                price.pricevalidtodate,
                price.pricetype,
                price.materialstatus,
                price.materialstatusdate,
                price.priceamount,
                price.currencycode,
                price.pricevalidfromdate,
                price.callforquote,
                price.state, price.precedence,
                price.sourcesystem,
                price.markedfordeletion,
                price.lastupdated,
                price.delta_ts

      FROM      int.avprice_state price

      WHERE     price.ctovariantpartnumber = '-'

      UNION

      SELECT    price.partnumber,
                price.ctovariantpartnumber,
                price.countrycode,
                price.distributionchannel,
                price.pricevalidtodate,
                price.pricetype,
                price.materialstatus,
                price.materialstatusdate,
                price.priceamount,
                price.currencycode,
                price.pricevalidfromdate,
                price.callforquote,
                price.state,
                price.precedence,
                price.sourcesystem,
                price.markedfordeletion,
                price.lastupdated,
                price.delta_ts

      FROM      int.avwwprd prd

      JOIN      eccm.sbballdates a ON
                prd.prdentityid = a.entityid AND
                prd.prdentitytype = a.entitytype and
                prd.prdnlsid = a.nlsid and
                prd.prdentitytype = 'CCTO'

      JOIN      pcd.sbb sbb on
                sbb.entityid = a.sbbid and
                sbb.nlsid = prd.prdnlsid

      JOIN      int.avprice_state price on
                prd.partnumber = price.partnumber and
                sbb.SBBPNUMB = price.ctovariantpartnumber and
                prd.countrycode = price.countrycode

      WHERE     prd.productclass = 'CTO' AND
                price.ctovariantpartnumber <> '-' and
                (a.wdate is NULL OR a.wdate >= current date)
);

-------------------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
-------------------------------------------
DROP VIEW eccm.wwcatcatrel
CREATE VIEW eccm.wwcatcatrel
(
  PARENTIDENTIFIER,
  CHILDIDENTIFIER,
  COUNTRYCODE,
  AUDIENCE,
  MASTNAV,
  PUB_FLAG,
  SEQUENCE,
  SOURCE
) AS (

    SELECT      COALESCE(avcatrel.parentidentifier, cat.parentidentifier),
                cat.childidentifier,
                ctry.countrycode,
                'LE',
                'M',
                avcat.pub_flag,
                avcat.sequence,
                ''

    FROM        eccm.catcatrel cat

    JOIN        eccm.ccectry ctry on
                1 = 1
    LEFT JOIN   int.avcatcatseq avcat on
                cat.parentidentifier = avcat.parentidentifier and
                cat.childidentifier =avcat.catidentifier and
                ctry.countrycode = avcat.countrycode and
                avcat.audience = 'LE'

    LEFT JOIN   int.avcatcatrel avcatrel on
                cat.childidentifier = avcatrel.catidentifier and
                avcatrel.mastnav = 'M'
    UNION

    SELECT      COALESCE(avcatrel.parentidentifier, cat.parentidentifier),
                cat.childidentifier,
                ctry.countrycode,
                'SHOP',
                'M',
                avcat.pub_flag,
                avcat.sequence,
                ''
    FROM        eccm.catcatrel cat

    JOIN        eccm.ccectry ctry on
                1 = 1

    LEFT JOIN   int.avcatcatseq avcat on
                cat.parentidentifier = avcat.parentidentifier and
                cat.childidentifier = avcat.catidentifier and
                ctry.countrycode = avcat.countrycode and
                avcat.audience = 'SHOP'

    LEFT JOIN   int.avcatcatrel avcatrel on
                cat.childidentifier = avcatrel.catidentifier and
                avcatrel.mastnav = 'M'

    UNION

    SELECT      cat.parentidentifier,
                cat.catidentifier,
                ctry.countrycode,
                'LE',
                cat.mastnav,
                avcat.pub_flag,
                avcat.sequence,
                cat.source

    FROM        int.avcatcatrel cat

    JOIN        eccm.ccectry ctry on
                1 = 1

    LEFT JOIN   int.avcatcatseq avcat on
                cat.parentidentifier = avcat.parentidentifier and
                cat.catidentifier = avcat.catidentifier and
                ctry.countrycode = avcat.countrycode and
                avcat.audience = 'LE'

    WHERE       NOT (

                cat.mastnav = 'M' and
                cat.catidentifier IN (

                    SELECT

                    DISTINCT        childidentifier

                    FROM            eccm.catcatrel
                ))

    UNION

    SELECT      cat.parentidentifier,
                cat.catidentifier,
                ctry.countrycode,
                'SHOP',
                cat.mastnav,
                avcat.pub_flag,
                avcat.sequence,
                cat.source

    FROM        int.avcatcatrel cat

    JOIN        eccm.ccectry ctry on
                1 = 1

    LEFT JOIN   int.avcatcatseq avcat on
                cat.parentidentifier = avcat.parentidentifier and
                cat.catidentifier = avcat.catidentifier and
                ctry.countrycode = avcat.countrycode and
                Upper(avcat.audience) = 'SHOP'

    WHERE       NOT (cat.mastnav = 'M'AND
                     cat.catidentifier IN (
                       SELECT
                       DISTINCT   childidentifier
                        FROM      eccm.catcatrel
                    )
                )

    UNION

    SELECT      'PSG',
                cat.parentidentifier,
                ctry.countrycode,
                'SHOP',
                'M',
                1,
                1,
                'ECCM'

    FROM        int.avcatroot cat

    JOIN        eccm.ccectry ctry on
                1 = 1

    WHERE       cat.parentidentifier <> 'Popular Models' and
                cat.parentidentifier NOT IN (
                      SELECT    catidentifier
                      FROM      int.avcatcatrel
                      WHERE     mastnav = 'M'
                )

    UNION

    SELECT      'PSG',
                cat.parentidentifier,
                ctry.countrycode,
                'LE',
                'M',
                1,
                1,
                'ECCM'

    FROM        int.avcatroot cat

    JOIN        eccm.ccectry ctry on
                1 = 1

    WHERE       cat.parentidentifier <> 'Popular Models' AND
                cat.parentidentifier NOT IN (
                    SELECT    catidentifier
                    FROM      int.avcatcatrel
                    WHERE     mastnav = 'M'
                )
    );

--------------------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
-------------------------------------------
DROP VIEW eccm.wwprdprdrel;
CREATE VIEW  eccm.wwprdprdrel
--------------------------------------------
(
  PARENTPARTNUMBER,
  CHILDPARTNUMBER,
  COUNTRYCODE,
  AUDIENCE,
  PRODUCTCLASS,
  SCHEDULERELEV,
  SBBANNOUNCEDATE,
  SBBWITHDRAWDATE,
  SEQUENCE,
  PUB_FLAG,
  REFRESHTIME,
  CHILDSTATUS
) AS
  (
      SELECT
      DISTINCT    prd.partnumber,
                  sbb.SBBPNUMB,
                  prd.countrycode,
                  multi.longdescription,
                  prd.productclass,
                  sbb.SBBPLANNINGRELEV,
                  a.anndate,
                  a.wdate,
                  seq.sequence,
                  seq.pub_flag,
                  prd.refreshtime,
                  sbb.SBBSTATUS

      FROM        int.avwwprd prd

      JOIN        eccm.sbballdates a on
                  a.entityid = prd.prdentityid and
                  a.entitytype = prd.prdentitytype and
                  a.nlsid = prd.prdnlsid

      JOIN        pcd.sbb sbb on
                  sbb.entityid = a.sbbid and
                  sbb.nlsid = a.nlsid

      JOIN        eccm.audience multi on
                  multi.entityid = prd.prdentityid and
                  multi.entityname = prd.prdentitytype and
                  multi.nlsid = prd.prdnlsid

      LEFT JOIN   int.avprdprdseq seq on
                  seq.parentpartnumber = prd.partnumber  and
                  seq.childpartnumber = sbb.SBBPNUMB and
                  seq.countrycode = prd.countrycode

      WHERE       ((prd.prdentitytype IN ('CCTO') and prd.productclass = 'CTO') or
                   (prd.prdentitytype IN ('CVAR') and prd.productclass = 'V')) and
                  ((a.wdate is NULL) OR  (a.wdate >=current date))
      UNION ALL

      SELECT
      DISTINCT    prd.partnumber,
                  childprd.partnumber,
                  prd.countrycode,
                  multi.longdescription,
                  prd.productclass,
                  CAST(NULL AS DATE),
                  CAST(NULL AS DATE),
                  '',
                  seq.sequence,
                  seq.pub_flag,
                  prd.refreshtime,
                  childprd.fotstatus

      FROM        int.avwwprd prd

      JOIN        eccm.cbparts cbs ON
                  prd.prdentitytype = cbs.entitytype and
                  prd.prdentityid = cbs.entityid and
                  cbs.nlsid = prd.prdnlsid


      JOIN        int.avwwprd childprd ON
                  childprd.prdentitytype  = cbs.childtype and
                  childprd.prdentityid = cbs.childid and
                  childprd.prdnlsid = prd.prdnlsid

      JOIN        int.effectiveprice price ON
                  price.parentpartnumber = childprd.partnumber and
                  price.countrycode = childprd.countrycode

      JOIN        eccm.audience multi on
                  multi.entityid = prd.prdentityid and
                  multi.entityname = prd.prdentitytype and
                  multi.nlsid = prd.prdnlsid

      LEFT JOIN   int.avprdprdseq seq on
                  seq.parentpartnumber = prd.partnumber  and
                  seq.childpartnumber = childprd.partnumber and
                  seq.countrycode = prd.countrycode

      WHERE       (prd.prdentitytype IN ('CB') and prd.productclass = 'CB')
  );

------------------------------------------
-- Called out in Table SPec
-- Converted DWB
-- COMPILED DWB
-- Added NLS ID
------------------------------------------
CREATE VIEW eccm.ctattr
------------------------------------------

(
  parententitytype,
  parententityid,
  nlsid,
  attributetoken,
  value
) AS (

      SELECT    prdat.parententitytype,
                prdat.parententityid,
                prdat.nlsid,
                RTRIM('CT_' || at.attributetoken),
                prdat.value

      FROM      eccm.prodattribute prdat

      JOIN      eccm.attribute at on
                prdat.attributecode = at.attributecode and
                at.nlsid = prdat.nlsid

      WHERE     prdat.parententitytype = 'CSOL'

      UNION ALL

      SELECT    'CSOL',
                csol.entityid,
                csol.nlsid,
                case so.SOPRODCATEGORY
                  when 'Device Driver' Then 'CT_SODEVICE'
                  when 'MailSystem' Then'CT_SOMAIL'
                  When 'Multimedia' Then 'CT_SOMULTI'
                  When 'NetworkCommunications' Then 'CT_SONET'
                  When 'OptionalSoftware' Then'CT_SOOPT'
                  When 'Other' Then 'CT_SOOTH'
                  When 'Productivity' Then 'CT_SOPRD'
                 END,
                so.SOFTWARETITLE

      FROM      pcd.csol csol

      join      pcd.csolso csolso on
                csolso.id1 = csol.entityid

      join      pcd.so so on
                so.entityid = csolso.id2 and
                so.nlsid = csol.nlsid and
                so.SOPRODCATEGORY IN
                  ('Device Driver'
                  ,'MailSystem'
                  ,'Multimedia'
                  ,'NetworkCommunications'
                  ,'OptionalSoftware'
                  ,'Other'
                  ,'Productivity')
);

-----------------------------------------
-- Called out in Table Spec
-- Converted DWB
-- Added NLS ID
-- COMPILED DWB
----------------------------------------
CREATE VIEW eccm.wwattr
----------------------------------------
(
  parententitytype,
  parententityid,
  parentnlsid,
  attributetoken,
  value)

AS  (
      SELECT    prdat.parententitytype,
                prdat.parententityid,
                prdat.nlsid,
                RTRIM('WW_' || at.attributetoken),
                prdat.value

      FROM      eccm.prodattribute prdat

      JOIN      eccm.attribute at ON
                prdat.attributecode = at.attributecode

      WHERE     prdat.parententitytype = 'OF'

      UNION ALL

      SELECT    'OF',
                of.entityid,
                of.nlsid,
                case so.SOPRODCATEGORY
                  when 'Device Driver' Then 'CT_SODEVICE'
                  when 'MailSystem' Then'CT_SOMAIL'
                  When 'Multimedia' Then 'CT_SOMULTI'
                  When 'NetworkCommunications' Then 'CT_SONET'
                  When 'OptionalSoftware' Then'CT_SOOPT'
                  When 'Other' Then 'CT_SOOTH'
                  When 'Productivity' Then 'CT_SOPRD'
                 END,
                so.SOFTWARETITLE

      FROM      pcd.of of

      join      pcd.ofso ofso on
                ofso.id1 = of.entityid

      join      pcd.so so on
                so.entityid = ofso.id2 and
                so.nlsid = of.nlsid and
                so.SOPRODCATEGORY IN
                  ('Device Driver'
                  ,'MailSystem'
                  ,'Multimedia'
                  ,'NetworkCommunications'
                  ,'OptionalSoftware'
                  ,'Other'
                  ,'Productivity')

   );

--------------------------------------------
-- CALLED OUT IN TABLE SPEC
-- CONVERTED DWB
-- COMPILED DWB
--------------------------------------------
CREATE VIEW eccm.wwcatmtmrel
--------------------------------------------
(
    identifier,
    partnumber,
    mastnav,
    countrycode,
    language,
    audience,
    sequence
)
  AS (

      SELECT      psbf.FAMSERNAME,
                  prd.partnumber,
                  'M',
                  prd.countrycode,
                  prd.language,
                  multi.longdescription,
                  seq.sequence

      FROM        int.avwwprd prd

      JOIN        eccm.prdroot root on
                  prd.prdentityid = root.entityid and
                  prd.prdentitytype = root.entitytype and
                  prd.prdnlsid = root.nlsid

      JOIN        pcd.of of on
                  root.ofentityid = of.entityid and
                  root.nlsid =of.nlsid

      JOIN        eccm.projserbrandfam psbf on
                  psbf.projectid =root.projectid

      JOIN        eccm.audience multi on
                  multi.entityid = root.entityid and
                  multi.entityname = root.entitytype and
                  multi.nlsid = root.nlsid

      LEFT JOIN   int.avprdcatseq seq on
                  seq.catidentifier = psbf.famsername and
                  seq.partnumber = prd.partnumber and
                  seq.countrycode = prd.countrycode and
                  seq.language = prd.language and
                  multi.longdescription = Upper(seq.audience)

      WHERE       prd.productclass = 'MTM' AND
                  of.OPTGROUPNAME is NULL AND
                  of.subgroup is NULL AND
                  (seq.pub_flag is NULL OR seq.pub_flag = 1)
);

------------------------------------------
-- CALLED OUT IN THE TABLE SPEC
-- CONVERTED DWB
-- COMPILED
------------------------------------------
DROP VIEW eccm.wwcatprdrel;
CREATE VIEW eccm.wwcatprdrel
------------------------------------------
(identifier
,partnumber
,mastnav
,countrycode
,language
,audience
,sequence
,pub_flag
,ranking
,refreshtime
) AS
SELECT
 psbf.famsername
,prd.partnumber
,'M'
,prd.countrycode
,prd.language
,multi.longdescription
,seq.sequence
,seq.pub_flag
,''
,prd.refreshtime
FROM int.avwwprd prd
JOIN eccm.prdroot root on
    prd.prdentityid = root.entityid
and prd.prdentitytype = root.entitytype
and prd.prdnlsid = root.nlsid
JOIN pcd.of of on
    of.entityid = root.ofentityid
and of.nlsid = root.nlsid
JOIN eccm.projserbrandfam psbf on
    psbf.projectid = root.projectid
and psbf.nlsid = root.nlsid
JOIN eccm.audience multi on
    multi.entityid = root.entityid
and multi.entityname = root.entitytype
and multi.nlsid = root.nlsid
LEFT OUTER JOIN int.avprdcatseq seq on
    seq.catidentifier = psbf.FAMSERNAME
AND seq.partnumber = prd.partnumber
AND seq.countrycode = prd.countrycode
AND seq.language = prd.language
AND multi.longdescription = Upper(seq.audience)
WHERE
  prd.prdentitytype = 'OF' and
  prd.productclass IN
  ('MTM'
  ,'SERVICE'
  ,'SO'
  ,'V'
  ,'CTO')
UNION
SELECT
 cb.catid
,prd.partnumber
,'M'
,prd.countrycode
,prd.language
,multi.longdescription
,seq.sequence
,seq.pub_flag
, ''
,prd.refreshtime
FROM  int.avwwprd prd
JOIN eccm.prdroot root on
    prd.prdentityid = root.entityid
and prd.prdentitytype = root.entitytype
and prd.prdnlsid = root.nlsid
JOIN eccm.cbparts cb on
    cb.entityid = root.ofentityid
and cb.nlsid = root.nlsid
JOIN eccm.audience multi on
    multi.entityid = root.entityid
and multi.entityname = root.entitytype
and multi.nlsid = root.nlsid
LEFT OUTER JOIN int.avprdcatseq seq on
    seq.catidentifier = cb.catid
AND seq.partnumber = prd.partnumber
AND seq.countrycode = prd.countrycode
AND seq.language = prd.language
AND multi.longdescription = Upper(seq.audience)
where
    prd.prdentitytype = 'CB'
UNION
SELECT
 prd.catidentifier
,prd.partnumber
,'N'
,prd.countrycode
,prd.language
,prd.audience
,seq.sequence
,seq.pub_flag
,''
,avwwprd.refreshtime
FROM  int.avprdcat prd
LEFT OUTER JOIN int.avprdcatseq seq on
    seq.catidentifier = prd.catidentifier
AND seq.partnumber = prd.partnumber
AND seq.countrycode = prd.countrycode
AND seq.language = prd.language
AND seq.audience = prd.audience
JOIN int.avwwprd avwwprd on
    avwwprd.partnumber = prd.partnumber
AND avwwprd.countrycode = prd.countrycode
AND avwwprd.language = prd.language
JOIN eccm.audience multi ON
    multi.entityid = prd.prdentityid
AND multi.entityname = prd.prdentitytype
AND multi.longdescription = seq.audience
UNION
SELECT
 evp.catidentifier
,evp.partnumber
,'N'
,evp.countrycode
,evp.language
,evp.audience
,1
,1
,evp.evp_indicator
,prd.refreshtime
FROM int.avprdevp evp
JOIN int.avwwprd prd ON
    prd.partnumber = evp.partnumber
AND prd.countrycode = evp.countrycode
AND prd.language = evp.language
JOIN eccm.audience multi on
    multi.entityid = prd.prdentityid
AND multi.entityname = prd.prdentitytype
AND multi.longdescription = evp.audience
and multi.nlsid = prd.prdnlsid
;

------------------------------------------
-- CONVERTED DWB
-- COMPILED DWB
-- UNIT TESTED DWB
-- CALLED OUT IN TABLE SPEC DWB
------------------------------------------
DROP VIEW eccm.wwmvattr;
CREATE VIEW eccm.wwmvattr
------------------------------------------
(entitytype
,entityid
,nlsid
,columnname
,longdescription
) AS (
SELECT
 'OF'
,of.entityid
,of.nlsid
,mfv.attributecode
,mfv.longdescription
FROM pcd.of of
JOIN pcd.flag f on
    of.entityid = f.entityid and
   f.entitytype ='OF'
JOIN pcd.metaflagtable mfv on
    mfv.attributecode = f.attributecode and
    mfv.attributevalue = f.attributevalue and
    mfv.nlsid = of.nlsid

and mfv.nlsid = of.nlsid
);
