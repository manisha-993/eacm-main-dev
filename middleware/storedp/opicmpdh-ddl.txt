--
-- $Log: opicmpdh-ddl.txt,v $
-- Revision 1.76  2005/10/25 20:57:06  dave
-- <No Comment Entered>
--
-- Revision 1.75  2005/06/24 00:07:26  dave
-- ok.. alitto expando
--
-- Revision 1.74  2005/05/13 14:38:26  dave
-- some bad index typo
--
-- Revision 1.73  2005/05/11 13:33:02  dave
-- adding more tables to put opicmpdh-ddl up to date
--
-- Revision 1.72  2005/05/09 21:20:20  dave
-- new tmp table
--
-- Revision 1.71  2005/04/28 15:47:43  roger
-- remove gamap
--
-- Revision 1.70  2005/03/24 18:16:56  roger
-- Changes to gamap
--
-- Revision 1.69  2005/03/22 20:54:22  roger
-- Add the new gamap table
--
-- Revision 1.68  2005/03/11 18:56:24  roger
-- New cols for flag and flagx
--
-- Revision 1.67  2004/12/20 20:23:33  roger
-- Support for sessions of PartNo uniqueness checking
--
-- Revision 1.66  2004/11/17 19:31:20  roger
-- To support maintaining transaction counts
--
-- Revision 1.65  2004/11/15 19:11:51  gregg
-- add RELTAG to METACOLORDER table
--
-- Revision 1.64  2004/11/02 21:36:15  gregg
-- add ActionItemKey column to METACOLORDER table.
--
-- Revision 1.63  2004/10/13 20:54:29  tony
-- added the SOFTWARE_UPDATE table and
-- the SOFTWARE_UPDATE_PK index
--
-- Revision 1.62  2004/09/14 20:38:50  roger
-- TRSQ table should NOT have a PK!
--
-- Revision 1.61  2004/08/11 22:12:10  roger
-- Needed lookup by LastName + FirstName and return multiple matches in a collection
--
-- Revision 1.60  2004/07/29 20:42:40  roger
-- Make PartNo 128 chars
--
-- Revision 1.59  2004/07/26 15:37:01  roger
-- New table for PartNo reservations
--
-- Revision 1.58  2004/05/11 17:22:36  gregg
-- TIMETABLE
--
-- Revision 1.57  2004/05/05 20:44:04  roger
-- INT becomes INTEGER
--
-- Revision 1.56  2004/05/05 16:08:22  roger
-- Changes to usage table
--
-- Revision 1.55  2004/05/04 20:20:17  roger
-- Finalize?
--
-- Revision 1.54  2003/06/18 22:57:08  roger
-- Changes for 1.2
--
-- Revision 1.53  2003/05/10 07:39:32  dave
-- more trace and streamlining
--
-- Revision 1.52  2003/04/16 16:59:24  roger
-- Col names in opicm.usage
--
-- Revision 1.51  2003/04/16 15:29:42  roger
-- Oops
--
-- Revision 1.50  2003/04/16 15:28:43  roger
-- New table for session tracking
--
-- Revision 1.49  2003/04/14 21:08:29  roger
-- BLOBX table ~is~ needed
--
-- Revision 1.48  2003/04/14 20:57:29  dave
-- fixing the updateUSEnglishOnly meta rule
--
-- Revision 1.47  2003/04/07 20:09:42  dave
-- fixed metalinkattr primary key
--
-- Revision 1.46  2003/04/07 17:01:02  gregg
-- fix bookmark
--
-- Revision 1.45  2003/04/03 22:32:15  gregg
-- add OPWGID to BOOKMARK table
--
-- Revision 1.44  2003/04/01 20:12:04  gregg
-- add SESSIONINFO column to bookmark table
--
-- Revision 1.43  2003/03/31 23:51:54  dave
-- tagging and passthru logic I
--
-- Revision 1.42  2003/03/29 00:47:27  gregg
-- add enterprise col to bookmark table
--
-- Revision 1.41  2003/03/17 23:08:41  gregg
-- BOOKMARK table
--
-- Revision 1.40  2003/03/10 20:21:58  dave
-- more notes on e-announce tagging and etc
--
-- Revision 1.39  2003/02/24 21:22:07  dave
-- adding the metaColOrder table to capture the column order
-- of for each profile, and for default (opwgid = 0)
--
-- Revision 1.38  2003/02/19 18:39:43  dave
-- cannot remove xtables from release
--
-- Revision 1.37  2003/02/19 17:50:03  dave
-- new primary key indexes
--
-- Revision 1.36  2003/02/07 21:21:12  dave
-- new DynaSearch SP's for searching trickery
--
-- Revision 1.35  2003/02/04 00:33:46  gregg
-- INTERVALSTARTDATE, INTERVALENDDATE for QUEUE table
--
-- Revision 1.34  2002/12/13 20:49:05  gregg
-- added LOCKOWNER column to SOFTLOCK table
--
-- Revision 1.33  2002/11/18 20:37:30  gregg
-- locklevel, lockentitytype, lockentityid for softlock table
--
-- Revision 1.32  2002/10/09 22:33:56  roger
-- Clean up
--
-- Revision 1.31  2002/10/09 21:32:58  dave
-- added isDynaTable to EANTableWrapper interface
--
-- Revision 1.30  2002/08/07 20:08:44  roger
-- Change to:
-- , SHORTDESCRIPTION VARCHAR(64) NOT NULL
-- , LONGDESCRIPTION VARCHAR(254) NOT NULL
--
-- Revision 1.29  2002/08/05 22:24:40  gregg
-- add SESSIONID column to QUEUE table
--
-- Revision 1.28  2002/07/29 17:10:53  dave
-- fixes to syntax
--
-- Revision 1.27  2002/07/29 17:00:15  roger
-- Change CHAR(254) to VARCHAR(254)
--
-- Revision 1.26  2002/07/29 16:44:50  dave
-- new table for ECCM Extract
--
-- Revision 1.25  2002/07/25 20:14:58  dave
-- sp fix F2 and F1
--
-- Revision 1.24  2002/03/25 18:45:00  roger
-- Added some DDL for new table TRSENTITY
--
-- Revision 1.23  2001/11/08 18:59:01  roger
-- Clean up for v1.1
--
-- Revision 1.22  2001/10/22 18:20:31  roger
-- Password and PasswordX no longer used
--
-- Revision 1.21  2001/10/20 02:24:14  roger
-- Added script for export import
--
-- Revision 1.20  2001/10/15 21:17:43  dave
-- increased the length of some columns to accomidate longer flag values
-- (driven by meta needs)
--
-- Revision 1.19  2001/07/28 21:45:07  roger
-- Quotes needed around import command because of asterisk
--
-- Revision 1.18  2001/07/25 22:35:49  roger
-- Fix table name on MetaHelp index creation
--
-- Revision 1.17  2001/07/25 17:06:22  roger
-- Added comments
--
-- Revision 1.16  2001/07/21 14:55:15  roger
-- Need small script to move MetaLinkAttribute data to MetaLinkAttr
--
-- Revision 1.15  2001/07/21 03:32:55  roger
-- Definition of MetaHelp table was based on existing table with columns out of order
--
-- Revision 1.14  2001/07/20 00:30:38  roger
-- MetaHelp DDL was missing
--
-- Revision 1.13  2001/07/19 00:07:45  roger
-- Created new table with new name for old MetaLinkAttribute table
--
-- Revision 1.12  2001/07/12 15:36:56  roger
-- Entire file is now upper-case for consistency
--
-- Revision 1.11  2001/07/12 15:18:18  roger
-- Added leading 0 on TSPACE ISPACE number
--
-- Revision 1.10  2001/06/23 18:20:13  gregg
-- This is the version used for V23AT
--
-- Revision 1.9  2001/06/22 17:17:51  roger
-- Remove comments
--
-- Revision 1.8  2001/05/16 17:13:22  roger
-- Added MetaTransition table
--
-- Revision 1.7  2001/05/16 16:36:52  roger
-- Misc changes
--
-- Revision 1.6  2001/05/09 21:58:55  roger
-- Fixed comment character
--
-- Revision 1.5  2001/05/09 21:56:59  roger
-- Added log keyword
--

DROP TABLE OPICM.BLOB;
CREATE TABLE OPICM.BLOB(
  ENTERPRISE VARCHAR(8) NOT NULL
, ENTITYTYPE VARCHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE VARCHAR(32) NOT NULL
, BLOBEXTENSION VARCHAR(32) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
, ATTRIBUTEVALUE BLOB(50M) NOT NULL
) IN TSPACE09 INDEX IN ISPACE09;
DROP INDEX OPICM.BLOB_PK;
CREATE UNIQUE INDEX OPICM.BLOB_PK ON OPICM.BLOB(ENTITYID,ENTITYTYPE,ATTRIBUTECODE,NLSID,ENTERPRISE,VALFROM) INCLUDE (VALTO,EFFFROM,EFFTO, OPENID);

DROP TABLE OPICM.BLOBX;
CREATE TABLE OPICM.BLOBX(
  ENTERPRISE VARCHAR(8) NOT NULL
, ENTITYTYPE VARCHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE VARCHAR(32) NOT NULL
, BLOBEXTENSION VARCHAR(32) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
, ATTRIBUTEVALUE BLOB(50M) NOT NULL
) IN TSPACE10 INDEX IN ISPACE10;
DROP INDEX OPICM.BLOBX_PK;
CREATE UNIQUE INDEX OPICM.BLOBX_PK ON OPICM.BLOBX(ENTITYID,ENTITYTYPE,ATTRIBUTECODE,NLSID,VALFROM,EFFFROM,ENTERPRISE);

DROP TABLE OPICM.SOFTWARE_UPDATE;
CREATE TABLE OPICM.SOFTWARE_UPDATE(
  ENTERPRISE VARCHAR(8) NOT NULL
, ENTITYTYPE VARCHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE VARCHAR(32) NOT NULL
, BLOBEXTENSION VARCHAR(32) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
, ATTRIBUTEVALUE BLOB(50M) NOT NULL
) IN TSPACE09 INDEX IN ISPACE09;
DROP INDEX OPICM.SOFTWARE_UPDATE_PK;
CREATE UNIQUE INDEX OPICM.SOFTWARE_UPDATE_PK ON OPICM.SOFTWARE_UPDATE(ENTITYID,ENTITYTYPE,ATTRIBUTECODE,NLSID,ENTERPRISE,VALFROM) INCLUDE (VALTO,EFFFROM,EFFTO, OPENID);


DROP TABLE OPICM.ENTITY;
CREATE TABLE OPICM.ENTITY(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE03 INDEX IN ISPACE03;
DROP INDEX OPICM.ENTITY_PK;
CREATE UNIQUE INDEX OPICM.ENTITY_PK ON OPICM.ENTITY(ENTITYID,ENTITYTYPE,ENTERPRISE,VALFROM) INCLUDE (VALTO,EFFFROM,EFFTO,OPENID);

DROP TABLE OPICM.ENTITYX;
CREATE TABLE OPICM.ENTITYX(
  ENTERPRISE VARCHAR(8) NOT NULL
, ENTITYTYPE VARCHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE03 INDEX IN ISPACE03;
DROP INDEX OPICM.ENTITYX_PK;
CREATE UNIQUE INDEX OPICM.ENTITYX_PK ON OPICM.ENTITYX(VALFROM,EntityType, EntityID, Enterprise) INCLUE (VALTO,EFFFROM, EFFTO);

DROP TABLE OPICM.FLAG;
CREATE TABLE OPICM.FLAG(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, ATTRIBUTEVALUE CHAR(32) NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
--, REF_NLSID INTEGER NOT NULL
) IN TSPACE04 INDEX IN ISPACE04;
DROP INDEX OPICM.FLAG_PK;
CREATE UNIQUE INDEX OPICM.FLAG_PK ON OPICM.FLAG(ENTITYID,ENTITYTYPE,ATTRIBUTECODE,ATTRIBUTEVALUE,ENTERPRISE,VALFROM) INCLUDE (VALTO,EFFFROM,EFFTO, OPENID);

DROP TABLE OPICM.FLAGX;
CREATE TABLE OPICM.FLAGX(
  ENTERPRISE VARCHAR(8) NOT NULL
, ENTITYTYPE VARCHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE VARCHAR(32) NOT NULL
, ATTRIBUTEVALUE VARCHAR(32) NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
--, REF_NLSID INTEGER NOT NULL
) IN TSPACE07 INDEX IN ISPACE07;
DROP INDEX OPICM.FLAGX_PK;
CREATE UNIQUE INDEX OPICM.FLAGX_PK ON OPICM.FLAGX(ENTITYID,ENTITYTYPE,ATTRIBUTECODE,ATTRIBUTEVALUE,ENTERPRISE,VALFROM,EFFFROM);

DROP TABLE OPICM.LONGTEXT;
CREATE TABLE OPICM.LONGTEXT(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
, ATTRIBUTEVALUE LONG VARCHAR NOT NULL
) IN TSPACE09 INDEX IN ISPACE09;
DROP INDEX OPICM.LONGTEXT_PK;
CREATE UNIQUE INDEX OPICM.LONGTEXT_PK ON OPICM.LONGTEXT(ENTITYID,ENTITYTYPE,ATTRIBUTECODE,NLSID,ENTERPRISE,VALFROM) INCLUDE (VALTO,EFFFROM,EFFTO,OPENID);

DROP TABLE OPICM.LONGTEXTX;
CREATE TABLE OPICM.LONGTEXTX(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
, ATTRIBUTEVALUE LONG VARCHAR NOT NULL
) IN TSPACE10 INDEX IN ISPACE10;
DROP INDEX OPICM.LONGTEXTX_PK;
CREATE UNIQUE INDEX OPICM.LONGTEXTX_PK ON OPICM.LONGTEXTX(ENTITYID,ENTITYTYPE,ATTRIBUTECODE,ENTERPRISE,NLSID,VALFROM,EFFFROM);

DROP TABLE OPICM.METADESCRIPTION;
CREATE TABLE OPICM.METADESCRIPTION(
  ENTERPRISE CHAR(8) NOT NULL
, DESCRIPTIONTYPE CHAR(32) NOT NULL
, DESCRIPTIONCLASS CHAR(32) NOT NULL
, SHORTDESCRIPTION VARCHAR(64) NOT NULL
, LONGDESCRIPTION VARCHAR(254) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.METADESCRIPTION_PK;
CREATE UNIQUE INDEX OPICM.METADESCRIPTION_PK ON OPICM.METADESCRIPTION(DESCRIPTIONTYPE,DESCRIPTIONCLASS,NLSID,ENTERPRISE,VALFROM) INCLUDE(VALTO,EFFFROM, EFFTO,SHORTDESCRIPTION,LONGDESCRIPTION,OPENID);

DROP TABLE OPICM.METAENTITY;
CREATE TABLE OPICM.METAENTITY(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYCLASS CHAR(32) NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.METAENTITY_PK;
CREATE UNIQUE INDEX OPICM.METAENTITY_PK ON OPICM.METAENTITY(ENTITYTYPE, ENTERPRISE, VALFROM) INCLUDE(VALTO,EFFFROM,EFFTO,ENTITYCLASS,OPENID);

DROP TABLE OPICM.METALINKATTR;
CREATE TABLE OPICM.METALINKATTR(
  ENTERPRISE CHAR(8) NOT NULL
, LINKTYPE CHAR(32) NOT NULL
, LINKTYPE1 CHAR(32) NOT NULL
, LINKTYPE2 CHAR(32) NOT NULL
, LINKCODE CHAR(32) NOT NULL
, LINKVALUE VARCHAR(254) NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE01 INDEX IN ISPACE08;
DROP INDEX OPICM.METALINKATTR_PK;
CREATE UNIQUE INDEX OPICM.METALINKATTR_PK ON OPICM.METALINKATTR(LINKTYPE,LINKCODE,LINKTYPE1,LINKTYPE2,LINKVALUE,ENTERPRISE,VALFROM) INCLUDE (VALTO,EFFFROM,EFFTO,OPENID);

DROP TABLE OPICM.METATRANSITION;
CREATE TABLE OPICM.METATRANSITION(
  ENTERPRISE CHAR(8) NOT NULL
, TRANSITIONCODE CHAR(32) NOT NULL
, ATTRIBUTECODE1 CHAR(32) NOT NULL
, FLAG1 CHAR(32) NOT NULL
, ATTRIBUTECODE2 CHAR(32) NOT NULL
, FLAG2 CHAR(32) NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULLRELA
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.METATRANSITION_PK;
CREATE UNIQUE INDEX OPICM.METATRANSITION_PK ON OPICM.METATRANSITION(TRANSITIONCODE,ATTRIBUTECODE1,FLAG1,ATTRIBUTECODE2,FLAG2,ENTERPRISE,VALFROM,EFFFROM);

DROP TABLE OPICM.NEXTID;
CREATE TABLE OPICM.NEXTID(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, NEXTID INTEGER NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.NEXTID_PK;
CREATE UNIQUE INDEX OPICM.NEXTID_PK ON OPICM.NEXTID(ENTITYTYPE,ENTERPRISE);

DROP TABLE OPICM. ;
CREATE TABLE OPICM.RELATOR(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ENTITY1TYPE CHAR(32) NOT NULL
, ENTITY1ID INTEGER NOT NULL
, ENTITY2TYPE CHAR(32) NOT NULL
, ENTITY2ID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE08 INDEX IN ISPACE08;
DROP INDEX OPICM.RELATOR_PK;
CREATE UNIQUE INDEX OPICM.RELATOR_PK ON OPICM.RELATOR(ENTITYID,ENTITYTYPE,ENTERPRISE,VALFROM) INCLUDE (VALTO, EFFFROM, EFFTO, ENTITY1TYPE,ENTITY1ID, ENTITY2TYPE, ENTITY2ID, OPENID);

DROP TABLE OPICM.RELATORX;
CREATE TABLE OPICM.RELATORX(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ENTITY1TYPE CHAR(32) NOT NULL
, ENTITY1ID INTEGER NOT NULL
, ENTITY2TYPE CHAR(32) NOT NULL
, ENTITY2ID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE08 INDEX IN ISPACE08;
DROP INDEX OPICM.RELATORX_PK;
CREATE UNIQUE INDEX OPICM.RELATORX_PK ON OPICM.RELATORX(ENTITYID,ENTITYTYPE,ENTERPRISE,VALFROM,EFFFROM);

DROP TABLE OPICM.SOFTLOCK;
CREATE TABLE OPICM.SOFTLOCK(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, LOCKEDON TIMESTAMP NOT NULL
, LOCKLEVEL INTEGER NOT NULL
, LOCKENTITYTYPE VARCHAR(32) NOT NULL
, LOCKENTITYID INTEGER NOT NULL
, LOCKOWNER VARCHAR(32) NOT NULL
, OPWGID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE02 INDEX IN ISPACE02;
DROP INDEX OPICM.SOFTLOCK_PK;
CREATE UNIQUE INDEX OPICM.SOFTLOCK_PK ON OPICM.SOFTLOCK(ENTITYID,ENTITYTYPE,ENTERPRISE,LOCKENTITYTYPE,LOCKENTITYID,LOCKOWNER) INCLUDE(LOCKEDON, LOCKLEVEL, OPWGID);

DROP TABLE OPICM.TEXT;
CREATE TABLE OPICM.TEXT(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, ATTRIBUTEVALUE VARCHAR(254) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE05 INDEX IN ISPACE06;
DROP INDEX OPICM.TEXT_PK;
CREATE UNIQUE INDEX OPICM.TEXT_PK ON OPICM.TEXT(ENTITYID,ENTITYTYPE, ATTRIBUTECODE,NLSID, ENTERPRISE, VALFROM) INCLUDE (VALTO,EFFFROM,EFFTO,ATTRIBUTEVALUE,OPENID);

DROP TABLE OPICM.TEXTX;
CREATE TABLE OPICM.TEXTX(
  ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, ATTRIBUTEVALUE VARCHAR(254) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
) IN TSPACE06 INDEX IN ISPACE05;
DROP INDEX OPICM.TEXTX_PK;
CREATE UNIQUE INDEX OPICM.TEXTX_PK ON OPICM.TEXTX(ENTITYID,ENTITYTYPE,ENTERPRISE,ATTRIBUTECODE,NLSID,VALFROM,EFFFROM);

DROP TABLE OPICM.TRSNAVIGATE;
CREATE TABLE OPICM.TRSNAVIGATE(
  ENTERPRISE CHAR(8) NOT NULL
, SESSIONID INTEGER NOT NULL
, OBJECTTYPE CHAR(32) NOT NULL
, OBJECTCLASS CHAR(8) NOT NULL
, LEVEL INTEGER NOT NULL
, LEAF INTEGER NOT NULL
, DIRECTION1 CHAR(1) NOT NULL
, DIRECTION2 CHAR(1) NOT NULL
, ENTITY1TYPE CHAR(32) NOT NULL
, ENTITY1ID INTEGER NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ENTITY2TYPE CHAR(32) NOT NULL
, ENTITY2ID INTEGER NOT NULL
, VALON TIMESTAMP NOT NULL
, EFFON TIMESTAMP NOT NULL
) IN TSPACE02 INDEX IN ISPACE02;

DROP TABLE OPICM.METAHELP;
CREATE TABLE OPICM.METAHELP(
  ENTERPRISE CHAR(8) NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, NLSID INTEGER NOT NULL
, VALFROM TIMESTAMP NOT NULL
, VALTO TIMESTAMP NOT NULL
, EFFFROM TIMESTAMP NOT NULL
, EFFTO TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
, TRANID INTEGER NOT NULL
, HELPVALUE VARCHAR(3800)
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.METAHELP_PK;
CREATE UNIQUE INDEX OPICM.METAHELP_PK ON OPICM.METAHELP(ATTRIBUTECODE,ENTERPRISE,NLSID,VALFROM) INCLUDE (VALTO,EFFFROM,EFFTO,OPENID);

--
-- THIS IS FOR THE NET CHANGES WATCHDOG
--
DROP TABLE OPICM.TRSWATCHDOG;
CREATE TABLE OPICM.TRSWATCHDOG(
  SESSIONID INTEGER NOT NULL
, TYPE INTEGER NOT NULL
, LEVEL INTEGER NOT NULL
, ENTITY1TYPE VARCHAR(32)NOT NULL
, ENTITY1ID INTEGER NOT NULL
, ENTITYTYPE VARCHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ENTITY2TYPE VARCHAR(32) NOT NULL
, ENTITY2ID INTEGER NOT NULL
) IN TSPACE02 INDEX IN ISPACE02;

--
-- New QUEUE TABLE For QUEING EXTRACTS
--
DROP TABLE OPICM.QUEUE;
CREATE TABLE OPICM.QUEUE(
  OPWGID INTEGER NOT NULL
, SESSIONID INTEGER NOT NULL
, QUEUE VARCHAR(32) NOT NULL
, STATUS INTEGER NOT NULL
, ENTITYTYPE VARCHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, PUSHDATE TIMESTAMP NOT NULL
, PULLDATE TIMESTAMP NOT NULL
, INTERVALSTARTDATE TIMESTAMP NOT NULL
, INTERVALENDDATE TIMESTAMP NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.QUEUE_PK;
CREATE UNIQUE INDEX OPICM.QUEUE_PK ON OPICM.QUEUE(OPWGID, QUEUE, ENTITYTYPE, ENTITYID, PUSHDATE, INTERVALSTARTDATE, INTERVALENDDATE);

--
-- NEW DYNASEARCH TABLE FOR DYNAMIC SEARCHES
--
DROP TABLE OPICM.DYNASEARCH;
CREATE TABLE OPICM.DYNASEARCH(
  SESSIONID INTEGER NOT NULL
, STEP INTEGER NOT NULL
, ENTERPRISE CHAR(8) NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ATTRIBUTETYPE CHAR(8) NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, ATTRIBUTEVALUE VARCHAR(254) NOT NULL
, SEARCHCOUNT INT
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.DYNASEARCH_PK;
CREATE UNIQUE INDEX OPICM.DYNASEARCH_PK ON OPICM.DYNASEARCH(SESSIONID,STEP,ATTRIBUTETYPE,ENTERPRISE,ATTRIBUTECODE,ENTITYTYPE,ATTRIBUTEVALUE);

--
-- NEW trsEntities Table for Search Processing
--
DROP TABLE OPICM.TRSENTITIES;
CREATE TABLE OPICM.TRSENTITIES(
  LEVEL INTEGER NOT NULL
, SESSIONID INTEGER NOT NULL
, ENTITYID INTEGER NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.TRSENTITIES_PK;
CREATE UNIQUE INDEX OPICM.TRSENTITIES_PK ON OPICM.TRSENTITIES(SESSIONID,LEVEL, ENTITYID, ENTITYTYPE);

--
--
-- NEW TABLE for Tracking TAG Data that gets populated on all update transactions.
-- Added Entity Type ENTITYID.. which is the source of the SessionTag info
--
--
DROP TABLE OPICM.SESSIONTAGS;
CREATE TABLE OPICM.SESSIONTAGS
(
  ENTERPRISE CHAR(8) NOT NULL
, OPWGID INTEGER NOT NULL
, SESSIONID INTEGER NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, ATTRIBUTEVALUE CHAR(32) NOT NULL
, SESSIONENTITYTYPE CHAR(32) NOT NULL
, SESSIONENTITYID INTEGER NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.SESSIONTAGS_PK;
CREATE UNIQUE INDEX OPICM.SESSIONTAGS_PK ON OPICM.SESSIONTAGS(SESSIONID, OPWGID, ENTERPRISE,ATTRIBUTECODE, ATTRIBUTEVALUE);

--
--
-- NEW METAORDER Table
--
-- OPWGID = 0 represents the default column order.  That would be universal for all roles
-- and will be included in the cache when we load it. This table would be
-- encorporated into the meta attribute pull when the EntityGroup is created from scratch
--
--
DROP TABLE OPICM.METACOLORDER;
CREATE TABLE OPICM.METACOLORDER
(
  ENTERPRISE CHAR(8) NOT NULL
, OPWGID INTEGER NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, ORDER INTEGER NOT NULL
, VISIBLE INTEGER NOT NULL
, ACTIONITEMKEY CHAR(32)
, RELTAG CHAR(1)
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.METACOLORDER_PK;
CREATE UNIQUE INDEX OPICM.METACOLORDER_PK ON OPICM.METACOLORDER(OPWGID,ENTITYTYPE,ATTRIBUTECODE,ORDER, ENTERPRISE, ACTIONITEMKEY, RELTAG) INCLUDE (VISIBLE);

--
--
-- NEW BOOKMARK Table - Serialize + store ActionItems by OP's so that they can be replayed later.
-- Q: How big can EANActionItem objects get?? (start w/ 5M, but probably much less...)
--
--
DROP TABLE OPICM.BOOKMARK;
CREATE TABLE OPICM.BOOKMARK
(
  ENTERPRISE CHAR(8) NOT NULL
, OPID INTEGER NOT NULL
, OPWGID INTEGER NOT NULL
, ACTIONITEMKEY CHAR(32) NOT NULL
, ACTIONITEMTYPE CHAR(32) NOT NULL
, USERDESCRIPTION VARCHAR(254) NOT NULL
, BLOBVALUE BLOB(5M) NOT NULL
, SESSIONINFO VARCHAR(32) NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.BOOKMARK_PK;
CREATE UNIQUE INDEX OPICM.BOOKMARK_PK ON OPICM.BOOKMARK(OPID,ACTIONITEMKEY,USERDESCRIPTION);


DROP TABLE OPICM.USAGE;
CREATE TABLE OPICM.USAGE
(
  ENTERPRISE CHAR(8) NOT NULL
, SESSIONID INTEGER NOT NULL
, USERTOKEN VARCHAR(80)
, VERSIONLITERAL VARCHAR(80)
, CLIENT VARCHAR(80)
, IPADDR VARCHAR(80)
, CLIENTDATA VARCHAR(80)
, LOGIN TIMESTAMP NOT NULL
, LOGOUT TIMESTAMP
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.USAGE_PK;
CREATE UNIQUE INDEX OPICM.USAGE_PK ON OPICM.USAGE(SESSIONID);

DROP TABLE OPICM.TIMETABLE;
CREATE TABLE OPICM.TIMETABLE(
  ENTERPRISE CHAR(8) NOT NULL
, RUNTYPE CHAR(32) NOT NULL
, RUNTIME TIMESTAMP NOT NULL
);
DROP INDEX OPICM.TIMETABLE_PK;
CREATE UNIQUE INDEX OPICM.TIMETABLE_PK ON OPICM.TIMETABLE(ENTERPRISE,RUNTYPE,RUNTIME);

DROP TABLE OPICM.TRSPARTNO;
CREATE TABLE OPICM.TRSPARTNO(
  PARTNO VARCHAR(128) NOT NULL
, INSERTTIME TIMESTAMP NOT NULL
, SESSIONID INTEGER NOT NULL
);
DROP INDEX OPICM.TRSPARTNO_PK;
CREATE UNIQUE INDEX OPICM.TRSPARTNO_PK ON OPICM.TRSPARTNO(PARTNO);

DROP TABLE OPICM.TRSQ;
CREATE TABLE OPICM.TRSQ(
  ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, LONGDESCRIPTION VARCHAR(254) NOT NULL
, ATTRIBUTECODE CHAR(32) NOT NULL
, ATTRIBUTEVALUE CHAR(32) NOT NULL
, VALFROM TIMESTAMP NOT NULL
, OPENID INTEGER NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;

DROP TABLE OPICM.TCOUNT;
CREATE TABLE OPICM.TCOUNT
(
  DATE TIMESTAMP NOT NULL
, INSTANCE VARCHAR(32) NOT NULL
, TRANSACTION VARCHAR(16) NOT NULL
, COUNT INTEGER NOT NULL
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.TCOUNT_PK;
CREATE UNIQUE INDEX OPICM.TCOUNT_PK ON OPICM.TCOUNT(INSTANCE, DATE, TRANSACTION);


drop table opicm.trsNetterPass1;
create table opicm.trsNetterPass1
(
Marker INT NOT NULL,
Enterprise char(8) not null,
sessionid INT not null,
TRAN CHAR(3) NOT NULL,
Level INT NOT NULL,
Entity1type CHAR(32) NOT NULL,
Entity1id INT NOT NULL,
EntityType CHAR(32) NOT NULL,
EntityID INT NOT NULL,
Entity2Type CHAR(32) NOT NULL,
Entity2ID INT NOT NULL,
Direction Char(1) Not Null,
CoreType CHAR(32) NOT NULL,
CoreID INT NOT NULL,
CoreLevel INT NOT NULL,
CoreTran Char(3) not null,
CoreDirection Char(1) not null,
Type CHAR(2) NOT NULL,
VALFROM TIMESTAMP NOT NULL,
CorePath VARCHAR(254) NOT NULL
)
;
create index opicm.trsNetterPass1_ix1 on opicm.trsNetterPass1(sessionid, type, marker,enterprise);
create index opicm.trsNetterPass1_ix2 on opicm.trsNetterPass1(SessionID,tran,Marker,Enterprise, entityid, entitytype, coretype);
create index opicm.trsNetterPass1_ix3 on opicm.trsNetterPass1(sessionid,level, entity2type, entity2id) cluster;
create index opicm.trsNetterPass1_ix4 on opicm.trsNetterPass1(sessionid,level, entitytype, entityid);
create index opicm.trsNetterPass1_ix5 on opicm.trsNetterPass1(sessionid,level, entity1type, entity1id);
create index opicm.trsNetterpass1_ix6 on opicm.trsNetterPass1(sessionid, coreid, coretype,marker,type,enterprise);
create index opicm.trsNetterpass1_ix7 on opicm.trsNetterPass1(sessionid, tran, marker,valfrom,enterprise,entityid,entitytype,coretype);

runstats on table opicm.trsNetterPass1 and detailed indexes all;


DROP TABLE OPICM.TRSNETTERPASS2;
CREATE TABLE OPICM.TRSNETTERPASS2(
  ENTERPRISE CHAR(8) NOT NULL
, SESSIONID INTEGER NOT NULL
, ActionType Char(32) Not Null
, LEVEL INTEGER NOT NULL
, MYDIRECTION CHAR(1) NOT NULL
, PARENTDIRECTION CHAR(1) NOT NULL
, ENTITY1TYPE CHAR(32) NOT NULL
, ENTITY1ID INTEGER NOT NULL
, ENTITYTYPE CHAR(32) NOT NULL
, ENTITYID INTEGER NOT NULL
, ENTITY2TYPE CHAR(32) NOT NULL
, ENTITY2ID INTEGER NOT NULL
, TRAN CHAR(3) NOT NULL
, VALFROM TIMESTAMP NOT NULL
, RootType CHAR(32) NOT NULL
, RootID INT NOT NULL
, RootTRAN CHAR(3) NOT NULL
, PATH VARCHAR(254) NOT NULL
)

;
CREATE index OPICM.TRSNETTERPASS2_IX1 on OPICM.TRSNETTERPASS2(SESSIONID,level, ENTITY1TYPE,ENTITY1ID);
CREATE index OPICM.TRSNETTERPASS2_IX2 on OPICM.TRSNETTERPASS2(SESSIONID,level, ENTITY2TYPE,ENTITY2ID);
CREATE index OPICM.TRSNETTERPASS2_IX3 on OPICM.TRSNETTERPASS2(SESSIONID,level, ENTITYTYPE, ENTITYID) CLUSTER;

DROP TABLE OPICM.TRSNETTERFINAL;
CREATE TABLE OPICM.TRSNETTERFINAL(
  ENTERPRISE CHAR(8) NOT NULL
, SESSIONID INTEGER NOT NULL
, ActionType CHAR(32) NOT NULL
, StartDate TIMESTAMP NOT NULL
, EndDate TIMESTAMP NOT NULL
, Valfrom TimeStamp NOT NULL
, RootType CHAR(32) NOT NULL
, RootID INT NOT NULL
, RootTran CHAR(3) NOT NULL
, ChildType CHAR(32) NOT NULL
, ChildID INT NOT NULL
, ChildTran CHAR(3) NOT NULL
, ChildLevel INT NOT NULL
, ChildClass CHAR(1) NOT NULL
, CHILDPATH VARCHAR(254) NOT NULL
, ENTITY1TYPE CHAR(32) NOT NULL
, ENTITY1ID INTEGER NOT NULL
, ENTITY2TYPE CHAR(32) NOT NULL
, ENTITY2ID INTEGER NOT NULL
)
;
create index opicm.trsNetterFinal_ix1 on opicm.trsNetterFinal(SessionID, RootID,RootType, Enterprise) CLUSTER;
create index opicm.trsNetterFinal_ix2 on opicm.trsNetterFinal(SessionID, ChildID,ChildType, Enterprise)

DROP TABLE OPICM.TRSNETTERATTS;
CREATE TABLE OPICM.TRSNETTERATTS
(
  SessionID int not null
, EntityID int Not null
, EntityType CHAR(32) not null
, Enterprise CHAR(16) not null
) IN TSPACE01 INDEX IN ISPACE01;
DROP INDEX OPICM.TRSNETTERATTS_PK;
CREATE UNIQUE INDEX OPICM.TRSNETTERATTS_PK ON OPICM.TRSNETTERATTS(EntityID, EntityType, Sessionid, Enterprise) cluster;
CREATE INDEX OPICM.TRSNETTERATTS_IX1 ON OPICM.TRSNETTERATTS(EntityType, Sessionid, Enterprise);

--
-- snag indices
-- db2look -d opicmpdh -p -e|sed -e '/./{H;$!d;}' -e 'x;/INDEX/!d;'|sed -e '/./{H;$!d;}' -e 'x;/ ON /!d;'
--

--alter table opicm.flag add column REF_NLSID INTEGER;
--alter table opicm.flagx add column REF_NLSID INTEGER;
--update opicm.flag set REF_NLSID=1 where REF_NLSID is null;
--update opicm.flagx set REF_NLSID=1 where REF_NLSID is null;
