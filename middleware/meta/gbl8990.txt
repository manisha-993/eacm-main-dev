@name=GBL8990
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative
@nulls_ok=true

Manages the update of a Productflag Record

//
// $Log: gbl8990.txt,v $
// Revision 1.5  2010/06/21 15:42:46  wendy
// Exceeded RMI 64k static block limit, not needed for RMI
//
// Revision 1.4  2009/10/20 00:22:02  rick
// update to change long datatype to sqlint32
//
// Revision 1.3  2008/11/17 15:16:35  rick
// Updates for LACTO
//
// Revision 1.2  2008/09/12 22:15:03  yang
// syntax
//
// Revision 1.1  2008/09/12 20:32:51  yang
// initial load
//
//

@desc= Manages the update of a Productflag Reocrd
@fenced=true
@results=0
@parmstyle=GENERAL
@sql

EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl8990.txt,v 1.5 2010/06/21 15:42:46 wendy Exp $";
sqlint32 count = 0;
char tstamp[27];
EXEC SQL END DECLARE SECTION;
@execute

//
// BEGIN ERROR CHECK DECLARE SECTION
//
const int SQLERROR = -1;
const int SQLCOMPLETE = 1;
//set this to SQLCOMPLETE when finished!
int m_iSQLState = SQLERROR;
EXEC SQL WHENEVER SQLERROR GOTO error_exit;
EXEC SQL WHENEVER SQLWARNING CONTINUE;
//
// END ERROR CHECK DECLARE SECTION
//

EXEC SQL VALUES (CURRENT TIMESTAMP) INTO :tstamp;

FILE *t;
mode_t Mode2;
Mode2 = 0777;
chmod("/tmp/rick.log",Mode2);
// append...
t=fopen("/tmp/rick.log","a+");
//t=fopen("/tmp/rick.log","w");
fprintf(t,"%s: -->start of stored procedure GBL8990\n",tstamp);

EXEC SQL

Select count(*) into :count
from gbli.Prodflag where
enterprise = :enterprise and
LOCEntityType = :locentitytype and
LOCEntityID = :locentityid and
countrylist = :countrylist and
nlsid = :nlsid and 
cataudience_fc = :cataudience_fc
;

if (count == 0 && isactive == 0) {
// do nothing
} else if (count == 0 && isactive == 1) {
// insert this guy
EXEC SQL
insert into gbli.prodflag
(
enterprise,
countrycode,
languagecode,
nlsid,
countrylist,
locentitytype,
locentityid,
cataddtocart_fc,
catbuyable_fc,
catcustimize_fc,
cathide_fc,
catnewoff_fc,
catnewoff_der,
cataudience_fc,
valfrom,
valto,
isactive
)
values (
:enterprise,
:countrycode,
:languagecode,
:nlsid,
:countrylist,
:locentitytype,
:locentityid,
:cataddtocart_fc,
:catbuyable_fc,
:catcustimize_fc,
:cathide_fc,
:catnewoff_fc,
:catnewoff_fc,
:cataudience_fc,
current timestamp,
'9999-12-31-00.00.00.000000',
1
);
} else if (count != 0 && isactive == 1) {
// update this guy
EXEC SQL
update gbli.prodflag
set
enterprise = :enterprise,
countrycode = :countrycode,
languagecode = :languagecode,
nlsid = :nlsid,
countrylist = :countrylist,
locentitytype = :locentitytype,
locentityid = :locentityid,
cataddtocart_fc = :cataddtocart_fc,
catbuyable_fc = :catbuyable_fc,
catcustimize_fc = :catcustimize_fc,
cathide_fc = :cathide_fc,
catnewoff_fc = :catnewoff_fc,
catnewoff_der = :catnewoff_fc,
cataudience_fc = :cataudience_fc,
valfrom = current timestamp,
valto = '9999-12-31-00.00.00.000000',
isactive = 1
where
enterprise = :enterprise and
locentitytype = :locentitytype and
locentityid = :locentityid and
countrylist = :countrylist and
nlsid = :nlsid and 
cataudience_fc = :cataudience_fc and 
(cataddtocart_fc <> :cataddtocart_fc or 
catbuyable_fc <> :catbuyable_fc or
catcustimize_fc <> :catcustimize_fc or
cathide_fc <> :cathide_fc or
catnewoff_fc <> :catnewoff_fc or 
isactive = 0)
;
} else {
// turn it off
EXEC SQL
update gbli.prodflag
set
valfrom = current timestamp,
valto  =  current timestamp,
isactive = 0
where
enterprise = :enterprise and
locentitytype = :locentitytype and
locentityid = :locentityid and
countrylist = :countrylist and
nlsid = :nlsid and 
cataudience_fc = :cataudience_fc and 
isactive=1
;
}


//
// BEGIN ERROR CHECK SECTION
//

// this won't get executed if sql error occurs
m_iSQLState = SQLCOMPLETE;

error_exit:

if(m_iSQLState == SQLERROR) {

    // ensure no infinite loops in the case that a failed SQL connection is used past this point...
    EXEC SQL WHENEVER SQLERROR CONTINUE;


    fprintf(t,"********************  GBL8990 SQLCA DUMP  ********************\n");
    char msg[1025];
    sqlaintp(msg, 1024, 0, &sqlca);
    fprintf(t,"msg:%s\n",msg);
    fprintf(t,"SQLCAID: %s\n", sqlca.sqlcaid);
    fprintf(t,"SQLCABC: %d\n", sqlca.sqlcabc);
    fprintf(t,"SQLCODE: %d\n", sqlca.sqlcode);
    fprintf(t,"SQLERRML: %d\n", sqlca.sqlerrml);
    fprintf(t,"SQLERRMC: %s\n", sqlca.sqlerrmc);
    fprintf(t,"SQLERRP: %s\n", sqlca.sqlerrp);
    fprintf(t,"SQLERRD[0]: %d\n", sqlca.sqlerrd[0]);
    fprintf(t,"SQLERRD[1]: %d\n", sqlca.sqlerrd[1]);
    fprintf(t,"SQLERRD[2]: %d\n", sqlca.sqlerrd[2]);
    fprintf(t,"SQLERRD[3]: %d\n", sqlca.sqlerrd[3]);
    fprintf(t,"SQLERRD[4]: %d\n", sqlca.sqlerrd[4]);
    fprintf(t,"SQLERRD[5]: %d\n", sqlca.sqlerrd[5]);
    fprintf(t,"SQLWARN: %s\n", sqlca.sqlwarn);
    fprintf(t,"SQLSTATE: %s\n", sqlca.sqlstate);
    //
    // Dumping Input params:
    fprintf(t,"enterprise:\"%s\"\n",enterprise);
    fprintf(t,"countrycode:\"%s\"\n",countrycode);
    fprintf(t,"languagecode:\"%s\"\n",languagecode);
    fprintf(t,"nlsid:\"%d\"\n",nlsid);
    fprintf(t,"countrylist:\"%s\"\n",countrylist);
    fprintf(t,"locentitytype:\"%s\"\n",locentitytype);
    fprintf(t,"locentityid:\"%d\"\n",locentityid);
    fprintf(t,"cataddtocart_fc:\"%s\"\n",cataddtocart_fc);
    fprintf(t,"catbuyable_fc:\"%s\"\n",catbuyable_fc);
    fprintf(t,"catcustimize_fc:\"%s\"\n",catcustimize_fc);
    fprintf(t,"cathide_fc:\"%s\"\n",cathide_fc);
    fprintf(t,"catnewoff_fc:\"%s\"\n",catnewoff_fc);
    fprintf(t,"cataudience_fc:\"%s\"\n",cataudience_fc);
    fprintf(t,"isactive:\"%d\"\n",isactive);
    // End dump params
    fprintf(t,"******************  END OF GBL8990 SQLCA DUMP  *******************\n");
}
//
// END ERROR CHECK SECTION
//

fprintf(t,"%s:end of GBL8990\n",tstamp);
fclose(t);


//EXEC SQL COMMIT WORK;

@parameters
inout ReturnStatus int
in enterprise varchar(8)
in countrycode varchar(2)
in languagecode varchar(2)
in nlsid int
in countrylist varchar(8)
in locentitytype varchar(32)
in locentityid int
in cataddtocart_fc varchar(16),
in catbuyable_fc varchar(16),
in catcustimize_fc varchar(16),
in cathide_fc varchar(16),
in catnewoff_fc varchar(16),
in cataudience_fc varchar(16),
in isactive int
@end

