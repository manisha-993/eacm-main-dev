@name=GBL2097
@noremote=true
@dbase=opicmpdh
@narrative
$Log: gbl2097.txt,v $
Revision 1.34  2010/06/21 15:42:46  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.33  2009/10/20 00:21:59  rick
update to change long datatype to sqlint32

Revision 1.32  2006/04/11 17:03:21  joan
checking entityid > 0 for GroupABR

Revision 1.31  2005/08/05 19:58:59  joan
fixes

Revision 1.30  2005/08/05 17:59:01  joan
adjust for group abr

Revision 1.29  2005/05/03 19:58:34  joan
fixes

Revision 1.28  2005/05/03 19:31:36  joan
fixes

Revision 1.27  2005/03/25 22:43:23  joan
add Ref_NLSID for insert

Revision 1.26  2005/03/25 18:29:01  roger
Reinstate RefNLSID

Revision 1.25  2005/03/23 22:14:45  dave
some comments for reminder on where flag
table gets touched

Revision 1.24  2005/03/23 22:09:58  dave
more ref_nlsid

Revision 1.23  2005/03/23 21:56:42  dave
some more explicite stuff

Revision 1.22  2005/03/14 17:09:39  dave
added one to many parms

Revision 1.21  2005/03/14 17:01:14  dave
backing out multiple nls flag changes

Revision 1.20  2004/10/20 21:01:38  dave
changes to gen parm

Revision 1.19  2004/09/21 22:08:04  joan
work on group abr

Revision 1.18  2004/05/05 17:09:09  joan
make more changes to group abr

Revision 1.17  2004/05/04 21:31:40  joan
make changes

Revision 1.16  2004/05/04 17:21:00  joan
fix error

Revision 1.15  2004/05/04 15:49:01  joan
fix compile

Revision 1.14  2004/05/04 15:26:50  joan
fix compile

Revision 1.13  2004/05/04 15:18:57  joan
fix error

Revision 1.12  2004/05/03 23:21:33  joan
fix compile

Revision 1.11  2004/05/03 23:12:36  joan
work on group queue

Revision 1.10  2004/02/20 20:21:48  roger
Must be @t_schema

Revision 1.9  2004/02/20 18:09:29  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.8  2003/09/08 16:31:10  roger
Enterprise was changed to 16 char length

Revision 1.7  2003/07/11 22:42:56  dave
fixing a template

Revision 1.6  2003/03/12 18:24:17  dave
simplifying and preparing for the Tagging requirement

Revision 1.5  2001/11/15 18:51:32  dave
changed attributevalue(8), attributevalue(32)

Revision 1.4  2001/10/23 15:54:44  roger
Remove features not used

Revision 1.3  2001/10/23 15:47:40  roger
Need logic change to ignore request to change to current values

Revision 1.2  2001/10/22 21:25:16  roger
Change logic - ignore changes where values would be unchanged

Revision 1.1  2001/03/21 18:55:28  roger
Pulled individual SPs out of updateroutines.txt and made separate file for each

Revision 1.4  2001/03/19 20:31:15  roger
New sp GBL1044

Revision 1.3  2001/03/16 18:27:55  roger
Added branding feature to stored procedures

Revision 1.2  2001/03/16 03:39:00  roger
Added Log keyword

@addperm=true
@type=insert
@parmstyle=GENERAL
@table=@t_schema.Flag
@desc=Insert/Update a row in @table (Multiple Flag Case)
@fenced=true
@results=0
@update_cols=Enterprise EntityType EntityID AttributeCode AttributeValue
@insert_cols=Enterprise EntityType EntityID AttributeCode AttributeValue Ref_NLSID
@execute
//
// ok.  If we are flag and text
// and the EntityType/AttributeCode combo goes by the
// radar screen.. we need  to do some inserting into the 
// queue table so people see this thing... becausee
// we want processes to see it in the queue table.
//
// This is a one way valve or trip wire..
//
// REF_NLSID

if (strcmp("opicm.Flag","@table") == 0) {   

    EXEC SQL BEGIN DECLARE SECTION;
    sqlint32 iStatus = 0;
    char cQueueName [33];
    char tmpEntityType [32];
    char cDirection [32];
    sqlint32 iCount;
    
    EXEC SQL END DECLARE SECTION;
    char acQueueName[100][33];
    char atmpEntityType[100][32];
    char acDirection[100][32];
    sqlint32 iCQueue;
    sqlint32 i;

    EXEC SQL DECLARE  queueGroupABR CURSOR FOR
    SELECT RTRIM(ml1.LinkCode), RTRIM(COALESCE(ML2.linkcode,'NONE')), RTRIM(COALESCE(ML2.linkvalue,'NA'))
            
    from @t_schema.MetaLinkAttr ml1
    
    left join @t_schema.metalinkattr ml2 on
        ml2.enterprise = :Enterprise
    and ml2.linktype = 'GroupABR/Relator/Entity'
    and ml2.linktype1 = RTRIM(ml1.linkcode)
    and ml2.linktype2 = :EntityType
    and ml2.valto > current timestamp and ml2.effto > current timestamp
    
    WHERE
       ml1.Enterprise = :Enterprise
    AND ml1.LinkType = 'Status/Trigger/GroupABR'
    AND ml1.LinkType1 in (:AttributeCode, 'ALL')
    AND ml1.LinkType2 in (:AttributeValue, 'ALL')
    AND ml1.LinkValue = :EntityType
    AND ml1.ValTo = :forever
    AND ml1.EffTo > CURRENT TIMESTAMP
    ;

    iStatus = -1;
    EXEC SQL 
    SELECT RTRIM(LinkCode), INT(RTRIM(LinkValue)) INTO :cQueueName, :iStatus from @t_schema.MetaLinkAttr 
    WHERE
       Enterprise = :Enterprise
    AND LinkType = 'Status/Trigger/GroupQueue'
    AND LinkType1 = :AttributeCode
    AND LinkType2 = :AttributeValue
    AND ValTo = :forever
    AND EffTo > CURRENT TIMESTAMP
    ;
    
    // Do you have a hit?
    if (iStatus != -1) {
        
        EXEC SQL INSERT INTO @t_schema.QUEUE VALUES 
        (
        :Enterprise
        ,0
        ,0
        ,:cQueueName
        ,:iStatus
        ,:EntityType
        ,:EntityID
        ,CURRENT TIMESTAMP
        ,'1980-01-01-00.00.00.000000'
        ,'1980-01-01-00.00.00.000000'
        ,'9999-12-31-00.00.00.000000'
        );
    }
    
    if (EntityID > 0) {
        strcpy(cQueueName, "NONE");
        iCQueue = 1;
        EXEC SQL OPEN queueGroupABR;
        do {
            EXEC SQL FETCH queueGroupABR INTO :cQueueName, :tmpEntityType, :cDirection;
            if (SQLCODE != 0) break;
            strcpy(acQueueName[iCQueue],cQueueName);
            strcpy(atmpEntityType[iCQueue],tmpEntityType);
            strcpy(acDirection[iCQueue++],cDirection);
        }   while (1);
        EXEC SQL CLOSE queueGroupABR WITH RELEASE;
        EXEC SQL COMMIT WORK;

        for (i=1; i < iCQueue; i++) {
            strcpy(cQueueName, acQueueName[i]);
            strcpy(tmpEntityType, atmpEntityType[i]);
            strcpy(cDirection, acDirection[i]);

          // Do you have a hit?
            if (strcmp(cQueueName,"NONE") != 0) {
                iCount =0;
                if (strcmp(tmpEntityType,"NONE") == 0) {
                    EXEC SQL select count(*) INTO :iCount from opicm.queue
                where enterprise = :Enterprise
            and queue = :cQueueName
            and entitytype = :EntityType
            and entityid = :EntityID
            and status in (20, 50);
            
            if (iCount <= 0) {
                    EXEC SQL INSERT INTO @t_schema.QUEUE VALUES 
                (   
                :Enterprise
                ,:OPENID
                ,0
            ,:cQueueName
                ,20
                ,:EntityType
                ,:EntityID
                ,CURRENT TIMESTAMP
                ,'1980-01-01-00.00.00.000000'
                ,'1980-01-01-00.00.00.000000'
                ,'9999-12-31-00.00.00.000000'
                );
            }
                } else {
                    if (strcmp(cDirection,"U") == 0) {
                EXEC SQL select count(*) INTO :iCount from opicm.queue Q
                join opicm.relator R1
                on  R1.enterprise = :Enterprise
                and R1.entitytype = :EntityType
                and R1.entityid = :EntityID
                and R1.entity1type = :tmpEntityType
                and R1.valto > current timestamp and R1.effto > current timestamp
    
                where Q.enterprise = :Enterprise
                and Q.queue = :cQueueName
                and Q.entitytype = :tmpEntityType
                and Q.entityid = R1.entity1id
                and Q.status in (20, 50);

                if (iCount <= 0) {         
                    EXEC SQL INSERT INTO @t_schema.QUEUE  
                SELECT
                :Enterprise
                    ,:OPENID
                ,0
                ,:cQueueName
                ,20
                ,:tmpEntityType
                ,entity1id
                ,CURRENT TIMESTAMP
                ,'1980-01-01-00.00.00.000000'
                ,'1980-01-01-00.00.00.000000'
                ,'9999-12-31-00.00.00.000000'
                from opicm.relator 
                where enterprise = :Enterprise
                and entitytype = :EntityType
                and entityid = :EntityID
                and entity1type = :tmpEntityType
                and valto > current timestamp and effto > current timestamp
                ;
                }
                    } else {
                EXEC SQL select count(*) INTO :iCount from opicm.queue Q
                join opicm.relator R1
                on  R1.enterprise = :Enterprise
                and R1.entitytype = :EntityType
                and R1.entityid = :EntityID
                and R1.entity2type = :tmpEntityType
                and R1.valto > current timestamp and R1.effto > current timestamp

                where Q.enterprise = :Enterprise
                and Q.queue = :cQueueName
                and Q.entitytype = :tmpEntityType
                and Q.entityid = R1.entity2id
                and Q.status in (20, 50);

                if (iCount <= 0) {           
                    EXEC SQL INSERT INTO @t_schema.QUEUE  
                SELECT
                :Enterprise
                ,:OPENID
                ,0
                ,:cQueueName
                ,20
                ,:tmpEntityType
                ,Entity2ID
                ,CURRENT TIMESTAMP
                ,'1980-01-01-00.00.00.000000'
                ,'1980-01-01-00.00.00.000000'
                ,'9999-12-31-00.00.00.000000'
                from opicm.relator 
                where enterprise = :Enterprise
                and entitytype = :EntityType
                and entityid = :EntityID
                and entity2type = :tmpEntityType
                and valto > current timestamp and effto > current timestamp
                ;
                }
                    }
                }
            }
        }
    }
}

EXEC SQL COMMIT WORK;

@parameters
inout ReturnStatus int
in OPENID int
in Enterprise varchar(16)
in EntityType varchar(32)
inout EntityID int
in AttributeCode varchar(32)
in AttributeValue varchar(32)
in TranID int
in EffFrom varchar(26)
in EffTo varchar(26)
in Ref_NLSID int
@end



