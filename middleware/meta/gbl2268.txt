@name=GBL2268
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative
---------------------------------------------------------------------------------
--  This guy makes copies attributes of an entity to a (new/another one)
--  If the target entityid = 0, we will generate a new one
--  It copies all attributes (Text, ID, Flag, Longtext, Blob)
--  It will skip any attribute that has an entry in the metalinkattribute
--  'Entity/Attribute' with a linkcode = 'Copy' and a linkvalue = 'N'
--  You have to have at least 'R' authority on the Entity and Attributes
--  in order to copy.
---------------------------------------------------------------------------------
$Log: gbl2268.txt,v $
Revision 1.40  2010/06/21 15:42:43  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.39  2005/03/25 22:04:35  dave
more fix

Revision 1.38  2005/03/25 19:02:13  dave
minor sp compile adjust ments

Revision 1.37  2005/03/25 18:33:27  roger
fix it

Revision 1.36  2005/03/25 18:29:01  roger
Reinstate RefNLSID

Revision 1.35  2005/03/23 22:14:45  dave
some comments for reminder on where flag
table gets touched

Revision 1.34  2005/03/23 21:56:42  dave
some more explicite stuff

Revision 1.33  2005/01/13 17:05:36  joan
add special copy for FEATURECODE

Revision 1.32  2004/10/20 21:01:39  dave
changes to gen parm

Revision 1.31  2004/02/20 20:21:49  roger
Must be @t_schema

Revision 1.30  2004/02/20 18:09:29  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.29  2003/12/11 00:26:10  joan
fix error

Revision 1.28  2003/12/10 23:27:49  joan
fix error

Revision 1.27  2003/12/10 21:01:03  joan
adjust for ExcludeCopy

Revision 1.26  2003/09/15 21:33:59  minhthy
ADD DISTINCT

Revision 1.25  2003/09/08 16:31:11  roger
Enterprise was changed to 16 char length

Revision 1.24  2003/07/23 17:11:10  joan
adjust for XML attributes

Revision 1.23  2003/06/06 18:05:21  dave
typo Atr Attr

Revision 1.22  2003/06/06 17:34:47  dave
distinct to 2268

Revision 1.21  2003/06/05 20:01:04  dave
minor syntax

Revision 1.20  2003/04/17 19:24:38  dave
need OPENID in sp

Revision 1.19  2003/04/17 17:56:14  dave
clean up link,deactivate, tagging

Revision 1.18  2001/07/21 04:02:11  roger
Change MetaLinkAttribute to MetaLinkAttr
Change "opicm" to @t_schema in some

Revision 1.17  2001/05/02 04:47:05  dave
syntax fix

Revision 1.16  2001/05/02 04:07:42  dave
more xtable follow through stuff

Revision 1.15  2001/04/24 23:47:35  dave
Added Copy of to the display name

Revision 1.14  2001/03/27 18:36:47  dave
fixed BLOB SQL (MLA & MLA1 w/ left outer join)

Revision 1.13  2001/03/26 18:46:03  dave
MLA to MLA1 fix

Revision 1.12  2001/03/26 18:29:12  dave
uncommented Commented out odd enterprise is null.  This allows people to filter out specific attributes for copy regardless of role and permissions

Revision 1.11  2001/03/23 19:00:31  dave
Commented out the creation of new entities.

Revision 1.10  2001/03/23 18:57:27  dave
Commented out the @genid portion of the code this will not generate new Entities.. It just copies the attributes between existing Entities

Revision 1.9  2001/03/23 17:22:34  dave
Based code for the copy/paste (changed to copyLink).. more to follow

Revision 1.8  2001/03/22 16:42:45  roger
Misc clean up

Revision 1.7  2001/03/22 16:25:09  roger
Commented out odd enterprise is null

Revision 1.6  2001/03/22 01:05:54  roger
Misc clean up

Revision 1.5  2001/03/22 01:03:57  roger
Removed hard-coded reference to L2 enterprise

Revision 1.4  2001/03/17 04:47:10  roger
Misc clean up

Revision 1.3  2001/03/16 18:27:51  roger
Added branding feature to stored procedures

Revision 1.2  2001/03/16 03:38:57  roger
Added Log keyword

@desc=Copy attributes of an entity to another one
@fenced=true
@results=0
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl2268.txt,v 1.40 2010/06/21 15:42:43 wendy Exp $";
EXEC SQL END DECLARE SECTION;
@execute

//
//  REF_NLSID
if (strcmp(ExcludeCopy,"0") == 0) {
    // Copy Text rows
    EXEC SQL
    INSERT
    INTO @t_schema.Text
    SELECT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,T.AttributeCode
    ,CASE T.ATTRIBUTECODE 
       WHEN 'NAME' THEN  'Copy Of ' CONCAT  T.AttributeValue
       WHEN 'FEATURECODE' THEN  '$' CONCAT  T.AttributeValue
       WHEN 'ID' THEN :now  CONCAT ' ' CONCAT CHAR(:OPENID)
       ELSE T.ATTRIBUTEVALUE
     END 
    ,NLSID
    ,:now
    ,:forever
    ,T.EffFrom
    ,T.EffTo
    ,:OPENID
    ,:TRANID
    FROM @t_schema.Text T
    INNER JOIN @t_schema.MetaLinkAttr MLA ON
        MLA.Enterprise = :Enterprise
    AND MLA.LinkType = 'Role/Attribute'
    AND MLA.LinkType1 = :RoleCode
    AND MLA.LinkType2 = T.AttributeCode
    AND MLA.LinkCode = 'Capability'
    AND MLA.LinkValue IN ('W','R','S')
    AND MLA.ValFrom <= :now AND :now < MLA.ValTo AND MLA.EffFrom <= :now AND :now < MLA.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
        MLA1.Enterprise = :Enterprise
    AND MLA1.LinkType = 'Entity/Attribute'
    AND MLA1.LinkType1 = T.EntityType
    AND MLA1.LinkType2 = T.AttributeCode
    AND MLA1.LinkCode = 'Copy'
    AND MLA1.LinkValue = 'N'
    AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
    WHERE
        T.Enterprise = :Enterprise
    AND T.EntityType = :FromEntityType
    AND T.EntityID = :FromEntityID
    AND MLA1.Enterprise is NULL
    AND T.ValFrom <= :ValOn AND :ValOn < T.ValTo AND T.EffFrom <= :EffOn AND :EffOn < T.EffTo
    ;

    //
    //  Now.. copy the ones into the target entity.. that are not currently there.. but have
    //  Default global default values in them
    //
    EXEC SQL INSERT INTO @t_schema.Text
    SELECT
     DISTINCT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,ML.LinkType1
    ,RTRIM(ML.LinkValue)
    ,1
    ,:now
    ,:forever
    ,:now
    ,:forever
    ,:OPENID
    ,:TRANID
    FROM @t_schema.MetaLinkAttr ML1
    INNER JOIN @t_schema.MetaEntity ME ON
        ME.Enterprise = :Enterprise
    AND ME.EntityType = ML1.LinkType2
    AND ME.EntityClass IN ('T','I')
    AND ME.ValFrom <= :now AND :now < ME.ValTo AND ME.EffFrom <= :now AND :now < ME.EffTo
    INNER JOIN @t_schema.MetaLinkAttr ML ON
        ML.Enterprise = :Enterprise
    AND ML.LinkType = 'Attribute/Test'
    AND ML.LinkType1 = ML1.LinkType2
    AND ML.LinkType2 = 'DEFAULT'
    AND ML.ValFrom <= :now AND :now < ML.ValTo AND ML.EffFrom <= :now AND :now < ML.EffTo
    LEFT OUTER JOIN @t_schema.Text T1 ON
        T1.Enterprise = :Enterprise
    AND T1.EntityType = :EntityType
    AND T1.EntityID = :EntityID
    AND T1.ATTRIBUTECODE = ML.LinkType1
    AND T1.NLSID = 1
    AND T1.ValFrom <= :now AND :now < T1.ValTo AND T1.EffFrom <= :now AND :now < T1.EffTo
    WHERE
            ML1.Enterprise = :Enterprise
    AND ML1.LinkType= 'Entity/Attribute'
    AND ML1.LinkType1 = :EntityType
    AND ML1.LinkCode = 'EntityAttribute'
    AND ML1.ValFrom <= :now AND :now < ML1.ValTo AND ML1.EffFrom <= :now AND :now < ML1.EffTo
    AND T1.Enterprise IS NULL
    ;


    // Now insert the information to the shadow table
    EXEC SQL 
    INSERT INTO @t_schema.TextX 
    SELECT 
      T.Enterprise
     ,T.EntityType
     ,T.EntityID
     ,T.AttributeCode
     ,T.AttributeValue
     ,T.NLSID
     ,T.ValFrom
     ,T.ValTo
     ,T.EffFrom
     ,T.EffTo
     ,T.OPENID
     ,T.TRANID
    FROM @t_schema.Text T
    WHERE
        T.Enterprise = :Enterprise
    AND T.EntityTYPE = :EntityType
    AND T.EntityID = :EntityID
    AND T.Valfrom = :now
    AND T.ValTo = :forever
    ;

    // Copy Flag rows
    EXEC SQL
    INSERT
    INTO @t_schema.Flag
    (
      Enterprise
    , EntityType
    , EntityID
    , AttributeCode
    , AttributeValue
    , Valfrom
    , Valto
    , EffFrom
    , Effto
    , OPENID
    , TranID
    , Ref_NLSID   
    )
    SELECT DISTINCT
      :Enterprise
    , :EntityType
    , :EntityID
    , F.AttributeCode
    , F.AttributeValue
    , :now
    , :forever
    , F.EffFrom
    , F.EffTo
    , :OPENID
    , :TRANID
    , F.Ref_NLSID
    FROM @t_schema.Flag F
    INNER JOIN @t_schema.MetaLinkAttr MLA ON
        MLA.Enterprise = :Enterprise
    AND MLA.LinkType = 'Role/Attribute'
    AND MLA.LinkType1 = :RoleCode
    AND MLA.LinkType2 = F.AttributeCode
    AND MLA.LinkCode = 'Capability'
    AND MLA.LinkValue IN ('W','R','S')
    AND MLA.ValFrom <= :now AND :now < MLA.ValTo AND MLA.EffFrom <= :now AND :now < MLA.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
        MLA1.Enterprise = :Enterprise
    AND MLA1.LinkType = 'Entity/Attribute'
    AND MLA1.LinkType1 = F.EntityType
    AND MLA1.LinkType2 = F.AttributeCode
    AND MLA1.LinkCode = 'Copy'
    AND MLA1.LinkValue = 'N'
    AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
    WHERE
        F.Enterprise = :Enterprise
    AND F.EntityType = :FromEntityType
    AND F.EntityID = :FromEntityID
    AND MLA1.Enterprise is NULL
    AND F.ValFrom <= :ValOn AND :ValOn < F.ValTo AND F.EffFrom <= :EffOn AND :EffOn < F.EffTo
    ;

    EXEC SQL INSERT INTO @t_schema.Flag
    (
      Enterprise
    , EntityType
    , EntityID
    , AttributeCode
    , AttributeValue
    , Valfrom
    , Valto
    , EffFrom
    , Effto
    , OPENID
    , TranID
    , Ref_NLSID 
    )
    SELECT DISTINCT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,ML.LinkType1
    ,RTRIM(ML.LinkValue)
    ,:now
    ,:forever
    ,:now
    ,:forever
    ,:OPENID
    ,:TRANID
    , 1
    FROM @t_schema.MetaLinkAttr ML1
    INNER JOIN @t_schema.MetaEntity ME ON
        ME.Enterprise = :Enterprise
    AND ME.EntityType = ML1.LinkType2
    AND ME.EntityClass in ('F','U','S','A')
    AND ME.ValFrom <= :now AND :now < ME.ValTo AND ME.EffFrom <= :now AND :now < ME.EffTo
    INNER JOIN @t_schema.MetaLinkAttr ML ON
        ML.Enterprise = :Enterprise
    AND ML.LinkType = 'Attribute/Test'
    AND ML.LinkType1 = ML1.LinkType2
    AND ML.LinkType2 = 'DEFAULT'
    AND ML.ValFrom <= :now AND :now < ML.ValTo AND ML.EffFrom <= :now AND :now < ML.EffTo
    LEFT OUTER JOIN @t_schema.Flag F1 ON
        F1.Enterprise = :Enterprise
    AND F1.EntityType = :EntityType
    AND F1.EntityID = :EntityID
    AND F1.ATTRIBUTECODE = ML.LinkType1
    AND F1.ValFrom <= :now AND :now < F1.ValTo AND F1.EffFrom <= :now AND :now < F1.EffTo
    WHERE
            ML1.Enterprise = :Enterprise
    AND ML1.LinkType= 'Entity/Attribute'
    AND ML1.LinkType1 = :EntityType
    AND ML1.LinkCode = 'EntityAttribute'
    AND ML1.ValFrom <= :now AND :now < ML1.ValTo AND ML1.EffFrom <= :now AND :now < ML1.EffTo
    AND F1.Enterprise IS NULL
    ;
    // Now insert the information to the shadow table
    EXEC SQL 
    INSERT INTO @t_schema.FlagX 
    (
      Enterprise
    , EntityType
    , EntityID
    , AttributeCode
    , AttributeValue
    , Valfrom
    , Valto
    , EffFrom
    , Effto
    , OPENID
    , TranID
    , Ref_NLSID 
    )
    SELECT 
      F.Enterprise
     ,F.EntityType
     ,F.EntityID
     ,F.AttributeCode
     ,F.AttributeValue
     ,F.ValFrom
     ,F.ValTo
     ,F.EffFrom
     ,F.EffTo
     ,F.OPENID
     ,F.TRANID
     ,F.REF_NLSID
    FROM @t_schema.Flag F
    WHERE
        F.Enterprise = :Enterprise
    AND F.EntityTYPE = :EntityType
    AND F.EntityID = :EntityID
    AND F.Valfrom = :now
    AND F.ValTo = :forever
    ;

    // Copy LongText rows
    EXEC SQL
    INSERT
    INTO @t_schema.LongText
    SELECT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,LT.AttributeCode
    ,NLSID
    ,:now
    ,:forever
    ,LT.EffFrom
    ,LT.EffTo
    ,:OPENID
    ,:TRANID
    ,LT.AttributeValue
    FROM @t_schema.LongText LT
    INNER JOIN @t_schema.MetaLinkAttr MLA ON
        MLA.Enterprise = :Enterprise
    AND MLA.LinkType = 'Role/Attribute'
    AND MLA.LinkType1 = :RoleCode
    AND MLA.LinkType2 = LT.AttributeCode
    AND MLA.LinkCode = 'Capability'
    AND MLA.LinkValue IN ('R','W','S')
    AND MLA.ValFrom <= :now AND :now < MLA.ValTo AND MLA.EffFrom <= :now AND :now < MLA.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
        MLA1.Enterprise = :Enterprise
    AND MLA1.LinkType = 'Entity/Attribute'
    AND MLA1.LinkType1 = LT.EntityType
    AND MLA1.LinkType2 = LT.AttributeCode
    AND MLA1.LinkCode = 'Copy'
    AND MLA1.LinkValue = 'N'
    AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
    WHERE
        LT.Enterprise = :Enterprise
    AND LT.EntityType = :FromEntityType
    AND LT.EntityID = :FromEntityID
    AND MLA1.Enterprise is NULL
    AND LT.ValFrom <= :ValOn AND :ValOn < LT.ValTo AND LT.EffFrom <= :EffOn AND :EffOn < LT.EffTo
    ;

    EXEC SQL INSERT INTO @t_schema.LongText
    SELECT
        DISTINCT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,ML.LinkType1
    ,1
    ,:now
    ,:forever
    ,:now
    ,:forever
    ,:OPENID
    ,:TRANID
    ,RTRIM(ML.LinkValue)
    FROM @t_schema.MetaLinkAttr ML1
    INNER JOIN @t_schema.MetaEntity ME ON
        ME.Enterprise = :Enterprise
    AND ME.EntityType = ML1.LinkType2
    AND ME.EntityClass IN ('L','X')
    AND ME.ValFrom <= :now AND :now < ME.ValTo AND ME.EffFrom <= :now AND :now < ME.EffTo
    INNER JOIN @t_schema.MetaLinkAttr ML ON
        ML.Enterprise = :Enterprise
    AND ML.LinkType = 'Attribute/Test'
    AND ML.LinkType1 = ML1.LinkType2
    AND ML.LinkType2 = 'DEFAULT'
    AND ML.ValFrom <= :now AND :now < ML.ValTo AND ML.EffFrom <= :now AND :now < ML.EffTo
    LEFT OUTER JOIN @t_schema.LongText T1 ON
        T1.Enterprise = :Enterprise
    AND T1.EntityType = :EntityType
    AND T1.EntityID = :EntityID
    AND T1.ATTRIBUTECODE = ML.LinkType1
    AND T1.NLSID = 1
    AND T1.ValFrom <= :now AND :now < T1.ValTo AND T1.EffFrom <= :now AND :now < T1.EffTo
    WHERE
            ML1.Enterprise = :Enterprise
    AND ML1.LinkType= 'Entity/Attribute'
    AND ML1.LinkType1 = :EntityType
    AND ML1.LinkCode = 'EntityAttribute'
    AND ML1.ValFrom <= :now AND :now < ML1.ValTo AND ML1.EffFrom <= :now AND :now < ML1.EffTo
    AND T1.Enterprise IS NULL
    ;

    // Now insert the information to the shadow table
    EXEC SQL 
    INSERT INTO @t_schema.LongTextX 
    SELECT 
      LT.Enterprise
     ,LT.EntityType
     ,LT.EntityID
     ,LT.AttributeCode
     ,LT.NLSID
     ,LT.ValFrom
     ,LT.ValTo
     ,LT.EffFrom
     ,LT.EffTo
     ,LT.OPENID
     ,LT.TRANID
     ,LT.AttributeValue
    FROM @t_schema.LongText LT
    WHERE
        LT.Enterprise = :Enterprise
    AND LT.EntityTYPE = :EntityType
    AND LT.EntityID = :EntityID
    AND LT.Valfrom = :now
    AND LT.ValTo = :forever
    ;

    // Copy Blob rows
    EXEC SQL
    INSERT
    INTO @t_schema.Blob
    SELECT
      :Enterprise
    , :EntityType
    , :EntityID
    , BL.AttributeCode
    , BL.BlobExtension
    , NLSID
    , :now
    , :forever
    , BL.EffFrom
    , BL.EffTo
    , :OPENID
    , :TRANID
    , BL.AttributeValue
    FROM @t_schema.Blob BL
    INNER JOIN @t_schema.MetaLinkAttr MLA ON
        MLA.Enterprise = :Enterprise
    AND MLA.LinkType = 'Role/Attribute'
    AND MLA.LinkType1 = :RoleCode
    AND MLA.LinkType2 = BL.AttributeCode
    AND MLA.LinkCode = 'Capability'
    AND MLA.LinkValue IN ('R','W','S')
    AND MLA.ValFrom <= :now AND :now < MLA.ValTo AND MLA.EffFrom <= :now AND :now < MLA.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
        MLA1.Enterprise = :Enterprise
    AND MLA1.LinkType = 'Entity/Attribute'
    AND MLA1.LinkType1 = BL.EntityType
    AND MLA1.LinkType2 = BL.AttributeCode
    AND MLA1.LinkCode = 'Copy'
    AND MLA1.LinkValue = 'N'
    AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
    WHERE
        BL.Enterprise = :Enterprise
    AND BL.EntityType = :FromEntityType
    AND BL.EntityID = :FromEntityID
    AND MLA1.Enterprise is NULL
    AND BL.ValFrom <= :ValOn AND :ValOn < BL.ValTo AND BL.EffFrom <= :EffOn AND :EffOn < BL.EffTo
    ;
    // Now insert the information to the shadow table
    EXEC SQL 
    INSERT INTO @t_schema.BlobX
    SELECT 
      B.Enterprise
     ,B.EntityType
     ,B.EntityID
     ,B.AttributeCode
     ,B.BlobExtension
     ,B.NLSID
     ,B.ValFrom
     ,B.ValTo
     ,B.EffFrom
     ,B.EffTo
     ,B.OPENID
     ,B.TRANID
     ,B.AttributeValue
    FROM @t_schema.Blob B
    WHERE
        B.Enterprise = :Enterprise
    AND B.EntityTYPE = :EntityType
    AND B.EntityID = :EntityID
    AND B.Valfrom = :now
    AND B.ValTo = :forever
    ;
} else {
    // Copy Text rows
    EXEC SQL
    INSERT
    INTO @t_schema.Text
    SELECT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,T.AttributeCode
    ,CASE T.ATTRIBUTECODE 
       WHEN 'NAME' THEN  'Copy Of ' CONCAT  T.AttributeValue
       WHEN 'FEATURECODE' THEN  '$' CONCAT  T.AttributeValue
       WHEN 'ID' THEN :now  CONCAT ' ' CONCAT CHAR(:OPENID)
       ELSE T.ATTRIBUTEVALUE
     END 
    ,NLSID
    ,:now
    ,:forever
    ,T.EffFrom
    ,T.EffTo
    ,:OPENID
    ,:TRANID
    FROM @t_schema.Text T
    INNER JOIN @t_schema.MetaLinkAttr MLA ON
        MLA.Enterprise = :Enterprise
    AND MLA.LinkType = 'Role/Attribute'
    AND MLA.LinkType1 = :RoleCode
    AND MLA.LinkType2 = T.AttributeCode
    AND MLA.LinkCode = 'Capability'
    AND MLA.LinkValue IN ('W','R','S')
    AND MLA.ValFrom <= :now AND :now < MLA.ValTo AND MLA.EffFrom <= :now AND :now < MLA.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
        MLA1.Enterprise = :Enterprise
    AND MLA1.LinkType = 'Entity/Attribute'
    AND MLA1.LinkType1 = T.EntityType
    AND MLA1.LinkType2 = T.AttributeCode
    AND MLA1.LinkCode = 'Copy'
    AND MLA1.LinkValue = 'N'
    AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA2 ON
        MLA2.Enterprise = :Enterprise
    AND MLA2.LinkType = 'ExcludeCopy'
    AND MLA2.LinkType1 = T.EntityType
    AND MLA2.LinkType2 = T.AttributeCode
    AND MLA2.LinkCode = 'Copy'
    AND RTRIM(MLA2.LinkValue) = :ExcludeCopy
    AND MLA2.ValFrom <= :now AND :now < MLA2.ValTo AND MLA2.EffFrom <= :now AND :now < MLA2.EffTo
    WHERE
        T.Enterprise = :Enterprise
    AND T.EntityType = :FromEntityType
    AND T.EntityID = :FromEntityID
    AND MLA1.Enterprise is NULL
    AND MLA2.Enterprise is NULL
    AND T.ValFrom <= :ValOn AND :ValOn < T.ValTo AND T.EffFrom <= :EffOn AND :EffOn < T.EffTo
    ;

    //
    //  Now.. copy the ones into the target entity.. that are not currently there.. but have
    //  Default global default values in them
    //
    EXEC SQL INSERT INTO @t_schema.Text
    SELECT
     DISTINCT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,ML.LinkType1
    ,RTRIM(ML.LinkValue)
    ,1
    ,:now
    ,:forever
    ,:now
    ,:forever
    ,:OPENID
    ,:TRANID
    FROM @t_schema.MetaLinkAttr ML1
    INNER JOIN @t_schema.MetaEntity ME ON
        ME.Enterprise = :Enterprise
    AND ME.EntityType = ML1.LinkType2
    AND ME.EntityClass IN ('T','I')
    AND ME.ValFrom <= :now AND :now < ME.ValTo AND ME.EffFrom <= :now AND :now < ME.EffTo
    INNER JOIN @t_schema.MetaLinkAttr ML ON
        ML.Enterprise = :Enterprise
    AND ML.LinkType = 'Attribute/Test'
    AND ML.LinkType1 = ML1.LinkType2
    AND ML.LinkType2 = 'DEFAULT'
    AND ML.ValFrom <= :now AND :now < ML.ValTo AND ML.EffFrom <= :now AND :now < ML.EffTo
    LEFT OUTER JOIN @t_schema.Text T1 ON
        T1.Enterprise = :Enterprise
    AND T1.EntityType = :EntityType
    AND T1.EntityID = :EntityID
    AND T1.ATTRIBUTECODE = ML.LinkType1
    AND T1.NLSID = 1
    AND T1.ValFrom <= :now AND :now < T1.ValTo AND T1.EffFrom <= :now AND :now < T1.EffTo
    WHERE
            ML1.Enterprise = :Enterprise
    AND ML1.LinkType= 'Entity/Attribute'
    AND ML1.LinkType1 = :EntityType
    AND ML1.LinkCode = 'EntityAttribute'
    AND ML1.ValFrom <= :now AND :now < ML1.ValTo AND ML1.EffFrom <= :now AND :now < ML1.EffTo
    AND T1.Enterprise IS NULL
    ;


    // Now insert the information to the shadow table
    EXEC SQL 
    INSERT INTO @t_schema.TextX 
    SELECT 
      T.Enterprise
     ,T.EntityType
     ,T.EntityID
     ,T.AttributeCode
     ,T.AttributeValue
     ,T.NLSID
     ,T.ValFrom
     ,T.ValTo
     ,T.EffFrom
     ,T.EffTo
     ,T.OPENID
     ,T.TRANID
    FROM @t_schema.Text T
    WHERE
        T.Enterprise = :Enterprise
    AND T.EntityTYPE = :EntityType
    AND T.EntityID = :EntityID
    AND T.Valfrom = :now
    AND T.ValTo = :forever
    ;

    // Copy Flag rows
    EXEC SQL
    INSERT
    INTO @t_schema.Flag
    (
      Enterprise
    , EntityType
    , EntityID
    , AttributeCode
    , AttributeValue
    , Valfrom
    , Valto
    , EffFrom
    , Effto
    , OPENID
    , TranID
    , Ref_NLSID 
    )
    SELECT DISTINCT
      :Enterprise
    , :EntityType
    , :EntityID
    , F.AttributeCode
    , F.AttributeValue
    , :now
    , :forever
    , F.EffFrom
    , F.EffTo
    , :OPENID
    , :TRANID
    , F.Ref_NLSID
    FROM @t_schema.Flag F
    INNER JOIN @t_schema.MetaLinkAttr MLA ON
        MLA.Enterprise = :Enterprise
    AND MLA.LinkType = 'Role/Attribute'
    AND MLA.LinkType1 = :RoleCode
    AND MLA.LinkType2 = F.AttributeCode
    AND MLA.LinkCode = 'Capability'
    AND MLA.LinkValue IN ('W','R','S')
    AND MLA.ValFrom <= :now AND :now < MLA.ValTo AND MLA.EffFrom <= :now AND :now < MLA.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
        MLA1.Enterprise = :Enterprise
    AND MLA1.LinkType = 'Entity/Attribute'
    AND MLA1.LinkType1 = F.EntityType
    AND MLA1.LinkType2 = F.AttributeCode
    AND MLA1.LinkCode = 'Copy'
    AND MLA1.LinkValue = 'N'
    AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA2 ON
        MLA2.Enterprise = :Enterprise
    AND MLA2.LinkType = 'ExcludeCopy'
    AND MLA2.LinkType1 = F.EntityType
    AND MLA2.LinkType2 = F.AttributeCode
    AND MLA2.LinkCode = 'Copy'
    AND RTRIM(MLA2.LinkValue) = :ExcludeCopy
    AND MLA2.ValFrom <= :now AND :now < MLA2.ValTo AND MLA2.EffFrom <= :now AND :now < MLA2.EffTo   
    WHERE
        F.Enterprise = :Enterprise
    AND F.EntityType = :FromEntityType
    AND F.EntityID = :FromEntityID
    AND MLA1.Enterprise is NULL
    AND MLA2.Enterprise is NULL
    AND F.ValFrom <= :ValOn AND :ValOn < F.ValTo AND F.EffFrom <= :EffOn AND :EffOn < F.EffTo
    ;

    EXEC SQL INSERT INTO @t_schema.Flag
    (
      Enterprise
    , EntityType
    , EntityID
    , AttributeCode
    , AttributeValue
    , Valfrom
    , Valto
    , EffFrom
    , Effto
    , OPENID
    , TranID
    , Ref_NLSID   
    )
    SELECT DISTINCT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,ML.LinkType1
    ,RTRIM(ML.LinkValue)
    ,:now
    ,:forever
    ,:now
    ,:forever
    ,:OPENID
    ,:TRANID
    ,1
    FROM @t_schema.MetaLinkAttr ML1
    INNER JOIN @t_schema.MetaEntity ME ON
        ME.Enterprise = :Enterprise
    AND ME.EntityType = ML1.LinkType2
    AND ME.EntityClass in ('F','U','S','A')
    AND ME.ValFrom <= :now AND :now < ME.ValTo AND ME.EffFrom <= :now AND :now < ME.EffTo
    INNER JOIN @t_schema.MetaLinkAttr ML ON
        ML.Enterprise = :Enterprise
    AND ML.LinkType = 'Attribute/Test'
    AND ML.LinkType1 = ML1.LinkType2
    AND ML.LinkType2 = 'DEFAULT'
    AND ML.ValFrom <= :now AND :now < ML.ValTo AND ML.EffFrom <= :now AND :now < ML.EffTo
    LEFT OUTER JOIN @t_schema.Flag F1 ON
        F1.Enterprise = :Enterprise
    AND F1.EntityType = :EntityType
    AND F1.EntityID = :EntityID
    AND F1.ATTRIBUTECODE = ML.LinkType1
    AND F1.ValFrom <= :now AND :now < F1.ValTo AND F1.EffFrom <= :now AND :now < F1.EffTo
    WHERE
            ML1.Enterprise = :Enterprise
    AND ML1.LinkType= 'Entity/Attribute'
    AND ML1.LinkType1 = :EntityType
    AND ML1.LinkCode = 'EntityAttribute'
    AND ML1.ValFrom <= :now AND :now < ML1.ValTo AND ML1.EffFrom <= :now AND :now < ML1.EffTo
    AND F1.Enterprise IS NULL
    ;
    // Now insert the information to the shadow table
    EXEC SQL 
    INSERT INTO @t_schema.FlagX 
    (
      Enterprise
    , EntityType
    , EntityID
    , AttributeCode
    , AttributeValue
    , Valfrom
    , Valto
    , EffFrom
    , Effto
    , OPENID
    , TranID
    , Ref_NLSID 
    )
    SELECT 
      F.Enterprise
     ,F.EntityType
     ,F.EntityID
     ,F.AttributeCode
     ,F.AttributeValue
     ,F.ValFrom
     ,F.ValTo
     ,F.EffFrom
     ,F.EffTo
     ,F.OPENID
     ,F.TRANID
     ,F.REF_NLSID
    FROM @t_schema.Flag F
    WHERE
        F.Enterprise = :Enterprise
    AND F.EntityTYPE = :EntityType
    AND F.EntityID = :EntityID
    AND F.Valfrom = :now
    AND F.ValTo = :forever
    ;

    // Copy LongText rows
    EXEC SQL
    INSERT
    INTO @t_schema.LongText
    SELECT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,LT.AttributeCode
    ,NLSID
    ,:now
    ,:forever
    ,LT.EffFrom
    ,LT.EffTo
    ,:OPENID
    ,:TRANID
    ,LT.AttributeValue
    FROM @t_schema.LongText LT
    INNER JOIN @t_schema.MetaLinkAttr MLA ON
        MLA.Enterprise = :Enterprise
    AND MLA.LinkType = 'Role/Attribute'
    AND MLA.LinkType1 = :RoleCode
    AND MLA.LinkType2 = LT.AttributeCode
    AND MLA.LinkCode = 'Capability'
    AND MLA.LinkValue IN ('R','W','S')
    AND MLA.ValFrom <= :now AND :now < MLA.ValTo AND MLA.EffFrom <= :now AND :now < MLA.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
        MLA1.Enterprise = :Enterprise
    AND MLA1.LinkType = 'Entity/Attribute'
    AND MLA1.LinkType1 = LT.EntityType
    AND MLA1.LinkType2 = LT.AttributeCode
    AND MLA1.LinkCode = 'Copy'
    AND MLA1.LinkValue = 'N'
    AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA2 ON
        MLA2.Enterprise = :Enterprise
    AND MLA2.LinkType = 'ExcludeCopy'
    AND MLA2.LinkType1 = LT.EntityType
    AND MLA2.LinkType2 = LT.AttributeCode
    AND MLA2.LinkCode = 'Copy'
    AND RTRIM(MLA2.LinkValue) = :ExcludeCopy
    AND MLA2.ValFrom <= :now AND :now < MLA2.ValTo AND MLA2.EffFrom <= :now AND :now < MLA2.EffTo   
    WHERE
        LT.Enterprise = :Enterprise
    AND LT.EntityType = :FromEntityType
    AND LT.EntityID = :FromEntityID
    AND MLA1.Enterprise is NULL
    AND MLA2.Enterprise is NULL
    AND LT.ValFrom <= :ValOn AND :ValOn < LT.ValTo AND LT.EffFrom <= :EffOn AND :EffOn < LT.EffTo
    ;

    EXEC SQL INSERT INTO @t_schema.LongText
    SELECT
        DISTINCT
     :Enterprise
    ,:EntityType
    ,:EntityID
    ,ML.LinkType1
    ,1
    ,:now
    ,:forever
    ,:now
    ,:forever
    ,:OPENID
    ,:TRANID
    ,RTRIM(ML.LinkValue)
    FROM @t_schema.MetaLinkAttr ML1
    INNER JOIN @t_schema.MetaEntity ME ON
        ME.Enterprise = :Enterprise
    AND ME.EntityType = ML1.LinkType2
    AND ME.EntityClass IN ('L','X')
    AND ME.ValFrom <= :now AND :now < ME.ValTo AND ME.EffFrom <= :now AND :now < ME.EffTo
    INNER JOIN @t_schema.MetaLinkAttr ML ON
        ML.Enterprise = :Enterprise
    AND ML.LinkType = 'Attribute/Test'
    AND ML.LinkType1 = ML1.LinkType2
    AND ML.LinkType2 = 'DEFAULT'
    AND ML.ValFrom <= :now AND :now < ML.ValTo AND ML.EffFrom <= :now AND :now < ML.EffTo
    LEFT OUTER JOIN @t_schema.LongText T1 ON
        T1.Enterprise = :Enterprise
    AND T1.EntityType = :EntityType
    AND T1.EntityID = :EntityID
    AND T1.ATTRIBUTECODE = ML.LinkType1
    AND T1.NLSID = 1
    AND T1.ValFrom <= :now AND :now < T1.ValTo AND T1.EffFrom <= :now AND :now < T1.EffTo
    WHERE
            ML1.Enterprise = :Enterprise
    AND ML1.LinkType= 'Entity/Attribute'
    AND ML1.LinkType1 = :EntityType
    AND ML1.LinkCode = 'EntityAttribute'
    AND ML1.ValFrom <= :now AND :now < ML1.ValTo AND ML1.EffFrom <= :now AND :now < ML1.EffTo
    AND T1.Enterprise IS NULL
    ;

    // Now insert the information to the shadow table
    EXEC SQL 
    INSERT INTO @t_schema.LongTextX 
    SELECT 
      LT.Enterprise
     ,LT.EntityType
     ,LT.EntityID
     ,LT.AttributeCode
     ,LT.NLSID
     ,LT.ValFrom
     ,LT.ValTo
     ,LT.EffFrom
     ,LT.EffTo
     ,LT.OPENID
     ,LT.TRANID
     ,LT.AttributeValue
    FROM @t_schema.LongText LT
    WHERE
        LT.Enterprise = :Enterprise
    AND LT.EntityTYPE = :EntityType
    AND LT.EntityID = :EntityID
    AND LT.Valfrom = :now
    AND LT.ValTo = :forever
    ;

    // Copy Blob rows
    EXEC SQL
    INSERT
    INTO @t_schema.Blob
    SELECT
      :Enterprise
    , :EntityType
    , :EntityID
    , BL.AttributeCode
    , BL.BlobExtension
    , NLSID
    , :now
    , :forever
    , BL.EffFrom
    , BL.EffTo
    , :OPENID
    , :TRANID
    , BL.AttributeValue
    FROM @t_schema.Blob BL
    INNER JOIN @t_schema.MetaLinkAttr MLA ON
        MLA.Enterprise = :Enterprise
    AND MLA.LinkType = 'Role/Attribute'
    AND MLA.LinkType1 = :RoleCode
    AND MLA.LinkType2 = BL.AttributeCode
    AND MLA.LinkCode = 'Capability'
    AND MLA.LinkValue IN ('R','W','S')
    AND MLA.ValFrom <= :now AND :now < MLA.ValTo AND MLA.EffFrom <= :now AND :now < MLA.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
        MLA1.Enterprise = :Enterprise
    AND MLA1.LinkType = 'Entity/Attribute'
    AND MLA1.LinkType1 = BL.EntityType
    AND MLA1.LinkType2 = BL.AttributeCode
    AND MLA1.LinkCode = 'Copy'
    AND MLA1.LinkValue = 'N'
    AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
    LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA2 ON
        MLA2.Enterprise = :Enterprise
    AND MLA2.LinkType = 'ExcludeCopy'
    AND MLA2.LinkType1 = BL.EntityType
    AND MLA2.LinkType2 = BL.AttributeCode
    AND MLA2.LinkCode = 'Copy'
    AND RTRIM(MLA2.LinkValue) = :ExcludeCopy
    AND MLA2.ValFrom <= :now AND :now < MLA2.ValTo AND MLA2.EffFrom <= :now AND :now < MLA2.EffTo   
    WHERE
        BL.Enterprise = :Enterprise
    AND BL.EntityType = :FromEntityType
    AND BL.EntityID = :FromEntityID
    AND MLA1.Enterprise is NULL
    AND MLA2.Enterprise is NULL
    AND BL.ValFrom <= :ValOn AND :ValOn < BL.ValTo AND BL.EffFrom <= :EffOn AND :EffOn < BL.EffTo
    ;
    // Now insert the information to the shadow table
    EXEC SQL 
    INSERT INTO @t_schema.BlobX
    SELECT 
      B.Enterprise
     ,B.EntityType
     ,B.EntityID
     ,B.AttributeCode
     ,B.BlobExtension
     ,B.NLSID
     ,B.ValFrom
     ,B.ValTo
     ,B.EffFrom
     ,B.EffTo
     ,B.OPENID
     ,B.TRANID
     ,B.AttributeValue
    FROM @t_schema.Blob B
    WHERE
        B.Enterprise = :Enterprise
    AND B.EntityTYPE = :EntityType
    AND B.EntityID = :EntityID
    AND B.Valfrom = :now
    AND B.ValTo = :forever
    ;

}
EXEC SQL COMMIT WORK
;

@parameters
inout ReturnStatus int
in OPENID int
in Enterprise varchar(16)
in RoleCode varchar(32)
in FromEntityType varchar(32)
in FromEntityID int
in EntityType varchar(32)
inout EntityID int
in TRANID int
in ValOn varchar(26)
in EffOn varchar(26)
in ExcludeCopy varchar(32)
@end
