@name=GBL8600
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative

(was 6000)

$Log: gbl8600.txt,v $
Revision 1.8  2010/06/21 15:43:23  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.7  2004/10/20 21:01:49  dave
changes to gen parm

Revision 1.6  2004/02/20 20:21:57  roger
Must be @t_schema

Revision 1.5  2004/02/20 18:09:37  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.4  2003/05/14 19:33:42  dave
left join for better accuracy

Revision 1.3  2002/11/01 18:32:48  roger
Put it back

Revision 1.2  2002/11/01 18:16:48  roger
NAME is now USERNAME

Revision 1.1  2002/05/03 18:18:43  gregg
moved from gbl6000

Revision 1.11  2002/04/08 23:30:23  joan
working on OPWG

Revision 1.10  2001/12/07 18:48:43  dave
right triming enterprise stuff

Revision 1.9  2001/10/20 18:06:27  roger
Change @t_schema. to @t_schema.

Revision 1.8  2001/09/26 18:02:58  roger
Also retrieve attributes on the WG

Revision 1.7  2001/09/19 23:20:30  dave
added enteprise to join

Revision 1.6  2001/09/19 16:47:37  roger
Include RoleDescription in Profile

Revision 1.5  2001/09/06 17:35:24  roger
Use email address to drive lookup of attributes

Revision 1.4  2001/08/13 18:40:29  roger
Fixes

Revision 1.3  2001/08/09 21:33:06  roger
Needed enterprise, reorder cols

Revision 1.2  2001/08/09 19:38:20  roger
Remove some hard-coding

Revision 1.1  2001/08/08 19:51:22  roger
New SP for Profile object

@desc=Get OP+OPWG+WG for Profile object
@fenced=true
@results=1
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl8600.txt,v 1.8 2010/06/21 15:43:23 wendy Exp $";
EXEC SQL END DECLARE SECTION;
EXEC SQL DECLARE sp_cursor CURSOR FOR
SELECT
  RTRIM(R.Enterprise)
, RTRIM(T0.EntityType)
, T0.EntityID
, RTRIM(T0.AttributeValue)
, RTRIM(R.EntityType)
, R.EntityID
, COALESCE(RTRIM(T1.AttributeValue), 'No OPWG Name Defined')
, RTRIM(T2.EntityType)
, T2.EntityID
, RTRIM(T2.AttributeValue)
, RTRIM(T3.AttributeValue)
, RTRIM(MD.LongDescription)
FROM @t_schema.Text T0
INNER JOIN @t_schema.Relator R ON
    R.Enterprise = T0.Enterprise
AND R.EntityType = :OPWGType
AND R.Entity1Type = :WGType
AND R.Entity2Type = :OPType
AND R.Entity2ID = T0.EntityID
AND R.ValFrom <= :ValOn AND :ValOn < R.ValTo AND R.EffFrom <= :EffOn AND :EffOn < R.EffTo
LEFT JOIN @t_schema.Text T1 ON
    T1.Enterprise = R.Enterprise
AND T1.EntityType = R.EntityType
AND T1.EntityID = R.EntityID
AND T1.AttributeCode = 'NAME'
AND T1.ValFrom <= :ValOn AND :ValOn < T1.ValTo AND T1.EffFrom <= :EffOn AND :EffOn < T1.EffTo
INNER JOIN @t_schema.Text T2 ON
    T2.Enterprise = R.Enterprise
AND T2.EntityType = R.Entity1Type
AND T2.EntityID = R.Entity1ID
AND T2.AttributeCode = 'NAME'
AND T2.ValFrom <= :ValOn AND :ValOn < T2.ValTo AND T2.EffFrom <= :EffOn AND :EffOn < T2.EffTo
INNER JOIN @t_schema.Text T3 ON
    T3.Enterprise = R.Enterprise
AND T3.EntityType = R.EntityType
AND T3.EntityID = R.EntityID
AND T3.AttributeCode = 'ROLECODE'
AND T3.ValFrom <= :ValOn AND :ValOn < T3.ValTo AND T3.EffFrom <= :EffOn AND :EffOn < T3.EffTo
INNER JOIN @t_schema.MetaDescription MD ON
    MD.Enterprise = R.Enterprise
AND MD.DescriptionType = T3.AttributeValue
AND MD.DescriptionClass = 'Role'
AND MD.ValFrom <= :ValOn AND :ValOn < MD.ValTo AND MD.EffFrom <= :EffOn AND :EffOn < MD.EffTo
WHERE
    T0.EntityType = :OPType
AND T0.AttributeCode = 'USERTOKEN'
AND T0.AttributeValue = :UserToken
AND T0.ValFrom <= :ValOn AND :ValOn < T0.ValTo AND T0.EffFrom <= :EffOn AND :EffOn < T0.EffTo
ORDER BY
R.Enterprise, T0.EntityID
;
@execute
EXEC SQL OPEN sp_cursor;
@parameters
inout ReturnStatus int
in OPType varchar(32)
in WGType varchar(32)
in OPWGType varchar(32)
in UserToken varchar(254)
in ValOn varchar(26)
in EffOn varchar(26)
@end


