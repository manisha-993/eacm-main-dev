@name=GBL9100
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative
$Log: gbl9100.txt,v $
Revision 1.9  2010/06/21 15:43:05  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.8  2009/10/20 00:22:02  rick
update to change long datatype to sqlint32

Revision 1.7  2004/10/20 21:01:50  dave
changes to gen parm

Revision 1.6  2004/07/21 15:39:28  joan
make some changes

Revision 1.5  2004/07/20 21:49:21  joan
fix bug

Revision 1.4  2004/07/20 18:23:38  joan
fix compile

Revision 1.3  2004/07/20 18:18:59  joan
fix compile

Revision 1.2  2004/07/20 18:01:23  joan
fix compile

Revision 1.1  2004/07/20 17:33:35  joan
initial load


@desc=Delete all DGEntity that are >= input time
@fenced=true
@results=0
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl9100.txt,v 1.9 2010/06/21 15:43:05 wendy Exp $";
EXEC SQL END DECLARE SECTION;

EXEC SQL BEGIN DECLARE SECTION;
sqlint32 iDGEntityID;
char cRelatorType[32];
sqlint32 iRelatorID;
sqlint32 iCount;
sqlint32 iRCount;
EXEC SQL END DECLARE SECTION;

// Lets make room for 250000 mill
char acRelatorType[250000][32];
sqlint32 aiRelatorID[250000];
sqlint32 aiDGEntityID[250000];

EXEC SQL DECLARE curFROM CURSOR FOR
SELECT
R1.ENTITYTYPE,
R1.ENTITYID
FROM OPICM.RELATOR R1
WHERE
    R1.ENTERPRISE = :Enterprise
AND R1.ENTITY1TYPE = 'DGENTITY'
AND R1.Entity1ID > 0 
AND R1.VALFROM < :TimeStamp
; 

EXEC SQL DECLARE curTO CURSOR FOR
SELECT
R2.ENTITYTYPE,
R2.ENTITYID
FROM OPICM.RELATOR R2
WHERE
    R2.ENTERPRISE = :Enterprise
AND R2.ENTITY2TYPE = 'DGENTITY'
AND R2.Entity2ID > 0 
AND R2.VALFROM < :TimeStamp
; 

// first remove the relators to DGEntity, and their attributes
iRCount=0;
EXEC SQL OPEN curFROM;
do {
    EXEC SQL FETCH curFROM INTO :cRelatorType, :iRelatorID;
    if (SQLCODE != 0) break;
    strcpy(acRelatorType[iRCount],cRelatorType);
    aiRelatorID[iRCount++] = iRelatorID;
} while (1);
EXEC SQL CLOSE curFROM WITH RELEASE;

EXEC SQL OPEN curTO;
do {
    EXEC SQL FETCH curTO INTO :cRelatorType, :iRelatorID;
    if (SQLCODE != 0) break;
    strcpy(acRelatorType[iRCount],cRelatorType);
    aiRelatorID[iRCount++] = iRelatorID;
} while (1);
EXEC SQL CLOSE curTO WITH RELEASE;    

for (sqlint32 x=0;x<iRCount;x++) {
    iRelatorID = aiRelatorID[x];
    strcpy(cRelatorType, acRelatorType[x]);

    // delete relators' attributes
    // Delete the Text
    EXEC SQL
    DELETE FROM @t_schema.Text T
    WHERE
    Enterprise = :Enterprise AND
    EntityType = :cRelatorType AND
    EntityID = :iRelatorID 
    ;

    // DELETE FROM the TextX
    EXEC SQL
    DELETE FROM @t_schema.TextX T
    WHERE
    Enterprise = :Enterprise AND
    EntityType = :cRelatorType AND
    EntityID = :iRelatorID 
    ;
    
    EXEC SQL COMMIT WORK
    ;

    // Delete the LongText
    EXEC SQL
    DELETE FROM @t_schema.LongText LT
    WHERE
    Enterprise = :Enterprise AND
    EntityType = :cRelatorType AND
    EntityID = :iRelatorID 
    ;

    // Delete the LongTextX
    EXEC SQL
    DELETE FROM @t_schema.LongTextX LT
    WHERE
    Enterprise = :Enterprise AND
    EntityType = :cRelatorType AND
    EntityID = :iRelatorID 
    ;

    EXEC SQL COMMIT WORK
    ;

    // Deactivate the Flag
    EXEC SQL
    DELETE FROM @t_schema.Flag F
    WHERE
    Enterprise = :Enterprise AND
    EntityType = :cRelatorType AND
    EntityID = :iRelatorID 
    ;
        
    // Deactivate the FlagX
    EXEC SQL
    DELETE FROM @t_schema.FlagX F
    WHERE
    Enterprise = :Enterprise AND
    EntityType = :cRelatorType AND
    EntityID = :iRelatorID 
    ;
    
    EXEC SQL COMMIT WORK
    ;

    // Deactivate the Blob
    EXEC SQL
    DELETE FROM @t_schema.Blob B
    WHERE
    Enterprise = :Enterprise AND
    EntityType = :cRelatorType AND
    EntityID = :iRelatorID 
    ;
    
    // Deactivate the BlobX
    EXEC SQL
    DELETE FROM @t_schema.BlobX B
    WHERE
    Enterprise = :Enterprise AND
    EntityType = :cRelatorType AND
    EntityID = :iRelatorID 
    ;
    EXEC SQL COMMIT WORK;
    
    // update the entity table to delete qualifying rows
    EXEC SQL
    DELETE FROM @t_schema.entity R
    WHERE
        Enterprise = :Enterprise 
    AND EntityType = :cRelatorType 
    AND EntityID = :iRelatorID
    ;
    
    // update the entityX table to delete qualifying rows
    EXEC SQL
    DELETE FROM @t_schema.EntityX R
    WHERE
    Enterprise = :Enterprise 
    AND EntityType = :cRelatorType 
    AND EntityID = :iRelatorID
    ;
    EXEC SQL COMMIT WORK;
}

// update the relator table to delete qualifying rows
EXEC SQL
DELETE FROM @t_schema.Relator R
WHERE
Enterprise = :Enterprise 
AND Entity1Type = 'DGENTITY'
AND Entity1ID = :iDGEntityID 
;

EXEC SQL
DELETE FROM @t_schema.Relator R
WHERE
Enterprise = :Enterprise 
AND Entity2Type = 'DGENTITY'
AND Entity2ID = :iDGEntityID
;

//update the relatorX table to delete qualifying rows
EXEC SQL
DELETE FROM @t_schema.RelatorX R
WHERE
 Enterprise = :Enterprise 
AND Entity1Type = 'DGENTITY' 
AND Entity1ID = :iDGEntityID
;

EXEC SQL
DELETE FROM @t_schema.RelatorX R
WHERE
Enterprise = :Enterprise 
AND Entity2Type = 'DGENTITY'
AND Entity2ID = :iDGEntityID
;

EXEC SQL COMMIT WORK;


// Delete the Text
EXEC SQL
DELETE FROM @t_schema.Text
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;
// Delete the TextX
EXEC SQL
DELETE FROM @t_schema.TextX 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

EXEC SQL COMMIT WORK
;

// Delete the LongText
EXEC SQL
DELETE FROM @t_schema.LongText 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

// Delete the LongTextX
EXEC SQL
DELETE FROM @t_schema.LongTextX 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

EXEC SQL COMMIT WORK
;

// Delete the Flag
EXEC SQL
DELETE FROM @t_schema.Flag 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

// Delete the FlagX
EXEC SQL
DELETE FROM @t_schema.FlagX 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

EXEC SQL COMMIT WORK
;

// Delete the Blob
EXEC SQL
DELETE FROM @t_schema.Blob 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

// Delete the BlobX
EXEC SQL
DELETE FROM @t_schema.BlobX 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

EXEC SQL COMMIT WORK
;

// Delete the Entity
EXEC SQL
DELETE FROM @t_schema.Entity 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

// Delete the EntityX
EXEC SQL
DELETE FROM @t_schema.EntityX 
WHERE
Enterprise = :Enterprise AND
EntityType = 'DGENTITY' AND
EntityID > 0 AND
VALFROM < :TimeStamp
;

EXEC SQL COMMIT WORK
;


@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in OPENID int
in TimeStamp varchar(32)
@end



