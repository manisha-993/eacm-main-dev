@name=GBL2098
@noremote=true
@dbase=opicmpdh
@table=@t_schema.Relator
@fenced=true
@results=0
@narrative
$Log: gbl2098.txt,v $
Revision 1.32  2010/06/21 15:42:57  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.31  2009/10/20 00:21:59  rick
update to change long datatype to sqlint32

Revision 1.30  2006/07/24 22:58:52  dave
<No Comment Entered>

Revision 1.29  2006/04/11 17:03:21  joan
checking entityid > 0 for GroupABR

Revision 1.28  2006/03/17 16:53:34  joan
changes on GroupABR trigger

Revision 1.27  2005/11/02 22:02:39  joan
fixes

Revision 1.26  2005/11/02 21:52:10  joan
add GroupABR check for relator

Revision 1.25  2005/03/25 18:29:01  roger
Reinstate RefNLSID

Revision 1.24  2005/03/23 22:14:45  dave
some comments for reminder on where flag
table gets touched

Revision 1.23  2005/03/23 22:03:38  dave
more prep

Revision 1.22  2005/03/23 21:56:42  dave
some more explicite stuff

Revision 1.21  2005/03/21 20:21:06  dave
more specific

Revision 1.20  2004/10/22 17:12:09  dave
removing inouts and tmp fix for update

Revision 1.19  2004/10/20 21:01:38  dave
changes to gen parm

Revision 1.18  2004/02/20 20:21:48  roger
Must be @t_schema

Revision 1.17  2004/02/20 18:09:29  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.16  2003/09/08 16:31:10  roger
Enterprise was changed to 16 char length

Revision 1.15  2003/04/17 17:56:14  dave
clean up link,deactivate, tagging

Revision 1.14  2003/03/18 00:32:53  dave
Fixing 2098

Revision 1.13  2003/03/17 23:46:18  dave
speedier tag solution

Revision 1.12  2003/03/17 22:33:06  dave
Tagging - Step II

Revision 1.11  2003/03/17 21:24:07  dave
final sp Changes to get Tagging I

Revision 1.10  2003/03/17 21:05:58  dave
getting very close

Revision 1.9  2003/03/17 20:57:17  dave
more fiddling

Revision 1.8  2003/03/17 20:49:26  dave
more template changes

Revision 1.7  2003/03/17 20:26:41  dave
getting close

Revision 1.6  2003/03/17 17:46:54  dave
Tagging I, Relator Table

Revision 1.5  2003/03/12 18:24:17  dave
simplifying and preparing for the Tagging requirement

Revision 1.4  2001/10/23 15:54:44  roger
Remove features not used

Revision 1.3  2001/10/23 15:47:40  roger
Need logic change to ignore request to change to current values

Revision 1.2  2001/10/22 21:25:17  roger
Change logic - ignore changes where values would be unchanged

Revision 1.1  2001/03/21 18:55:28  roger
Pulled individual SPs out of updateroutines.txt and made separate file for each

Revision 1.4  2001/03/19 20:31:15  roger
New sp GBL1044

Revision 1.3  2001/03/16 18:27:55  roger
Added branding feature to stored procedures

Revision 1.2  2001/03/16 03:39:00  roger
Added Log keyword
@desc=Insert/Update a row in @table
@parmstyle=GENERAL
@type=insert
@update_cols=Enterprise EntityType EntityID
@insert_cols=Enterprise EntityType EntityID,Entity1Type,Entity1ID,Entity2Type,Entity2ID
@execute

// Return any parms that need to
// We will insert tagging info into the Flag and Flagx tables iff needed
// REF_NLSID
EXEC SQL INSERT INTO @t_schema.FLAG
(
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, Valfrom
, Valto
, EffFrom
, Effto
, OPENID
, TranID
, Ref_nlsid

)SELECT
  :Enterprise
 ,:Entity2Type
 ,:Entity2ID
 ,TAG.AttributeCode
 ,TAG.AttributeValue
 ,:now
 ,:forever
 ,:now
 ,:forever
 ,:OPENID
 ,:TranID
 ,:Ref_NLSID
FROM @t_schema.SessionTags TAG
WHERE
    TAG.SessionID = :SESSIONID
AND TAG.Enterprise = :Enterprise
AND TAG.OPWGID = :OPENID
AND :forever = :EffTo
AND (TAG.AttributeCode, TAG.AttributeValue) NOT IN
 (SELECT
    F.AttributeCode
   ,F.AttributeValue
  FROM @t_schema.Flag F WHERE
      F.Enterprise = :Enterprise
  AND F.EntityType = :Entity2Type
  AND F.EntityID = :Entity2ID
  AND F.ValTo = :forever
  AND :now BETWEEN F.EffFrom and F.EffTo
  )
;

EXEC SQL INSERT INTO @t_schema.FLAGX
(
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, Valfrom
, Valto
, EffFrom
, Effto
, OPENID
, TranID
, Ref_NLSID
)SELECT
  :Enterprise
 ,:Entity2Type
 ,:Entity2ID
 ,TAG.AttributeCode
 ,TAG.AttributeValue
 ,:now
 ,:forever
 ,:now
 ,:forever
 ,:OPENID
 ,:TranID
 ,:Ref_NLSID
FROM @t_schema.SessionTags TAG
WHERE
    TAG.SessionID = :SESSIONID
AND TAG.Enterprise = :Enterprise
AND TAG.OPWGID = :OPENID
AND :forever = :EffTo
AND (TAG.AttributeCode, TAG.AttributeValue) NOT IN
 (SELECT
    F.AttributeCode
   ,F.AttributeValue
  FROM @t_schema.FlagX F WHERE
      F.Enterprise = :Enterprise
  AND F.EntityType = :Entity2Type
  AND F.EntityID = :Entity2ID
  AND F.ValTo = :forever
  AND :now BETWEEN F.EffFrom and F.EffTo
  )
;

EXEC SQL BEGIN DECLARE SECTION;
char cQueueName [33];
char tmpEntityType [32];
char cDirection [32];
sqlint32 iCount;
EXEC SQL END DECLARE SECTION;

char acQueueName[100][33];
char atmpEntityType[100][32];
char acDirection[100][32];
sqlint32 iCQueue;
sqlint32 i;

EXEC SQL DECLARE  queueGroupABR CURSOR FOR
SELECT RTRIM(ml1.LinkCode), RTRIM(COALESCE(ML2.linkcode,'NONE')), RTRIM(COALESCE(ML2.linkvalue,'NA'))
from @t_schema.MetaLinkAttr ml1

left join @t_schema.metalinkattr ml2 on
   ml2.enterprise = :Enterprise
   and ml2.linktype = 'GroupABR/Relator/Entity'
   and ml2.linktype1 = RTRIM(ml1.linkcode)
   and ml2.linktype2 = :EntityType
   and ml2.valto > current timestamp and ml2.effto > current timestamp

WHERE
   ml1.Enterprise = :Enterprise
   AND ml1.LinkType = 'Status/Trigger/GroupABR'
   AND ml1.LinkType1 in ('REL')
   AND ml1.LinkType2 in ('NEW')
   AND ml1.LinkValue = :EntityType
   AND ml1.ValTo = :forever
   AND ml1.EffTo > CURRENT TIMESTAMP
;

if (EntityID > 0) {
    strcpy(cQueueName, "NONE");

    iCQueue = 1;
    EXEC SQL OPEN queueGroupABR;
    do {
        EXEC SQL FETCH queueGroupABR INTO :cQueueName, :tmpEntityType, :cDirection;
        if (SQLCODE != 0) break;

        strcpy(acQueueName[iCQueue],cQueueName);
        strcpy(atmpEntityType[iCQueue],tmpEntityType);
        strcpy(acDirection[iCQueue++],cDirection);
    } while (1);
    EXEC SQL CLOSE queueGroupABR WITH RELEASE;
    EXEC SQL COMMIT WORK;

    // Do you have a hit?

    for (i=1; i < iCQueue; i++) {
        strcpy(cQueueName, acQueueName[i]);
        strcpy(tmpEntityType, atmpEntityType[i]);
        strcpy(cDirection, acDirection[i]);

        if (strcmp(cQueueName,"NONE") != 0) {
            iCount =0;
            if (strcmp(tmpEntityType,"NONE") == 0) {
        EXEC SQL select count(*) INTO :iCount from opicm.queue
        where enterprise = :Enterprise
        and queue = :cQueueName
        and entitytype = :EntityType
        and entityid = :EntityID
        and status in (20, 50);

        if (iCount <= 0) {
                EXEC SQL INSERT INTO @t_schema.QUEUE VALUES
            (
            :Enterprise
            ,:OPENID
            ,0
            ,:cQueueName
            ,20
            ,:EntityType
            ,:EntityID
            ,CURRENT TIMESTAMP
            ,'1980-01-01-00.00.00.000000'
            ,'1980-01-01-00.00.00.000000'
            ,'9999-12-31-00.00.00.000000'
            );
        }
            } else {
        if (strcmp(cDirection,"U") == 0) {
                EXEC SQL select count(*) INTO :iCount from opicm.queue Q
            join opicm.relator R1
            on  R1.enterprise = :Enterprise
            and R1.entitytype = :EntityType
            and R1.entityid = :EntityID
            and R1.entity1type = :tmpEntityType
            and R1.valto > current timestamp and R1.effto > current timestamp

            where Q.enterprise = :Enterprise
            and Q.queue = :cQueueName
            and Q.entitytype = :tmpEntityType
            and Q.entityid = R1.entity1id
            and Q.status in (20, 50);

            if (iCount <= 0) {
                EXEC SQL INSERT INTO @t_schema.QUEUE
                SELECT
                :Enterprise
                ,:OPENID
                ,0
                ,:cQueueName
                ,20
            ,:tmpEntityType
            ,entity1id
            ,CURRENT TIMESTAMP
            ,'1980-01-01-00.00.00.000000'
            ,'1980-01-01-00.00.00.000000'
            ,'9999-12-31-00.00.00.000000'
            from opicm.relator
            where enterprise = :Enterprise
            and entitytype = :EntityType
            and entityid = :EntityID
            and entity1type = :tmpEntityType
            and valto > current timestamp and effto > current timestamp
            ;
            }
        } else {
            EXEC SQL select count(*) INTO :iCount from opicm.queue Q
            join opicm.relator R1
            on  R1.enterprise = :Enterprise
            and R1.entitytype = :EntityType
            and R1.entityid = :EntityID
            and R1.entity2type = :tmpEntityType
            and R1.valto > current timestamp and R1.effto > current timestamp

            where Q.enterprise = :Enterprise
            and Q.queue = :cQueueName
            and Q.entitytype = :tmpEntityType
            and Q.entityid = R1.entity2id
            and Q.status in (20, 50);

            if (iCount <= 0) {
                EXEC SQL INSERT INTO @t_schema.QUEUE
            SELECT
            :Enterprise
            ,:OPENID
            ,0
            ,:cQueueName
            ,20
            ,:tmpEntityType
            ,Entity2ID
            ,CURRENT TIMESTAMP
            ,'1980-01-01-00.00.00.000000'
            ,'1980-01-01-00.00.00.000000'
            ,'9999-12-31-00.00.00.000000'

            from opicm.relator
            where enterprise = :Enterprise
            and entitytype = :EntityType
            and entityid = :EntityID
            and entity2type = :tmpEntityType
            and valto > current timestamp and effto > current timestamp
            ;
            }
        }
        }
    }
    }
}

// Return any parms that need to
*inoutEntityID = EntityID;

EXEC SQL COMMIT WORK;

@parameters
inout ReturnStatus int
in OPENID int
in SESSIONID int
in Enterprise varchar(16)
in EntityType varchar(32)
inout EntityID int
in Entity1Type varchar(32)
in Entity1ID int
in Entity2Type varchar(32)
in Entity2ID int
in TranID int
in EffFrom varchar(26)
in EffTo varchar(26)
in Ref_NLSID int
@end



