@name=GBL2934
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative
-------------------------------------------------------------------
-- Does a complete undo of an entity and/or relator
-- though temporal inserts
-------------------------------------------------------------------
$Log: gbl2934.txt,v $
Revision 1.14  2010/06/21 15:43:08  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.13  2005/03/25 21:01:11  dave
fixing blank line

Revision 1.12  2005/03/25 19:02:13  dave
minor sp compile adjust ments

Revision 1.11  2005/03/25 18:29:01  roger
Reinstate RefNLSID

Revision 1.10  2005/03/23 21:56:42  dave
some more explicite stuff

Revision 1.9  2004/10/20 21:01:40  dave
changes to gen parm

Revision 1.8  2004/02/20 20:21:49  roger
Must be @t_schema

Revision 1.7  2004/02/20 18:09:30  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.6  2003/09/08 16:31:11  roger
Enterprise was changed to 16 char length

Revision 1.5  2001/12/12 17:24:43  dave
tweeks to sync 1.0 and 1.1 for all the maintenance mods

Revision 1.4  2001/11/09 18:58:50  dave
excluding the nocopy from the metalinkattr in this reactivate
carry forward from 1.0

Revision 1.3  2001/06/02 18:43:15  dave
fix to pull all data from normal tables to x tables on restore

Revision 1.2  2001/05/02 03:52:10  dave
Added X table updates for all update/insert info in SP's
Activate/Deactivate. copy

Revision 1.1  2001/03/22 19:01:20  dave
SP for Deactivate Undo

@desc=Complete deactivation Undo
@fenced=true
@results=0
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl2934.txt,v 1.14 2010/06/21 15:43:08 wendy Exp $";
EXEC SQL END DECLARE SECTION;
@execute
//
// Undo the Entity 
//
EXEC SQL
UPDATE @t_schema.Entity 
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.Entity
SELECT
  Enterprise
, EntityType
, EntityID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
FROM @t_schema.Entity E
WHERE
    E.Enterprise = :Enterprise 
AND E.EntityType = :EntityType 
AND E.EntityID = :EntityID 
AND E.ValTo = :now
;

// now the shadow table
EXEC SQL
UPDATE @t_schema.EntityX
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.EntityX
SELECT
  Enterprise
, EntityType
, EntityID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
FROM @t_schema.Entity E
WHERE
    E.Enterprise = :Enterprise 
AND E.EntityType = :EntityType 
AND E.EntityID = :EntityID 
AND E.ValTo = :now
;
//
// Undo the Relator.. just in can there was one
//
EXEC SQL
UPDATE @t_schema.Relator  
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.Relator
SELECT
  Enterprise
, EntityType
, EntityID
, Entity1Type
, Entity1ID
, Entity2Type
, Entity2ID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
FROM @t_schema.Relator
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :now
;

//
// Undo the RelatorX.. just in can there was one
//
EXEC SQL
UPDATE @t_schema.RelatorX  
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.RelatorX
SELECT
  Enterprise
, EntityType
, EntityID
, Entity1Type
, Entity1ID
, Entity2Type
, Entity2ID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
FROM @t_schema.Relator
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :now
;

// Undo Deactivate the Text
EXEC SQL
UPDATE @t_schema.Text 
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.Text 
SELECT
  T.Enterprise
, T.EntityType
, T.EntityID
, T.AttributeCode
, T.AttributeValue
, T.NLSID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
FROM @t_schema.Text T
LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
    MLA1.Enterprise = :Enterprise
AND MLA1.LinkType = 'Entity/Attribute'
AND MLA1.LinkType1 = T.EntityType
AND MLA1.LinkType2 = T.AttributeCode
AND MLA1.LinkCode = 'Copy'
AND MLA1.LinkValue = 'N'
AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
WHERE
    T.Enterprise = :Enterprise 
AND T.EntityType = :EntityType 
AND T.EntityID = :EntityID 
AND T.ValTo = :now
AND MLA1.Enterprise IS NULL
;

// Undo Deactivate the TextX
EXEC SQL
UPDATE @t_schema.TextX 
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.TextX
SELECT
  T.Enterprise
, T.EntityType
, T.EntityID
, T.AttributeCode
, T.AttributeValue
, T.NLSID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
FROM @t_schema.Text T
LEFT OUTER JOIN @t_schema.MetaLinkAttr MLA1 ON
    MLA1.Enterprise = :Enterprise
AND MLA1.LinkType = 'Entity/Attribute'
AND MLA1.LinkType1 = T.EntityType
AND MLA1.LinkType2 = T.AttributeCode
AND MLA1.LinkCode = 'Copy'
AND MLA1.LinkValue = 'N'
AND MLA1.ValFrom <= :now AND :now < MLA1.ValTo AND MLA1.EffFrom <= :now AND :now < MLA1.EffTo
WHERE
    T.Enterprise = :Enterprise 
AND T.EntityType = :EntityType 
AND T.EntityID = :EntityID 
AND T.ValTo = :now
AND MLA1.Enterprise IS NULL
;

// Undo Deactivate the LongText
EXEC SQL
UPDATE @t_schema.LongText LT
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.LongText
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, NLSID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
, AttributeValue
FROM @t_schema.LongText
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :now
;

// Undo Deactivate the LongTextX
EXEC SQL
UPDATE @t_schema.LongTextX  LT
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.LongTextX
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, NLSID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
, AttributeValue
FROM @t_schema.LongText
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :now
;

// Undo Deactivate the Flag
EXEC SQL
UPDATE @t_schema.Flag F
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.Flag
(
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, Valfrom
, Valto
, EffFrom
, Effto
, OPENID
, TranID
, Ref_NLSID 
)
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
 , ref_nlsid
FROM @t_schema.Flag
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :now
;

// Undo Deactivate the FlagX
EXEC SQL
UPDATE @t_schema.FlagX F
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.FlagX
(
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, Valfrom
, Valto
, EffFrom
, Effto
, OPENID
, TranID
, Ref_NLSID 
)
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
,ref_nlsid
FROM @t_schema.Flag
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :now
;

// Undo Deactivate the Blob
EXEC SQL
UPDATE @t_schema.Blob B
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.Blob
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, BlobExtension
, NLSID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
, AttributeValue
FROM @t_schema.Blob 
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :now
;

// Undo Deactivate the BlobX
EXEC SQL
UPDATE @t_schema.BlobX B
SET
  ValTo = :now
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.BlobX
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, BlobExtension
, NLSID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
, AttributeValue
FROM @t_schema.Blob
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID 
AND ValTo = :now
;

EXEC SQL COMMIT WORK;

@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in OPENID int
in EntityType varchar(32)
in EntityID int
in TRANID int
@end


