@name=GBL9203
@noremote=true
@type=basic
@dbase=opicmpdh
@fenced=true
@narrative

 This guy inserts a new record into the trsNavigateTable based
 upon information in the DynaSearch Table

$Log: gbl9203.txt,v $
Revision 1.12  2010/06/21 15:43:10  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.11  2009/10/20 00:22:02  rick
update to change long datatype to sqlint32

Revision 1.10  2008/07/10 19:36:17  praveen
fix perf issue with trsnavigate deletes

Revision 1.9  2004/10/29 18:31:28  dave
syntax change

Revision 1.8  2004/10/29 17:36:56  dave
attempting to block move data for relator grabber

Revision 1.7  2004/10/20 21:01:50  dave
changes to gen parm

Revision 1.6  2004/08/18 22:44:07  joan
fix error

Revision 1.5  2004/08/18 22:38:58  joan
fix error

Revision 1.4  2004/08/18 22:23:52  joan
add file

Revision 1.2  2004/08/18 22:07:44  joan
fix error

Revision 1.1  2004/08/18 21:54:18  joan
work on search


@results=1
@desc=insert a record into the trsnavigateTable from DynaSearch
@parmstyle=GENERAL
@sql

// begin sql tag
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl9203.txt,v 1.12 2010/06/21 15:43:10 wendy Exp $";
sqlint32 iCount;
sqlint32 ii;
sqlint32 i;
sqlint32 iStepCount;
sqlint32 iNavCount;
sqlint32 iNavDelCount;
sqlint32 idsCount;
sqlint32 iStop;
sqlint32 lCount;
sqlint32 lStep;
sqlint32 iFound;
char tmpEntityType[33];
char tmpAttCode[33];
char tmpAttType[1];
char tmpAttValue[255];
EXEC SQL END DECLARE SECTION;

char actmpEntityType[50][33];
char actmpAttCode[50][33];
char actmpAttType[50][1];
char actmpAttValue[50][255];


EXEC SQL DECLARE NavCur CURSOR FOR
SELECT
 Entity1Type
,Entity1ID
,EntityType
,EntityID
,Entity2Type
,Entity2ID
FROM @t_schema.trsNavigate
WHERE
    Level = 0
AND SessionID = :SessionID
AND Enterprise = :Enterprise
;

EXEC SQL DECLARE curDynaSearch CURSOR FOR
SELECT
    EntityType
  , AttributeCode
  , AttributeType
  , AttributeValue
  FROM @t_schema.DynaSearch
  WHERE
      SessionID = :SessionID
  AND Enterprise = :Enterprise
  AND Step = :ii;

@execute

// OK.. first we want to get a count of how many search
// records are in the dyna search

iCount = 0;

EXEC SQL SELECT MAX(Step) INTO :iCount
FROM @t_schema.DynaSearch
WHERE
    Enterprise = :Enterprise
AND SessionID = :SessionID
;

EXEC SQL COMMIT WORK;

// OK.. Lets loop and insert total counts here

// Now process the data
iStop = 0;  // Lets assume we keep going!


for (ii = 1; ii <= iCount ;ii++) {
  iStepCount = 0;
  // Lets pull the record in first
  idsCount = 1;
  EXEC SQL OPEN curDynaSearch;
  do {
    EXEC SQL FETCH curDynaSearch INTO :tmpEntityType, :tmpAttCode, :tmpAttType, :tmpAttValue;
    if (SQLCODE != 0) break;
    strcpy(actmpEntityType[idsCount],tmpEntityType);
    strcpy(actmpAttCode[idsCount],tmpAttCode);
    strcpy(actmpAttType[idsCount],tmpAttType);
    strcpy(actmpAttValue[idsCount++],tmpAttValue);
  }   while (1);
  EXEC SQL CLOSE curDynaSearch WITH RELEASE;
  EXEC SQL COMMIT WORK;
  
  iFound = 0;
  for (i =1; i < idsCount; i++) {
      strcpy(tmpEntityType, actmpEntityType[i]);
      strcpy(tmpAttCode, actmpAttCode[i]);
      strcpy(tmpAttType, actmpAttType[i]);
          strcpy(tmpAttValue, actmpAttValue[i]);
           
      if (tmpAttType[0] == 'F') {
        EXEC SQL SELECT COUNT(F.EntityID)  INTO :iStepCount
        FROM @t_schema.Flag F
        INNER JOIN @t_schema.trsNavigate Q ON
              Q.Enterprise = :Enterprise
        AND Q.SessionID = :SessionID
        AND Q.Entity2Type = F.EntityType
        AND Q.Entity2ID = F.EntityID
        WHERE
              F.Enterprise = :Enterprise
        AND F.AttributeCode = :tmpAttCode
        AND F.AttributeValue = :tmpAttValue
        AND F.EntityType = :tmpEntityType
            AND :ValOn BETWEEN F.ValFrom and F.ValTo
        AND :EffOn BETWEEN F.EffFrom and F.EffTo
        ;
      } else {
        if (iLike == 1) {
          EXEC SQL SELECT COUNT(T.EntityID)  INTO :iStepCount
          FROM @t_schema.Text T
          INNER JOIN @t_schema.trsNavigate Q ON
                Q.Enterprise = :Enterprise
          AND Q.SessionID = :SessionID
          AND Q.Entity2Type = T.EntityType
          AND Q.Entity2ID = T.EntityID
          WHERE
                T.Enterprise = :Enterprise
          AND T.AttributeCode = :tmpAttCode
          AND T.AttributeValue LIKE rtrim(:tmpAttValue) || '%'
          AND T.EntityType = :tmpEntityType
                AND :ValOn BETWEEN T.ValFrom and T.ValTo
            AND :EffOn BETWEEN T.EffFrom and T.EffTo
          ;
        } else {
          EXEC SQL SELECT COUNT(T.EntityID)  INTO :iStepCount
          FROM @t_schema.Text T
          INNER JOIN @t_schema.trsNavigate Q ON
                Q.Enterprise = :Enterprise
          AND Q.SessionID = :SessionID
          AND Q.Entity2Type = T.EntityType
          AND Q.Entity2ID = T.EntityID
          WHERE
                T.Enterprise = :Enterprise
          AND T.AttributeCode = :tmpAttCode
          AND T.AttributeValue = :tmpAttValue
          AND T.EntityType = :tmpEntityType
                AND :ValOn BETWEEN T.ValFrom and T.ValTo
            AND :EffOn BETWEEN T.EffFrom and T.EffTo
          ;
        }
      }

      if (idsCount == 1) {
        if (iStepCount == 0) {
           iFound = 0;
           break;              
        }
      } else {
          // for the same step (or condition), 
          if (iFound == 0) {
              iFound = iStepCount;
            }
      }

    EXEC SQL UPDATE @t_schema.DynaSearch SET SEARCHCOUNT = :iStepCount
    WHERE
          Step = :ii
    AND SessionID = :SessionID
    AND Enterprise = :Enterprise
    AND AttributeCode = :tmpAttCode
    AND AttributeValue = :tmpAttValue
    AND EntityType = :tmpEntityType
    ;   
  }

  // for a step, break if found no matching     
  if (iFound == 0) {
   break;
   iStop = 1;
  }
  
  // for (or condition) , remove the row that find no matching entities.
  EXEC SQL DELETE from @t_schema.DynaSearch     
  WHERE
      Step = :ii
  AND SessionID = :SessionID
  AND Enterprise = :Enterprise
  AND SearchCount = 0
  ;  
  
  // Good enough .. if you find 50 or less in the count .. then we can stop
  // defaults counts to 99
  if (iFound < 51) {
    break;
  }  
}

EXEC SQL COMMIT WORK;


if (iStop == 0) {

    iCount = 0;

  EXEC SQL SELECT MAX(Step) INTO :iCount
  FROM @t_schema.DynaSearch
  WHERE
      Enterprise = :Enterprise
  AND SessionID = :SessionID
  ;

  EXEC SQL COMMIT WORK;

  // O.K.  lets do the inserts
  //

  for (ii = 1; ii <= iCount ;ii++) {

    // Lets pull the record in first
      idsCount = 1;
      EXEC SQL OPEN curDynaSearch;
      do {
        EXEC SQL FETCH curDynaSearch INTO :tmpEntityType, :tmpAttCode, :tmpAttType, :tmpAttValue;
        if (SQLCODE != 0) break;
        strcpy(actmpEntityType[idsCount],tmpEntityType);
        strcpy(actmpAttCode[idsCount],tmpAttCode);
        strcpy(actmpAttType[idsCount],tmpAttType);
        strcpy(actmpAttValue[idsCount++],tmpAttValue);
      }   while (1);
      EXEC SQL CLOSE curDynaSearch WITH RELEASE;
      EXEC SQL COMMIT WORK;
      
      for (i =1; i < idsCount; i++) {
      
          strcpy(tmpEntityType, actmpEntityType[i]);
          strcpy(tmpAttCode, actmpAttCode[i]);
          strcpy(tmpAttType, actmpAttType[i]);
          strcpy(tmpAttValue, actmpAttValue[i]);

        if (ii == 1) {

          if (tmpAttType[0] == 'F') {

                    EXEC SQL INSERT INTO @t_schema.trsEntities
                    SELECT DISTINCT
                     :Enterprise
                    ,:ii
                    ,:SessionID
                    , F.ENTITYID
                    , F.EntityType
                    FROM @t_schema.Flag F
                  INNER JOIN @t_schema.trsNavigate Q ON
                    Q.Enterprise = :Enterprise
                AND Q.SessionID = :SessionID
                AND Q.Entity2Type = F.EntityType
                AND Q.Entity2ID = F.EntityID
                    WHERE
                        F.Enterprise = :Enterprise
                    AND F.AttributeCode = :tmpAttCode
                    AND F.AttributeValue = :tmpAttValue
                    AND F.EntityType = :tmpEntityType
                    AND :ValOn BETWEEN F.ValFrom and F.ValTo
                AND :EffOn BETWEEN F.EffFrom and F.EffTo
                    ;

                } else {

                    if (iLike == 1) {
                      EXEC SQL INSERT INTO @t_schema.trsEntities
                      SELECT DISTINCT
                       :Enterprise
                      ,:ii
                      ,:SessionID
                      , T.ENTITYID
                      , T.EntityType
                      FROM @t_schema.Text T
                      INNER JOIN @t_schema.trsNavigate Q ON
                          Q.Enterprise = :Enterprise
                      AND Q.SessionID = :SessionID
                    AND Q.Entity2Type = T.EntityType
                    AND Q.Entity2ID = T.EntityID
                    WHERE
                        T.Enterprise = :Enterprise
                    AND T.AttributeCode = :tmpAttCode
                    AND T.AttributeValue LIKE rtrim(:tmpAttValue) || '%'
                    AND T.EntityType = :tmpEntityType
                    AND :ValOn BETWEEN T.ValFrom and T.ValTo
                    AND :EffOn BETWEEN T.EffFrom and T.EffTo
                    ;
                    } else {

                      EXEC SQL INSERT INTO @t_schema.trsEntities
                      SELECT DISTINCT
                       :Enterprise
                      ,:ii
                      ,:SessionID
                      , T.ENTITYID
                      , T.EntityType
                      FROM @t_schema.Text T
                      INNER JOIN @t_schema.trsNavigate Q ON
                          Q.Enterprise = :Enterprise
                      AND Q.SessionID = :SessionID
                        AND Q.Entity2Type = T.EntityType
                        AND Q.Entity2ID = T.EntityID
                        WHERE
                          T.Enterprise = :Enterprise
                        AND T.AttributeCode = :tmpAttCode
                    AND T.AttributeValue = :tmpAttValue
                  AND T.EntityType = :tmpEntityType
                        AND :ValOn BETWEEN T.ValFrom and T.ValTo
                    AND :EffOn BETWEEN T.EffFrom and T.EffTo
                    ;
                    }
                }

          EXEC SQL COMMIT WORK;

        } else {

          if (tmpAttType[0] == 'F') {

                    EXEC SQL INSERT INTO @t_schema.trsEntities
                    SELECT DISTINCT
                    :Enterprise
                    ,:ii
                    ,:SessionID
                    ,F.ENTITYID
                    ,F.EntityType
                    FROM @t_schema.Flag F
                    INNER JOIN @t_schema.trsEntities E ON
                        E.level = :ii - 1
                    AND E.EntityType = F.EntityType
                    AND E.EntityID = F.EntityID
                    AND E.SessionID = :SessionID
                    WHERE
                        F.Enterprise = :Enterprise
                    AND F.AttributeCode = :tmpAttCode
                    AND F.AttributeValue = :tmpAttValue
                    AND F.EntityType = :tmpEntityType
                    AND :ValOn BETWEEN F.ValFrom and F.ValTo
                AND :EffOn BETWEEN F.EffFrom and F.EffTo
                    ;

            } else {

                    if (iLike == 1) {
                
                        EXEC SQL INSERT INTO @t_schema.trsEntities
                        SELECT DISTINCT
                        :Enterprise
                        ,:ii
                        ,:SessionID
                        ,T.ENTITYID
                        ,T.EntityType
                        FROM @t_schema.Text T
                        INNER JOIN @t_schema.trsEntities E ON
                                E.level = :ii - 1
                        AND E.EntityType = T.EntityType
                        AND E.EntityID = T.EntityID
                        AND E.SessionID = :SessionID
                        WHERE
                                T.Enterprise = :Enterprise
                        AND T.AttributeCode = :tmpAttCode
                        AND T.AttributeValue LIKE rtrim(:tmpAttValue) || '%'
                        AND T.EntityType = :tmpEntityType
                        AND :ValOn BETWEEN T.ValFrom and T.ValTo
                        AND :EffOn BETWEEN T.EffFrom and T.EffTo
                      ;
    
                    } else {
            
                    EXEC SQL INSERT INTO @t_schema.trsEntities
                    SELECT DISTINCT
                    :Enterprise
                    ,:ii
                    ,:SessionID
                    ,T.ENTITYID
                    ,T.EntityType
                    FROM @t_schema.Text T
                    INNER JOIN @t_schema.trsEntities E ON
                        E.level = :ii - 1
                    AND E.EntityType = T.EntityType
                    AND E.EntityID = T.EntityID
                    AND E.SessionID = :SessionID
                    WHERE
                        T.Enterprise = :Enterprise
                    AND T.AttributeCode = :tmpAttCode
                    AND T.AttributeValue = :tmpAttValue
                    AND T.EntityType = :tmpEntityType
                        AND :ValOn BETWEEN T.ValFrom and T.ValTo
                    AND :EffOn BETWEEN T.EffFrom and T.EffTo
                    ;
                    }
                }   

            EXEC SQL COMMIT WORK;
        }
    }
    }

  // O.K.. lets Remove any records from the trsNavigate 
  // Table that no longer qualify (the answer is always smaller than
  // what we start out in
  //

  EXEC SQL SELECT COUNT(*)   INTO :iNavCount
  FROM @t_schema.trsNavigate WHERE
  Enterprise = :Enterprise AND SessionID = :SessionID ;

  EXEC SQL SELECT COUNT(*)   INTO :iNavDelCount
  FROM @t_schema.trsNavigate WHERE
  (Entity2ID, Entity2Type) IN (
  SELECT
   E.EntityID
  ,E.EntityType
  FROM @t_schema.trsEntities T
  INNER JOIN @t_schema.Entity E ON
      E.Enterprise = :Enterprise
  AND E.EntityType = T.EntityType
  AND E.EntityID = T.EntityID
  AND :ValOn BETWEEN E.ValFrom and E.ValTo
  AND :EffOn BETWEEN E.EffFrom and E.EffTo
  WHERE
      T.Enterprise = :Enterprise
  AND T.SessionID = :SessionID
  AND T.Level = :ii - 1
  )
  AND Enterprise = :Enterprise
  AND SessionID = :SessionID
  ;

  if (iNavDelCount < iNavCount) {
      EXEC SQL INSERT INTO @t_schema.trsNavDel
      SELECT * FROM @t_schema.trsNavigate WHERE
      (Entity2ID, Entity2Type) IN (
       SELECT
        E.EntityID
       ,E.EntityType
       FROM @t_schema.trsEntities T
       INNER JOIN @t_schema.Entity E ON
          E.Enterprise = :Enterprise
       AND E.EntityType = T.EntityType
       AND E.EntityID = T.EntityID
       AND :ValOn BETWEEN E.ValFrom and E.ValTo
       AND :EffOn BETWEEN E.EffFrom and E.EffTo
       WHERE
          T.Enterprise = :Enterprise
       AND T.SessionID = :SessionID
       AND T.Level = :ii - 1
      )
      AND Enterprise = :Enterprise
      AND SessionID = :SessionID
      ;

     EXEC SQL DELETE FROM @t_schema.trsNavigate WHERE
     Enterprise = :Enterprise
     AND SessionID = :SessionID
     ;

     EXEC SQL INSERT INTO @t_schema.trsNavigate
     SELECT * FROM @t_schema.trsNavDel WHERE
     Enterprise = :Enterprise
     AND SessionID = :SessionID
     ;

     EXEC SQL DELETE FROM @t_schema.trsNavDel WHERE
     Enterprise = :Enterprise
     AND SessionID = :SessionID
     ;

     EXEC SQL COMMIT WORK;
  }

}

EXEC SQL OPEN NavCur;

@parameters
inout ReturnStatus int
in SessionID int
in Enterprise varchar(16)
in ActionType varchar(32)
in iLike int
in ValOn varchar(27)
in EffOn varchar(27)
@end



