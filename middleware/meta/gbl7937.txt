@name=GBL7937
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative

   This will take an existing relator regardless of its entity1/id entity2/id 
   and turn it off.

$Log: gbl7937.txt,v $
Revision 1.6  2010/06/21 15:42:47  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.5  2004/10/20 21:01:46  dave
changes to gen parm

Revision 1.4  2004/02/20 20:21:56  roger
Must be @t_schema

Revision 1.3  2004/02/20 18:09:35  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.2  2003/09/08 16:31:19  roger
Enterprise was changed to 16 char length

Revision 1.1  2002/02/22 17:35:11  dave
added EANObject as in interface


@desc=Deactivate a Relator.
@fenced=true
@results=0
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl7937.txt,v 1.6 2010/06/21 15:42:47 wendy Exp $";
EXEC SQL END DECLARE SECTION;
@execute
// Close out the existing relator
EXEC SQL
UPDATE @t_schema.Relator R
SET
  ValTo = :now
WHERE
    R.Enterprise = :Enterprise 
AND R.EntityType = :EntityType 
AND R.EntityID = :EntityID 
AND R.ValTo = :forever
;

// insert the updated rows back into the relator table AS new ones with a new Entity1Type/ID

EXEC SQL
INSERT
INTO @t_schema.Relator
SELECT
  Enterprise
, :EntityType
, :EntityID
, Entity1Type
, Entity1ID
, Entity2Type
, Entity2ID
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
FROM @t_schema.Relator R
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID
AND ValTo = :now
;

// Close out the existing relatorX
EXEC SQL
UPDATE @t_schema.RelatorX R
SET
  ValTo = :now
WHERE
    R.Enterprise = :Enterprise 
AND R.EntityType = :EntityType 
AND R.EntityID = :EntityID 
AND R.ValTo = :forever
;

// insert the updated rows back into the relatorX table AS new ones with a new Entity1Type/ID

EXEC SQL
INSERT
INTO @t_schema.RelatorX
SELECT
  Enterprise
, :EntityType
, :EntityID
, Entity1Type
, Entity1ID
, Entity2Type
, Entity2ID
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
FROM @t_schema.RelatorX R
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID
AND ValTo = :now
;

EXEC SQL COMMIT WORK;

@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in OPENID int
in EntityType varchar(32)
in EntityID int
in TRANID int
@end


