@name=GBL2970
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative
-----------------------------------------------------------------------------------------
-- This guy will kick back the next available ID for the given entitytype, enterprise
-- in the result set
-- If no record exists .. we will create a new record in the NEXT ID Table and
-- Return a 1 while seeding the table with 2
-----------------------------------------------------------------------------------------
$Log: gbl2970.txt,v $
Revision 1.18  2010/06/21 15:42:56  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.17  2009/10/20 00:21:59  rick
update to change long datatype to sqlint32

Revision 1.16  2004/10/20 21:01:41  dave
changes to gen parm

Revision 1.15  2004/02/20 20:21:51  roger
Must be @t_schema

Revision 1.14  2004/02/20 18:09:31  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.13  2003/09/08 16:31:12  roger
Enterprise was changed to 16 char length

Revision 1.12  2003/03/13 01:27:32  dave
fixing tags

Revision 1.11  2003/03/13 01:07:10  dave
trying to tighten up insert for tagging excercise

Revision 1.10  2001/07/21 04:02:13  roger
Change MetaLinkAttribute to MetaLinkAttr
Change "opicm" to @t_schema in some

Revision 1.9  2001/06/05 22:02:25  dave
misc changes .. cleanup

Revision 1.8  2001/03/22 16:55:20  dave
Removed EntityID, added SQL long entityID

Revision 1.7  2001/03/22 16:11:36  dave
Need inout EntityID.. and Need to remove permissions check

Revision 1.6  2001/03/21 22:54:22  roger
Fix return of SessionID in GBL2970

Revision 1.5  2001/03/21 22:12:35  roger
Renamed GBL####A to GBL####

Revision 1.4  2001/03/21 21:16:40  roger
Make the GBL####A SPs named GBL####

Revision 1.3  2001/03/16 18:27:54  roger
Added branding feature to stored procedures

Revision 1.2  2001/03/16 03:38:59  roger
Added Log keyword

@desc=Get NextID for the given EntityType/Enterprise
@results=1
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl2970.txt,v 1.18 2010/06/21 15:42:56 wendy Exp $";
EXEC SQL END DECLARE SECTION;
EXEC SQL BEGIN DECLARE SECTION;
//long myCount;
sqlint32 EntityID;
EXEC SQL END DECLARE SECTION;
//
//EXEC SQL DECLARE C1 CURSOR FOR
//  SELECT COUNT(*)
//  FROM @t_schema.NEXTID
//  WHERE
//      ENTERPRISE = :Enterprise
//  AND ENTITYTYPE = :EntityType;
//
//EXEC SQL DECLARE C2 CURSOR FOR
//  SELECT NEXTID
//  FROM @t_schema.NEXTID
//  WHERE
//      ENTERPRISE = :Enterprise
//  AND ENTITYTYPE = :EntityType
//  FOR UPDATE OF NEXTID;

EXEC SQL DECLARE sp_cursor CURSOR FOR
SELECT DISTINCT
:EntityID AS EntityID
FROM SYSCAT.SCHEMAAUTH
;
@execute
//EXEC SQL OPEN C1;
//EXEC SQL FETCH C1 INTO :myCount;
//EXEC SQL CLOSE C1 WITH RELEASE;
//
//// If a record exists pull number and increment
//if (myCount > 0) {
//
// EXEC SQL OPEN C2;
// EXEC SQL FETCH C2 INTO :EntityID;
// EXEC SQL UPDATE @t_schema.NEXTID SET NEXTID = :EntityID + 1 WHERE CURRENT OF C2;
// EXEC SQL CLOSE C2 WITH RELEASE;
//
//} else {
//
//// Seed the table
// EntityID = 1;
// EXEC SQL INSERT INTO @t_schema.NEXTID (Enterprise, EntityType, NextID)
//      VALUES(:Enterprise, :EntityType, 2);
//}
//EXEC SQL COMMIT WORK;

EXEC SQL BEGIN DECLARE SECTION;
sqlint32 NewEntityID = 0;
EXEC SQL END DECLARE SECTION;

EXEC SQL DECLARE C1 CURSOR FOR
SELECT NextID FROM @t_schema.NextID WHERE Enterprise = :Enterprise and EntityType = :EntityType FOR UPDATE OF NEXTID;
EXEC SQL OPEN C1;
EXEC SQL FETCH C1 INTO :NewEntityID ;
if (NewEntityID > 0) {
    EXEC SQL UPDATE @t_schema.NextID SET NextID = :NewEntityID + 1 WHERE CURRENT OF C1;
    EXEC SQL CLOSE C1 WITH RELEASE;
    EntityID = NewEntityID;
}else {
    // If no value exists, "prime the pump" with ID = 1
    EXEC SQL CLOSE C1 WITH RELEASE;
    EntityID = 1;
    EXEC SQL INSERT INTO @t_schema.NEXTID (Enterprise, EntityType, NextID) Values (:Enterprise, :EntityType, 2);    
}

EXEC SQL COMMIT WORK;

EXEC SQL OPEN sp_cursor;
@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in EntityType varchar(32)
@end



