@name=GBL2968
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative
$Log: gbl2968.txt,v $
Revision 1.19  2010/06/21 15:43:11  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.18  2009/10/20 00:21:59  rick
update to change long datatype to sqlint32

Revision 1.17  2006/04/04 17:26:58  joan
add for GroupABR

Revision 1.16  2005/03/25 18:29:01  roger
Reinstate RefNLSID

Revision 1.15  2005/03/23 22:03:38  dave
more prep

Revision 1.14  2005/03/23 21:01:39  gregg
add REF_NLSID col to flag inserts

Revision 1.13  2004/10/20 21:01:41  dave
changes to gen parm

Revision 1.12  2004/02/20 20:21:51  roger
Must be @t_schema

Revision 1.11  2004/02/20 18:09:31  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.10  2003/09/08 16:31:12  roger
Enterprise was changed to 16 char length

Revision 1.9  2003/04/17 17:56:14  dave
clean up link,deactivate, tagging

Revision 1.8  2001/06/03 23:26:36  dave
XTable fixes on deactivate/relators .. etc

Revision 1.7  2001/05/02 03:52:10  dave
Added X table updates for all update/insert info in SP's
Activate/Deactivate. copy

Revision 1.6  2001/03/17 21:14:43  roger
Brand code was in wrong place

Revision 1.5  2001/03/17 04:47:11  roger
Misc clean up

Revision 1.4  2001/03/16 18:27:54  roger
Added branding feature to stored procedures

Revision 1.3  2001/03/16 03:38:59  roger
Added Log keyword

@desc=Entity + Attribute deactivation
@fenced=true
@results=0
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl2968.txt,v 1.19 2010/06/21 15:43:11 wendy Exp $";
EXEC SQL END DECLARE SECTION;

// Deactivate the Text
EXEC SQL
UPDATE @t_schema.Text T
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.Text
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, NLSID
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
FROM @t_schema.Text
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :now
;

// Deactivate the TextX
EXEC SQL
UPDATE @t_schema.TextX T
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.TextX
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, NLSID
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
FROM @t_schema.Text
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :now
;

EXEC SQL COMMIT WORK
;

// Deactivate the LongText
EXEC SQL
UPDATE @t_schema.LongText LT
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.LongText
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, NLSID
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
, AttributeValue
FROM @t_schema.LongText
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :now
;

// Deactivate the LongTextX
EXEC SQL
UPDATE @t_schema.LongTextX LT
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.LongTextX
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, NLSID
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
, AttributeValue
FROM @t_schema.LongText
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :now
;

EXEC SQL COMMIT WORK
;

// Deactivate the Flag
EXEC SQL
UPDATE @t_schema.Flag F
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.Flag
(
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, Valfrom
, Valto
, EffFrom
, Effto
, OPENID
, TranID
, Ref_NLSID 
)
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
, REF_NLSID
FROM @t_schema.Flag
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :now
;

// Deactivate the FlagX
EXEC SQL
UPDATE @t_schema.FlagX F
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;
EXEC SQL
INSERT
INTO @t_schema.FlagX
(
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, Valfrom
, Valto
, EffFrom
, Effto
, OPENID
, TranID
, Ref_NLSID 
)
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
, REF_NLSID
FROM @t_schema.Flag
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :now
;

EXEC SQL COMMIT WORK
;

// Deactivate the Blob
EXEC SQL
UPDATE @t_schema.Blob B
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;

EXEC SQL
INSERT
INTO @t_schema.Blob
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, BlobExtension
, NLSID
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
, AttributeValue
FROM @t_schema.Blob
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :now
;
// Deactivate the BlobX
EXEC SQL
UPDATE @t_schema.BlobX B
SET
  ValTo = :now
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :forever
;

EXEC SQL
INSERT
INTO @t_schema.BlobX
SELECT
  Enterprise
, EntityType
, EntityID
, AttributeCode
, BlobExtension
, NLSID
, :now
, :forever
, :now
, :now
, :OPENID
, :TRANID
, AttributeValue
FROM @t_schema.Blob
WHERE
Enterprise = :Enterprise AND
EntityType = :EntityType AND
EntityID = :EntityID AND
ValTo = :now
;

EXEC SQL BEGIN DECLARE SECTION;
char cQueueName [33];
char tmpEntityType [32];
char cDirection [32];
sqlint32 iCount;
EXEC SQL END DECLARE SECTION;

char acQueueName[100][33];
char atmpEntityType[100][32];
char acDirection[100][32];
sqlint32 iCQueue;
sqlint32 i;

EXEC SQL DECLARE  queueGroupABR CURSOR FOR
SELECT RTRIM(ml1.LinkCode), RTRIM(COALESCE(ML2.linkcode,'NONE')), RTRIM(COALESCE(ML2.linkvalue,'NA'))
from @t_schema.MetaLinkAttr ml1

left join @t_schema.metalinkattr ml2 on
   ml2.enterprise = :Enterprise
   and ml2.linktype = 'GroupABR/Relator/Entity'
   and ml2.linktype1 = RTRIM(ml1.linkcode)
   and ml2.linktype2 = :EntityType
   and ml2.valto > current timestamp and ml2.effto > current timestamp
    
WHERE
   ml1.Enterprise = :Enterprise
   AND ml1.LinkType = 'Status/Trigger/GroupABR'
   AND ml1.LinkType1 in ('ENTITY')
   AND ml1.LinkType2 in ('DEL')
   AND ml1.LinkValue = :EntityType
   AND ml1.ValTo = :forever
   AND ml1.EffTo > CURRENT TIMESTAMP
;
    
strcpy(cQueueName, "NONE");
    
iCQueue = 1;
EXEC SQL OPEN queueGroupABR;
do {
   EXEC SQL FETCH queueGroupABR INTO :cQueueName, :tmpEntityType, :cDirection;
   if (SQLCODE != 0) break;

   strcpy(acQueueName[iCQueue],cQueueName);
   strcpy(atmpEntityType[iCQueue],tmpEntityType);
   strcpy(acDirection[iCQueue++],cDirection);
}   while (1);
EXEC SQL CLOSE queueGroupABR WITH RELEASE;
EXEC SQL COMMIT WORK;
    
// Do you have a hit?
    
for (i=1; i < iCQueue; i++) {
    strcpy(cQueueName, acQueueName[i]);
    strcpy(tmpEntityType, atmpEntityType[i]);
    strcpy(cDirection, acDirection[i]);
                
    if (strcmp(cQueueName,"NONE") != 0) {
    iCount =0;
    if (strcmp(tmpEntityType,"NONE") == 0) {
        EXEC SQL select count(*) INTO :iCount from opicm.queue
        where enterprise = :Enterprise
        and queue = :cQueueName
        and entitytype = :EntityType
        and entityid = :EntityID
        and status in (20, 50);
        
        if (iCount <= 0) {
            EXEC SQL INSERT INTO @t_schema.QUEUE VALUES 
            (   
            :Enterprise
            ,:OPENID
            ,0
            ,:cQueueName
            ,20
            ,:EntityType
            ,:EntityID
            ,CURRENT TIMESTAMP
            ,'1980-01-01-00.00.00.000000'
            ,'1980-01-01-00.00.00.000000'
            ,'9999-12-31-00.00.00.000000'
            );
        }
    } else {
        if (strcmp(cDirection,"U") == 0) {
            EXEC SQL select count(*) INTO :iCount from opicm.queue Q
            join opicm.relator R1
            on  R1.enterprise = :Enterprise
            and R1.entitytype = :EntityType
            and R1.entityid = :EntityID
            and R1.entity1type = :tmpEntityType
            and R1.valto > current timestamp and R1.effto > current timestamp

            where Q.enterprise = :Enterprise
            and Q.queue = :cQueueName
            and Q.entitytype = :tmpEntityType
            and Q.entityid = R1.entity1id
            and Q.status in (20, 50);

            if (iCount <= 0) {
                EXEC SQL INSERT INTO @t_schema.QUEUE  
                SELECT
                :Enterprise
                ,:OPENID
                ,0
                ,:cQueueName
                ,20
                ,:tmpEntityType
                ,entity1id
                ,CURRENT TIMESTAMP
                ,'1980-01-01-00.00.00.000000'
                ,'1980-01-01-00.00.00.000000'
                ,'9999-12-31-00.00.00.000000'
                from opicm.relator 
                where enterprise = :Enterprise
                and entitytype = :EntityType
                and entityid = :EntityID
                and entity1type = :tmpEntityType
                and valto > current timestamp and effto > current timestamp
                ;
            }
        } else {
            EXEC SQL select count(*) INTO :iCount from opicm.queue Q
            join opicm.relator R1
            on  R1.enterprise = :Enterprise
            and R1.entitytype = :EntityType
            and R1.entityid = :EntityID
            and R1.entity2type = :tmpEntityType
            and R1.valto > current timestamp and R1.effto > current timestamp

            where Q.enterprise = :Enterprise
            and Q.queue = :cQueueName
            and Q.entitytype = :tmpEntityType
            and Q.entityid = R1.entity2id
            and Q.status in (20, 50);

            if (iCount <= 0) {
                EXEC SQL INSERT INTO @t_schema.QUEUE  
                SELECT
                :Enterprise
                ,:OPENID
                ,0
                ,:cQueueName
                ,20
                ,:tmpEntityType
                ,Entity2ID
                ,CURRENT TIMESTAMP
                ,'1980-01-01-00.00.00.000000'
                ,'1980-01-01-00.00.00.000000'
                ,'9999-12-31-00.00.00.000000'

                from opicm.relator 
                where enterprise = :Enterprise
                and entitytype = :EntityType
                and entityid = :EntityID
                and entity2type = :tmpEntityType
                and valto > current timestamp and effto > current timestamp
                ;
            }
        }
    }
   }
}

EXEC SQL COMMIT WORK
;

@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in EntityType varchar(32)
in EntityID int
in OPENID int
in TRANID int
@end



