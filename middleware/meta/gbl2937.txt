@name=GBL2937
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative
---------------------------------------------------------------------------------
--  This will take an existing relator and replace the 
-- Entity1Type and Entity1ID with a new one..
---------------------------------------------------------------------------------
$Log: gbl2937.txt,v $
Revision 1.9  2010/06/21 15:42:55  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.8  2004/10/20 21:01:40  dave
changes to gen parm

Revision 1.7  2004/02/20 20:21:50  roger
Must be @t_schema

Revision 1.6  2004/02/20 18:09:31  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.5  2003/09/08 16:31:12  roger
Enterprise was changed to 16 char length

Revision 1.4  2001/05/02 03:52:10  dave
Added X table updates for all update/insert info in SP's
Activate/Deactivate. copy

Revision 1.3  2001/03/28 00:31:28  dave
clone for PDHItem and clonePDHItem for PDHGroup

Revision 1.2  2001/03/27 22:28:33  dave
Properly closed out relator in GBL2937 - move Relator

Revision 1.1  2001/03/27 07:31:21  dave
fleshed out moveLink by referencing the basic sp GBL2937

@desc=Replace Entity1Type and Entity1ID of a relator for a given enterprise
@fenced=true
@results=0
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl2937.txt,v 1.9 2010/06/21 15:42:55 wendy Exp $";
EXEC SQL END DECLARE SECTION;
@execute
// Close out the existing relator
EXEC SQL
UPDATE @t_schema.Relator R
SET
  ValTo = :now
WHERE
    R.Enterprise = :Enterprise 
AND R.EntityType = :EntityType 
AND R.EntityID = :EntityID 
AND R.ValTo = :forever
;

// insert the updated rows back into the relator table AS new ones with a new Entity1Type/ID

EXEC SQL
INSERT
INTO @t_schema.Relator
SELECT
  Enterprise
, EntityType
, EntityID
, :Entity1Type
, :Entity1ID
, Entity2Type
, Entity2ID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
FROM @t_schema.Relator R
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID
AND ValTo = :now
;

// Close out the existing relatorX
EXEC SQL
UPDATE @t_schema.RelatorX R
SET
  ValTo = :now
WHERE
    R.Enterprise = :Enterprise 
AND R.EntityType = :EntityType 
AND R.EntityID = :EntityID 
AND R.ValTo = :forever
;

// insert the updated rows back into the relatorX table AS new ones with a new Entity1Type/ID

EXEC SQL
INSERT
INTO @t_schema.RelatorX
SELECT
  Enterprise
, EntityType
, EntityID
, :Entity1Type
, :Entity1ID
, Entity2Type
, Entity2ID
, :now
, :forever
, :now
, :forever
, :OPENID
, :TRANID
FROM @t_schema.RelatorX R
WHERE
    Enterprise = :Enterprise 
AND EntityType = :EntityType 
AND EntityID = :EntityID
AND ValTo = :now
;

EXEC SQL COMMIT WORK;
@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in OPENID int
in EntityType varchar(32)
in EntityID int
in Entity1Type varchar(32)
in Entity1ID int
in TRANID int
in ValOn varchar(26)
in EffOn varchar(26)
@end


