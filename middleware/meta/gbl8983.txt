@name=GBL8983
@noremote=true
@type=basic
@dbase=opicmpdh
@narrative
@nulls_ok=true

Manages the update of an Product Reocrd

//
// $Log: gbl8983.txt,v $
// Revision 1.38  2015/10/14 13:25:13  jilichao
// fix column WARRTYPE length issue, change it from 80 to 128
//
// Revision 1.37  2015/02/24 23:05:05  ptatinen
// fix column lengths
//
// Revision 1.36  2015/02/24 21:43:03  ptatinen
// Add INVNAME as per Lenovo CQ
//
// Revision 1.35  2012/02/06 21:46:15  praveen
// Fix query error
//
// Revision 1.34  2012/01/30 22:36:05  praveen
// Add SPECMODDESGN for DAP/DSW
//
// Revision 1.33  2011/06/15 17:08:01  praveen
// increase length of oslevel to fit more oslevels
//
// Revision 1.32  2010/06/21 15:42:49  wendy
// Exceeded RMI 64k static block limit, not needed for RMI
//
// Revision 1.31  2009/10/20 00:22:01  rick
// update to change long datatype to sqlint32
//
// Revision 1.30  2009/08/11 16:25:33  rick
// schooner project change to handle svcpacbndltype attribute
//
// Revision 1.29  2008/11/17 15:37:12  rick
// change to update rec inactive only when active to start
// with
//
// Revision 1.28  2007/05/31 15:35:46  rick
// increase length of oslevel and oslevel_fc
//
// Revision 1.27  2006/10/30 17:25:24  gregg
// projcdnam
//
// Revision 1.26  2006/06/06 01:25:59  dave
// redressing widths
//
// Revision 1.25  2006/06/05 21:02:30  dave
// fixed size
//
// Revision 1.24  2006/06/05 20:46:20  dave
// widening OSLevel
//
// Revision 1.23  2006/05/01 16:05:53  gregg
// add nlsid into where clause of updates
//
// Revision 1.22  2006/03/06 02:19:38  dave
// fixing trace
//
// Revision 1.21  2006/02/28 00:00:24  dave
// fixing primary key for counts
//
// Revision 1.20  2006/02/22 00:19:12  gregg
// add nlsid to count query
//
// Revision 1.19  2006/02/02 18:57:48  gregg
// compile fix
//
// Revision 1.18  2006/02/02 18:13:30  gregg
// massive fix for null date
//
// Revision 1.17  2006/02/01 00:38:55  gregg
// append to error log
//
// Revision 1.16  2006/01/31 21:20:32  gregg
// fix nulls_ok directive
//
// Revision 1.15  2006/01/31 20:50:17  gregg
// nulls_ok
//
// Revision 1.14  2005/10/18 21:07:53  gregg
// add langugaes, languages_fc
//
// Revision 1.13  2005/10/07 18:22:08  gregg
// add WARRTYPE/WARRPRIOD cols
//
// Revision 1.12  2005/10/04 21:12:23  gregg
// update where clause fix
//
// Revision 1.11  2005/09/20 22:52:58  gregg
// extend col lens
//
// Revision 1.10  2005/09/20 20:45:58  gregg
// extend length of flffilesys
//
// Revision 1.9  2005/09/19 22:51:05  gregg
// lets make dates 10 chars
//
// Revision 1.8  2005/09/12 22:13:58  gregg
// 'NULL' Date fix
//
// Revision 1.7  2005/09/12 20:03:07  gregg
// second try..
//
// Revision 1.6  2005/09/12 18:52:30  gregg
// update
//
// Revision 1.5  2005/09/12 18:49:34  gregg
// Sync Columns excercise pass one
//
// Revision 1.4  2005/06/22 20:46:21  gregg
// add countrylist
//
// Revision 1.3  2005/06/15 19:43:46  gregg
// remve genarea
//
// Revision 1.2  2005/06/15 16:56:12  gregg
// compile fix (?)
//
// Revision 1.1  2005/06/15 16:39:47  gregg
// initial load
//
//

@desc= Manages the update of a Product Reocrd
@fenced=true
@results=0
@parmstyle=GENERAL
@sql

EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl8983.txt,v 1.38 2015/10/14 13:25:13 jilichao Exp $";
sqlint32 count = 0;
char tstamp[27];
EXEC SQL END DECLARE SECTION;
@execute

//
// BEGIN ERROR CHECK DECLARE SECTION
//
const int SQLERROR = -1;
const int SQLCOMPLETE = 1;
//set this to SQLCOMPLETE when finished!
int m_iSQLState = SQLERROR;
EXEC SQL WHENEVER SQLERROR GOTO error_exit;
EXEC SQL WHENEVER SQLWARNING CONTINUE;
//
// END ERROR CHECK DECLARE SECTION
//

EXEC SQL VALUES (CURRENT TIMESTAMP) INTO :tstamp;

FILE *t;
mode_t Mode2;
Mode2 = 0777;
chmod("/tmp/8983.log",Mode2);
// append...
t=fopen("/tmp/8983.log","a+");
//t=fopen("/tmp/8983.log","w");
fprintf(t,"%s: -->start of stored procedure GBL8983\n",tstamp);

EXEC SQL

Select count(*) into :count
from gbli.Product where
enterprise = :enterprise and
LOCEntityType = :locentitytype and
LOCEntityID = :locentityid and
countrycode = :countrycode and
languagecode = :languagecode and
nlsid = :nlsid
;

if (count == 0 && isactive == 0) {
// do nothing
} else if (count == 0 && isactive == 1) {
// insert this guy
EXEC SQL
insert into gbli.product
(
enterprise,
countrycode,
languagecode,
nlsid,
countrylist,
wwentitytype,
wwentityid,
locentitytype,
locentityid,
modelname,
wwpartnumber,
partnumber,
marketingdesc,
anndate,
withdrawldate,
fotdate,
planavaildate,
pubfromdate,
pubtodate,
flfilsysindc,
flfilsysindc_fc,
offcountry,
offcountry_fc,
oslevel,
oslevel_fc,
mktgname,
shortdesc,
warrtype,
warrtype_fc,
warrpriod,
warrpriod_fc,
languages,
languages_fc,
publishflag,
fotpublishflag,
status,
status_fc,
projcdnam,
projcdnam_fc,
valfrom,
valto,
isactive,
svcpacbndltype,
svcpacbndltype_fc,
specmoddesgn,
specmoddesgn_fc,
invname
)
values (
:enterprise,
:countrycode,
:languagecode,
:nlsid,
:countrylist,
:wwentitytype,
:wwentityid,
:locentitytype,
:locentityid,
:modelname,
:wwpartnumber,
:partnumber,
:marketingdesc,
CASE :anndate WHEN 'NULL' THEN NULL ELSE :anndate END ,
CASE :withdrawldate WHEN 'NULL' THEN NULL ELSE :withdrawldate END ,
CASE :fotdate WHEN 'NULL' THEN NULL ELSE :fotdate END ,
CASE :planavaildate WHEN 'NULL' THEN NULL ELSE :planavaildate END ,
CASE :pubfromdate WHEN 'NULL' THEN NULL ELSE :pubfromdate END ,
CASE :pubtodate WHEN 'NULL' THEN NULL ELSE :pubtodate END ,
:flfilsysindc,
:flfilsysindc_fc,
:offcountry,
:offcountry_fc,
:oslevel,
:oslevel_fc,
:mktgname,
:shortdesc,
:warrtype,
:warrtype_fc,
:warrpriod,
:warrpriod_fc,
:languages,
:languages_fc,
:publishflag,
:fotpublishflag,
:status,
:status_fc,
:projcdnam,
:projcdnam_fc,
current timestamp,
'9999-12-31-00.00.00.000000',
1,
:svcpacbndltype,
:svcpacbndltype_fc,
:specmoddesgn,
:specmoddesgn_fc,
:invname
);
} else if (count != 0 && isactive == 1) {
// update this guy
EXEC SQL
update gbli.product
set
enterprise = :enterprise,
countrycode = :countrycode,
languagecode = :languagecode,
nlsid = :nlsid,
countrylist = :countrylist,
wwentitytype = :wwentitytype,
wwentityid = :wwentityid,
locentitytype = :locentitytype,
locentityid = :locentityid,
modelname = :modelname,
wwpartnumber = :wwpartnumber,
partnumber = :partnumber,
marketingdesc = :marketingdesc,
anndate = CASE :anndate WHEN 'NULL' THEN NULL ELSE :anndate END ,
withdrawldate = CASE :withdrawldate WHEN 'NULL' THEN NULL ELSE :withdrawldate END ,
fotdate = CASE :fotdate WHEN 'NULL' THEN NULL ELSE :fotdate END ,
planavaildate = CASE :planavaildate WHEN 'NULL' THEN NULL ELSE :planavaildate END ,
pubfromdate = CASE :pubfromdate WHEN 'NULL' THEN NULL ELSE :pubfromdate END ,
pubtodate = CASE :pubtodate WHEN 'NULL' THEN NULL ELSE :pubtodate END ,
flfilsysindc = :flfilsysindc,
flfilsysindc_fc = :flfilsysindc_fc,
offcountry = :offcountry,
offcountry_fc = :offcountry_fc,
oslevel = :oslevel,
oslevel_fc = :oslevel_fc,
mktgname = :mktgname,
shortdesc = :shortdesc,
warrtype = :warrtype,
warrtype_fc = :warrtype_fc,
warrpriod = :warrpriod,
warrpriod_fc = :warrpriod_fc,
languages = :languages,
languages_fc = :languages_fc,
publishflag = :publishflag,
fotpublishflag = :fotpublishflag,
status = :status,
status_fc = :status_fc,
projcdnam = :projcdnam,
projcdnam_fc = :projcdnam_fc,
valfrom = current timestamp,
valto = '9999-12-31-00.00.00.000000',
isactive = 1,
svcpacbndltype = :svcpacbndltype,
svcpacbndltype_fc = :svcpacbndltype_fc,
specmoddesgn = :specmoddesgn,
specmoddesgn_fc = :specmoddesgn_fc,
invname = :invname
where
enterprise = :enterprise and
locentitytype = :locentitytype and
locentityid = :locentityid and
countrylist = :countrylist and
nlsid = :nlsid
;
} else {
// turn it off
EXEC SQL
update gbli.product
set
valfrom = current timestamp,
valto  =  current timestamp,
isactive = 0
where
enterprise = :enterprise and
locentitytype = :locentitytype and
locentityid = :locentityid and
countrylist = :countrylist and
nlsid = :nlsid and 
isactive=1
;
}


//
// BEGIN ERROR CHECK SECTION
//

// this won't get executed if sql error occurs
m_iSQLState = SQLCOMPLETE;

error_exit:

if(m_iSQLState == SQLERROR) {

    // ensure no infinite loops in the case that a failed SQL connection is used past this point...
    EXEC SQL WHENEVER SQLERROR CONTINUE;


    fprintf(t,"********************  GBL8983 SQLCA DUMP  ********************\n");
    char msg[1025];
    sqlaintp(msg, 1024, 0, &sqlca);
    fprintf(t,"msg:%s\n",msg);
    fprintf(t,"SQLCAID: %s\n", sqlca.sqlcaid);
    fprintf(t,"SQLCABC: %d\n", sqlca.sqlcabc);
    fprintf(t,"SQLCODE: %d\n", sqlca.sqlcode);
    fprintf(t,"SQLERRML: %d\n", sqlca.sqlerrml);
    fprintf(t,"SQLERRMC: %s\n", sqlca.sqlerrmc);
    fprintf(t,"SQLERRP: %s\n", sqlca.sqlerrp);
    fprintf(t,"SQLERRD[0]: %d\n", sqlca.sqlerrd[0]);
    fprintf(t,"SQLERRD[1]: %d\n", sqlca.sqlerrd[1]);
    fprintf(t,"SQLERRD[2]: %d\n", sqlca.sqlerrd[2]);
    fprintf(t,"SQLERRD[3]: %d\n", sqlca.sqlerrd[3]);
    fprintf(t,"SQLERRD[4]: %d\n", sqlca.sqlerrd[4]);
    fprintf(t,"SQLERRD[5]: %d\n", sqlca.sqlerrd[5]);
    fprintf(t,"SQLWARN: %s\n", sqlca.sqlwarn);
    fprintf(t,"SQLSTATE: %s\n", sqlca.sqlstate);
    //
    // Dumping Input params:
    fprintf(t,"enterprise:\"%s\"\n",enterprise);
    fprintf(t,"countrycode:\"%s\"\n",countrycode);
    fprintf(t,"languagecode:\"%s\"\n",languagecode);
    fprintf(t,"nlsid:\"%d\"\n",nlsid);
    fprintf(t,"countrylist:\"%s\"\n",countrylist);
    fprintf(t,"wwentitytype:\"%s\"\n",wwentitytype);
    fprintf(t,"wwentityid:\"%d\"\n",wwentityid);
    fprintf(t,"locentitytype:\"%s\"\n",locentitytype);
    fprintf(t,"locentityid:\"%d\"\n",locentityid);
    fprintf(t,"modelname:\"%s\"\n",modelname);
    fprintf(t,"wwpartnumber:\"%s\"\n",wwpartnumber);
    fprintf(t,"partnumber:\"%s\"\n",partnumber);
    fprintf(t,"marketingdesc:\"%s\"\n",marketingdesc);
    fprintf(t,"anndate:\"%s\"\n",anndate);
    fprintf(t,"withdrawldate:\"%s\"\n",withdrawldate);
    fprintf(t,"fotdate:\"%s\"\n",fotdate);
    fprintf(t,"planavaildate:\"%s\"\n",planavaildate);
    fprintf(t,"pubfromdate:\"%s\"\n",pubfromdate);
    fprintf(t,"pubtodate:\"%s\"\n",pubtodate);
    fprintf(t,"flfilsysindc:\"%s\"\n",flfilsysindc);
    fprintf(t,"flfilsysindc_fc:\"%s\"\n",flfilsysindc_fc);
    fprintf(t,"offcountry:\"%s\"\n",offcountry);
    fprintf(t,"offcountry_fc:\"%s\"\n",offcountry_fc);
    fprintf(t,"oslevel:\"%s\"\n",oslevel);
    fprintf(t,"oslevel_fc:\"%s\"\n",oslevel_fc);
    fprintf(t,"mktgname:\"%s\"\n",mktgname);
    fprintf(t,"shortdesc:\"%s\"\n",shortdesc);
    fprintf(t,"warrtype:\"%s\"\n",warrtype);
    fprintf(t,"warrtype_fc:\"%s\"\n",warrtype_fc);
    fprintf(t,"warrpriod:\"%s\"\n",warrpriod);
    fprintf(t,"warrpriod_fc:\"%s\"\n",warrpriod_fc);
    fprintf(t,"languages:\"%s\"\n",languages);
    fprintf(t,"languages_fc:\"%s\"\n",languages_fc);
    fprintf(t,"publishflag:\"%s\"\n",publishflag);
    fprintf(t,"fotpublishflag:\"%s\"\n",fotpublishflag);
    fprintf(t,"status:\"%s\"\n",status);
    fprintf(t,"status_fc:\"%s\"\n",status_fc);
    fprintf(t,"projcdnam:\"%s\"\n",projcdnam);
    fprintf(t,"projcdnam_fc:\"%s\"\n",projcdnam_fc);
    fprintf(t,"isactive:\"%d\"\n",isactive);
    fprintf(t,"svcpacbndltype:\"%s\"\n",svcpacbndltype);
    fprintf(t,"svcpacbndltype_fc:\"%s\"\n",svcpacbndltype_fc);
    fprintf(t,"specmoddesgn:\"%s\"\n",specmoddesgn);
    fprintf(t,"specmoddesgn_fc:\"%s\"\n",specmoddesgn_fc);
    fprintf(t,"invname:\"%s\"\n",invname);     // End dump params
    fprintf(t,"******************  END OF GBL8983 SQLCA DUMP  *******************\n");
}
//
// END ERROR CHECK SECTION
//

fprintf(t,"%s:end of GBL8983\n",tstamp);
fclose(t);


//EXEC SQL COMMIT WORK;

@parameters
inout ReturnStatus int
in enterprise varchar(8)
in countrycode varchar(2)
in languagecode varchar(2)
in nlsid int
in countrylist varchar(8)
in wwentitytype varchar(32)
in wwentityid int
in locentitytype varchar(32)
in locentityid int
in modelname varchar(12)
in wwpartnumber varchar(12)
in partnumber varchar(7)
in marketingdesc varchar(150)
in anndate varchar(10)
in withdrawldate varchar(10)
in fotdate varchar(10)
in planavaildate varchar(10)
in pubfromdate varchar(10)
in pubtodate varchar(10)
in flfilsysindc varchar(16)
in flfilsysindc_fc varchar(8)
in offcountry varchar(32)
in offcountry_fc varchar(8)
in oslevel varchar(13600)
in oslevel_fc varchar(1024)
in mktgname varchar(254)
in shortdesc varchar(254)
in warrtype varchar(128)
in warrtype_fc varchar(8)
in warrpriod varchar(30)
in warrpriod_fc varchar(8)
in languages varchar(32)
in languages_fc varchar(8)
in publishflag varchar(1)
in fotpublishflag varchar(1)
in status varchar(16)
in status_fc varchar(8)
in projcdnam varchar(50)
in projcdnam_fc varchar(8)
in isactive int
in svcpacbndltype varchar(32)
in svcpacbndltype_fc varchar(32)
in specmoddesgn varchar(48)
in specmoddesgn_fc varchar(8)
in invname varchar(90)
@end

