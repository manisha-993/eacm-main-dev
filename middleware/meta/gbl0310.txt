@name=GBL0310
@noremote=true
@type=basic
@dbase=opicmpdh
@t_schema=BIGCAT
@narrative

Manages the update of an Audience

// $Log: gbl0310.txt,v $
// Revision 1.8  2010/07/21 19:56:19  praveen
// Change Long data type to Sqlint32 in support for db2 9.5
//
// Revision 1.7  2009/01/27 16:43:49  praveen
// *** empty log message ***
//
// Revision 1.6  2009/01/23 00:07:19  praveen
// Supporting dual catdb schema
//
// Revision 1.5  2007/06/06 15:04:38  praveen
// Fix file open()
//
// Revision 1.4  2007/05/14 14:19:16  praveen
// Comment print stmts to tmp log
//
// Revision 1.3  2006/07/30 02:42:37  bala
// get rid of crazy chars
//
// Revision 1.2  2006/07/30 02:29:16  bala
// fix and checkin
//
// Revision 1.1  2006/07/30 02:08:15  bala
// check in
//


@desc= Manages the update of an Audience
@fenced=true
@results=0
@parmstyle=GENERAL
@sql

EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl0310.txt,v 1.8 2010/07/21 19:56:19 praveen Exp $";
sqlint32 count = 0;
char tstamp[27];
EXEC SQL END DECLARE SECTION;
@execute

//
// BEGIN ERROR CHECK DECLARE SECTION
//
const int SQLERROR = -1;
const int SQLCOMPLETE = 1;
//set this to SQLCOMPLETE when finished!
int m_iSQLState = SQLERROR;
EXEC SQL WHENEVER SQLERROR GOTO error_exit;
EXEC SQL WHENEVER SQLWARNING CONTINUE;
//
// END ERROR CHECK DECLARE SECTION
//

EXEC SQL VALUES (CURRENT TIMESTAMP) INTO :tstamp;

FILE *t;
mode_t Mode2;
Mode2 = 0777;
chmod("/tmp/0310.log",Mode2);
// append...
t=fopen("/tmp/0310.log","a+");
//t=fopen("/tmp/0310.log","w");
//fprintf(t,"%s: -->start of stored procedure GBL0310\n",tstamp);

if (strcmp(schema,"BIGCAT") == 0) {

	EXEC SQL
	Select count(*) into :count
	from bigcat.audience
	where
	enterprise = :enterprise and
	locentitytype = :locentitytype and
	locentityid = :locentityid and
	countrycode = :countrycode and
	languagecode = :languagecode and
	audience = :audience and
	nlsid = :nlsid
	;

	if (count == 0 && isactive == 0) {
	// do nothing
	} else if (count == 0 && isactive == 1) {
	// insert this guy
	EXEC SQL
	insert into bigcat.audience
	(
	  enterprise
	, countrycode
	, languagecode
	, nlsid
	, locentitytype
	, locentityid
	, audience
	, audience_fc
	, valfrom
	, valto
	, isactive
	)
	values (
	  :enterprise
	, :countrycode
	, :languagecode
	, :nlsid
	, :locentitytype
	, :locentityid
	, :audience
	, :audience_fc
	, current timestamp
	, :forever
	, 1
	)
	;
	} else if (count != 0 && isactive == 1) {
	// update this guy
	EXEC SQL
	update bigcat.audience
	set
	  audience_fc = :audience_fc
	, valfrom = current timestamp
	, valto = :forever
	, isactive = 1
	where
	enterprise = :enterprise and
	locentitytype = :locentitytype and
	locentityid = :locentityid and
	languagecode = :languagecode and
	countrycode = :countrycode and
	audience = :audience and
	nlsid = :nlsid
	;

	} else {
	// turn it off
	EXEC SQL
	update bigcat.audience
	set
	valfrom = current timestamp,
	valto  =  current timestamp,
	isactive = 0
	where
	enterprise = :enterprise and
	locentitytype = :locentitytype and
	locentityid = :locentityid and
	languagecode = :languagecode and
	countrycode = :countrycode and
	audience = :audience and
	nlsid = :nlsid
	;

	}

}
else if (strcmp(schema,"IBMCAT") == 0) {

	EXEC SQL
	Select count(*) into :count
	from ibmcat.audience
	where
	enterprise = :enterprise and
	locentitytype = :locentitytype and
	locentityid = :locentityid and
	countrycode = :countrycode and
	languagecode = :languagecode and
	audience = :audience and
	nlsid = :nlsid
	;

	if (count == 0 && isactive == 0) {
	// do nothing
	} else if (count == 0 && isactive == 1) {
	// insert this guy
	EXEC SQL
	insert into ibmcat.audience
	(
	  enterprise
	, countrycode
	, languagecode
	, nlsid
	, locentitytype
	, locentityid
	, audience
	, audience_fc
	, valfrom
	, valto
	, isactive
	)
	values (
	  :enterprise
	, :countrycode
	, :languagecode
	, :nlsid
	, :locentitytype
	, :locentityid
	, :audience
	, :audience_fc
	, current timestamp
	, :forever
	, 1
	)
	;
	} else if (count != 0 && isactive == 1) {
	// update this guy
	EXEC SQL
	update ibmcat.audience
	set
	  audience_fc = :audience_fc
	, valfrom = current timestamp
	, valto = :forever
	, isactive = 1
	where
	enterprise = :enterprise and
	locentitytype = :locentitytype and
	locentityid = :locentityid and
	languagecode = :languagecode and
	countrycode = :countrycode and
	audience = :audience and
	nlsid = :nlsid
	;

	} else {
	// turn it off
	EXEC SQL
	update ibmcat.audience
	set
	valfrom = current timestamp,
	valto  =  current timestamp,
	isactive = 0
	where
	enterprise = :enterprise and
	locentitytype = :locentitytype and
	locentityid = :locentityid and
	languagecode = :languagecode and
	countrycode = :countrycode and
	audience = :audience and
	nlsid = :nlsid
	;

	}

}

//
// BEGIN ERROR CHECK SECTION
//

// this won't get executed if sql error occurs
m_iSQLState = SQLCOMPLETE;

error_exit:

if(m_iSQLState == SQLERROR) {

    // ensure no infinite loops in the case that a failed SQL connection is used past this point...
    EXEC SQL WHENEVER SQLERROR CONTINUE;


    fprintf(t,"********************  GBL0310 SQLCA DUMP  ********************\n");
    char msg[1025];
    sqlaintp(msg, 1024, 0, &sqlca);
    fprintf(t,"msg:%s\n",msg);
    fprintf(t,"SQLCAID: %s\n", sqlca.sqlcaid);
    fprintf(t,"SQLCABC: %d\n", sqlca.sqlcabc);
    fprintf(t,"SQLCODE: %d\n", sqlca.sqlcode);
    fprintf(t,"SQLERRML: %d\n", sqlca.sqlerrml);
    fprintf(t,"SQLERRMC: %s\n", sqlca.sqlerrmc);
    fprintf(t,"SQLERRP: %s\n", sqlca.sqlerrp);
    fprintf(t,"SQLERRD[0]: %d\n", sqlca.sqlerrd[0]);
    fprintf(t,"SQLERRD[1]: %d\n", sqlca.sqlerrd[1]);
    fprintf(t,"SQLERRD[2]: %d\n", sqlca.sqlerrd[2]);
    fprintf(t,"SQLERRD[3]: %d\n", sqlca.sqlerrd[3]);
    fprintf(t,"SQLERRD[4]: %d\n", sqlca.sqlerrd[4]);
    fprintf(t,"SQLERRD[5]: %d\n", sqlca.sqlerrd[5]);
    fprintf(t,"SQLWARN: %s\n", sqlca.sqlwarn);
    fprintf(t,"SQLSTATE: %s\n", sqlca.sqlstate);
    //
    // Dumping Input params:
    fprintf(t,"enterprise:\"%s\"\n",enterprise);
    fprintf(t,"countrycode:\"%s\"\n",countrycode);
    fprintf(t,"languagecode:\"%s\"\n",languagecode);
    fprintf(t,"nlsid:\"%d\"\n",nlsid);
    fprintf(t,"locentitytype:\"%s\"\n",locentitytype);
    fprintf(t,"locentityid:\"%s\"\n",locentityid);

    fprintf(t,"audience:\"%d\"\n",audience);
    fprintf(t,"audience_fc:\"%d\"\n",audience_fc);
    fprintf(t,"isactive:\"%d\"\n",isactive);
    // End dump params
    fprintf(t,"******************  END OF GBL0310 SQLCA DUMP  *******************\n");
}
//
// END ERROR CHECK SECTION
//

//fprintf(t,"%s:end of GBL0310\n",tstamp);
fclose(t);


//EXEC SQL COMMIT WORK;

@parameters
inout ReturnStatus int
in enterprise varchar(8)
in countrycode varchar(2)
in languagecode varchar(2)
in nlsid int
in locentitytype varchar(32)
in locentityid int
in audience varchar(40)
in audience_fc varchar(16)
in isactive int
in schema varchar(8)
@end
