@name=GBL2092
@noremote=true
@dbase=opicmpdh
@desc=Insert/Update a row in @table
@table=@t_schema.Entity
@fenced=true
@results=0
@narrative
$Log: gbl2092.txt,v $
Revision 1.37  2010/06/21 15:43:28  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.36  2005/03/25 19:17:03  dave
more SP fixes

Revision 1.35  2005/03/25 19:02:13  dave
minor sp compile adjust ments

Revision 1.34  2005/03/25 18:33:27  roger
fix it

Revision 1.33  2005/03/25 18:29:01  roger
Reinstate RefNLSID

Revision 1.32  2005/03/23 21:56:42  dave
some more explicite stuff

Revision 1.31  2005/03/14 17:35:50  dave
getting more specific

Revision 1.30  2005/03/14 17:01:14  dave
backing out multiple nls flag changes

Revision 1.29  2005/03/11 20:27:33  roger
New col

Revision 1.28  2004/10/22 17:12:09  dave
removing inouts and tmp fix for update

Revision 1.27  2004/10/20 21:01:38  dave
changes to gen parm

Revision 1.26  2004/02/20 20:21:48  roger
Must be @t_schema

Revision 1.25  2004/02/20 18:09:29  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.24  2003/09/08 16:31:10  roger
Enterprise was changed to 16 char length

Revision 1.23  2003/05/10 07:39:31  dave
more trace and streamlining

Revision 1.22  2003/04/17 17:56:14  dave
clean up link,deactivate, tagging

Revision 1.21  2003/03/17 23:46:18  dave
speedier tag solution

Revision 1.20  2003/03/17 22:33:06  dave
Tagging - Step II

Revision 1.19  2003/03/17 22:16:17  dave
trying out tagging in EntityUpdate

Revision 1.18  2003/03/17 21:05:58  dave
getting very close

Revision 1.17  2003/03/17 20:57:17  dave
more fiddling

Revision 1.16  2003/03/17 20:49:26  dave
more template changes

Revision 1.15  2003/03/17 20:26:41  dave
getting close

Revision 1.14  2003/03/17 20:16:44  dave
more testing on 2092

Revision 1.13  2003/03/17 19:57:40  dave
Trying to get Update to Work

Revision 1.12  2003/03/17 19:45:30  dave
fixing GBL2092

Revision 1.11  2003/03/17 19:12:32  dave
Tagging

Revision 1.10  2003/03/17 17:25:00  dave
Tagging Phase II - entity prep

Revision 1.9  2003/03/13 22:57:03  dave
getting GBL2092 to compile

Revision 1.8  2003/03/13 02:21:47  dave
returning the EntityID parm

Revision 1.7  2003/03/13 02:02:40  dave
isolating Entity Update

Revision 1.6  2003/03/12 18:24:17  dave
simplifying and preparing for the Tagging requirement

Revision 1.5  2001/10/31 19:49:08  dave
change to further define uniqueness in GBL2092

Revision 1.4  2001/10/23 15:54:44  roger
Remove features not used

Revision 1.3  2001/10/23 15:47:40  roger
Need logic change to ignore request to change to current values

Revision 1.2  2001/10/22 21:25:16  roger
Change logic - ignore changes where values would be unchanged

Revision 1.1  2001/03/21 18:55:28  roger
Pulled individual SPs out of updateroutines.txt and made separate file for each

Revision 1.4  2001/03/19 20:31:15  roger
New sp GBL1044

Revision 1.3  2001/03/16 18:27:55  roger
Added branding feature to stored procedures

Revision 1.2  2001/03/16 03:39:00  roger
Added Log keyword

@type=insert
@parmstyle=GENERAL
@update_cols=Enterprise EntityType EntityID
@insert_cols=Enterprise EntityType EntityID
@execute

// Return any parms that need to
// We will insert tagging info into the Flag and Flagx tables iff needed
// Do not insert if we are deleting!
// if :EffTo <> :Forever
EXEC SQL INSERT INTO @t_schema.FLAG 

(
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, Valfrom
, Valto
, EffFrom
, Effto
, OPENID
, TranID
, Ref_NLSID
)

SELECT
  :Enterprise
 ,:EntityType
 ,:EntityID
 ,TAG.AttributeCode
 ,TAG.AttributeValue
 ,:now
 ,:forever
 ,:now
 ,:forever
 ,:OPENID
 ,:TranID
 ,:Ref_NLSID
FROM @t_schema.SessionTags TAG
WHERE
    TAG.SessionID = :SESSIONID
AND TAG.Enterprise = :Enterprise
AND TAG.OPWGID = :OPENID
AND :forever = :EffTo
AND (TAG.AttributeCode, TAG.AttributeValue) NOT IN 
 (SELECT 
    F.AttributeCode
   ,F.AttributeValue 
  FROM @t_schema.Flag F WHERE
      F.Enterprise = :Enterprise
  AND F.EntityType = :EntityType
  AND F.EntityID = :EntityID
  AND F.ValTo = :forever
  AND :now BETWEEN F.EffFrom and F.EffTo
  )
;

EXEC SQL INSERT INTO @t_schema.FLAGX
(
  Enterprise
, EntityType
, EntityID
, AttributeCode
, AttributeValue
, Valfrom
, Valto
, EffFrom
, Effto
, OPENID
, TranID
, Ref_NLSID
)

SELECT
  :Enterprise
 ,:EntityType
 ,:EntityID
 ,TAG.AttributeCode
 ,TAG.AttributeValue
 ,:now
 ,:forever
 ,:now
 ,:forever
 ,:OPENID
 ,:TranID
 ,:Ref_NLSID
FROM @t_schema.SessionTags TAG
WHERE
    TAG.SessionID = :SESSIONID
AND TAG.Enterprise = :Enterprise
AND TAG.OPWGID = :OPENID
AND :forever = :EffTo
AND (TAG.AttributeCode, TAG.AttributeValue) NOT IN 
 (SELECT 
    F.AttributeCode
   ,F.AttributeValue 
  FROM @t_schema.Flag F WHERE
      F.Enterprise = :Enterprise
  AND F.EntityType = :EntityType
  AND F.EntityID = :EntityID
  AND F.ValTo = :forever
  AND :now BETWEEN F.EffFrom and F.EffTo
  )
;

*inoutEntityID = EntityID;


EXEC SQL COMMIT WORK;

@parameters
inout ReturnStatus int
in OPENID int
in SESSIONID int
in Enterprise varchar(16)
in EntityType varchar(32)
inout EntityID int
in TranID int
in EffFrom varchar(26)
in EffTo varchar(26)
in Ref_NLSID int
@end


