@name=GBL2945
@noremote=true
@type=basic
@dbase=opicmpdh
@addperm=true
@narrative
---------------------------------------------------------------------------------------------
--  This replaces WHY2945 - MetaGetRoleEntity
---------------------------------------------------------------------------------------------
$Log: gbl2945.txt,v $
Revision 1.17  2010/06/21 15:43:05  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.16  2004/10/20 21:01:41  dave
changes to gen parm

Revision 1.15  2004/02/20 20:21:50  roger
Must be @t_schema

Revision 1.14  2004/02/20 18:09:31  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.13  2003/11/25 19:15:42  gregg
Entity longdescription

Revision 1.12  2003/04/28 21:10:01  dave
more Entity/Role removal logic

Revision 1.11  2002/12/05 18:54:21  gregg
get entityclass from MLA table

Revision 1.10  2001/10/10 17:57:23  dave
added 'X' to the mix

Revision 1.9  2001/07/21 04:02:13  roger
Change MetaLinkAttribute to MetaLinkAttr
Change "opicm" to @t_schema in some

Revision 1.8  2001/06/05 21:56:36  gregg
Nlsid for MetaDescriptions now is: NLSID IN (1, :NLSID)

Revision 1.7  2001/05/30 19:29:53  dana
add  'A' to DescriptionClass for ABR selection

Revision 1.6  2001/05/09 22:13:11  roger
Remove dead code which was commented out

Revision 1.5  2001/05/07 23:37:03  dana
modify sql

Revision 1.4  2001/03/16 18:27:53  roger
Added branding feature to stored procedures

Revision 1.3  2001/03/16 03:38:58  roger
Added Log keyword

@desc=NewMetaGetRoleEntity
@fenced=true
@results=1
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl2945.txt,v 1.17 2010/06/21 15:43:05 wendy Exp $";
EXEC SQL END DECLARE SECTION;
EXEC SQL DECLARE sp_cursor CURSOR FOR
SELECT
  ME.Enterprise
, ME.DescriptionType
, COALESCE(ISREL.LINKCODE,'Entity')
, ME.NLSID
, ME.LongDescription
, MA.DescriptionType
, (SELECT ShortDescription
FROM @t_schema.MetaDescription MAD
WHERE
MAD.Enterprise = 'NE' AND
MAD.DescriptionClass = 'AttType' AND
MAD.DescriptionType = MA.DescriptionClass AND
MAD.NLSID = 1 AND
MAD.ValFrom <= :ValOn AND :ValOn < MAD.ValTo AND MAD.EffFrom <= :EffOn AND :EffOn < MAD.EffTo
) AS AttributeType
, MA.NLSID
, MA.LongDescription
, MA.ShortDescription
, MAR.LINKTYPE1
, (SELECT ShortDescription
FROM @t_schema.MetaDescription MERRAD
WHERE
MERRAD.Enterprise = 'NE' AND
MERRAD.DescriptionClass = 'CapCode' AND
MERRAD.DescriptionType = MAR.LinkValue AND
MERRAD.NLSID IN (1, :NLSID) AND
MERRAD.ValFrom <= :ValOn AND :ValOn < MERRAD.ValTo AND MERRAD.EffFrom <= :EffOn AND :EffOn < MERRAD.EffTo
) AS Capability
FROM @t_schema.MetaEntity R

INNER JOIN @t_schema.MetaDescription ME ON
ME.Enterprise = R.Enterprise AND
ME.DescriptionClass IN ('Entity','Relator') AND
ME.DescriptionType = :LinkType2 AND
ME.NLSID IN (1, :NLSID) AND
ME.ValFrom <= :ValOn AND :ValOn < ME.ValTo AND ME.EffFrom <= :EffOn AND :EffOn < ME.EffTo

LEFT JOIN @t_schema.METALINKATTR ISREL ON
    ISREL.enterprise = :Enterprise 
AND ISREL.linkType = ME.DescriptionType
AND ISREL.valto > :ValOn 
AND ISREL.valfrom <= :ValOn 
AND ISREL.effto > :EffOn 
AND ISREL.efffrom <= :EffOn

INNER JOIN @t_schema.MetaLinkAttr MEA ON
MEA.Enterprise = R.Enterprise AND
MEA.LinkType = 'Entity/Attribute' AND
MEA.LinkType1 = ME.DescriptionType AND
MEA.LinkCode = 'EntityAttribute' AND
MEA.ValFrom <= :ValOn AND :ValOn < MEA.ValTo AND MEA.EffFrom <= :EffOn AND :EffOn < MEA.EffTo

INNER JOIN @t_schema.MetaLinkAttr MAR ON
MAR.Enterprise = MEA.Enterprise AND

MAR.LinkType = 'Role/Attribute' AND
MAR.LinkType2 = MEA.LinkType2 AND

MAR.LinkCode = 'Capability' AND
MAR.ValFrom <= :ValOn AND :ValOn < MAR.ValTo AND MAR.EffFrom <= :EffOn AND :EffOn < MAR.EffTo
INNER JOIN @t_schema.MetaLinkAttr MRA ON
MRA.Enterprise = R.Enterprise AND
MRA.LinkType = 'Role/Attribute' AND
MRA.LinkType1 = R.EntityType AND
MRA.LinkType2 = MAR.linktype2 AND
MRA.LinkCode = 'Capability' AND
MRA.ValFrom <= :ValOn AND :ValOn < MRA.ValTo
AND MRA.EffFrom <= :EffOn AND :EffOn < MRA.EffTo

INNER JOIN @t_schema.MetaDescription MA ON
MA.Enterprise = R.Enterprise AND
MA.DescriptionType = MRA.LinkType2 AND
MA.DescriptionClass IN ('T','B','I','L','X','P','F','U','D','S','A') AND
MA.NLSID IN (1, :NLSID) AND
MA.ValFrom <= :ValOn AND :ValOn < MA.ValTo
AND MA.EffFrom <= :EffOn AND :EffOn < MA.EffTo

WHERE
R.Enterprise = :Enterprise AND
R.EntityClass = 'Role' AND
R.EntityType = :RoleCode AND
R.ValFrom <= :ValOn AND :ValOn < R.ValTo AND R.EffFrom <= :EffOn AND :EffOn < R.EffTo
ORDER BY
MA.DescriptionType
;
@execute
EXEC SQL OPEN sp_cursor;
@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in LinkType2 varchar(32)
in OPENID int
in NLSID int
in ValOn varchar(26)
in EffOn varchar(26)
@end


