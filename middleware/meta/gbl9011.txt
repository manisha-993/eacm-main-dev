@name=GBL9011
@type=basic
@dbase=opicmpdh
@noremote=true
@addperm=false
@narrative

Better EntityId Blocking for CatODS Init

$Log: gbl9011.txt,v $
Revision 1.5  2010/06/21 15:42:44  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.4  2005/12/23 22:44:10  bala
change to hardcoded schema

Revision 1.3  2005/12/23 21:27:37  bala
try again

Revision 1.2  2005/12/23 20:53:29  bala
add Declare Section

Revision 1.1  2005/12/23 19:00:48  bala
check in


@desc=This returns a list of blocks that have entityid's for a given type
@fenced=true
@results=1
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl9011.txt,v 1.5 2010/06/21 15:42:44 wendy Exp $";
EXEC SQL END DECLARE SECTION;

EXEC SQL DECLARE entity_cursor CURSOR FOR
WITH mymax(MaxEntityId,MinEntityId) AS (
SELECT
  MAX(E.EntityID),Min(E.EntityID)
FROM  opicm.ENTITY E
WHERE
    E.Enterprise = :Enterprise
AND E.EntityType = :EntityType
AND E.Valto = :forever AND CURRENT TIMESTAMP BETWEEN E.EffFrom AND E.EffTo
)
, myinterm(minentityid, maxentityid, start, end, hitcounter) as
(
  SELECT minentityid, maxentityid,  minentityid-1, minentityid, 1 FROM mymax
  UNION ALL
  SELECT ROOT.minentityid, ROOT.maxentityid, ROOT.end+1, ROOT.end+:Chunk,
(
    Select
    case
        when count(distinct e.entityid) > 0 then 1
        else 0
    end
    mycount
    from opicm.entity e
        LEFT JOIN @t_schema.MetaLinkAttr M1 ON
        M1.Enterprise = :Enterprise
            AND M1.LinkType = 'Entity/Status/ODSFilter'
            AND M1.LinkType1 = :EntityType
            AND M1.Linktype2 = :ODSSchema
            AND M1.Valto = :forever AND CURRENT TIMESTAMP BETWEEN M1.EffFrom AND M1.EffTo
            LEFT JOIN @t_schema.Flag F1 ON
        F1.Enterprise = :Enterprise
            AND F1.EntityType = e.EntityType
            AND F1.EntityID = e.EntityID
            AND F1.AttributeCode = M1.LinkCode
            AND F1.AttributeValue = M1.LinkValue
            AND F1.Valto = :forever AND CURRENT TIMESTAMP BETWEEN F1.EffFrom AND F1.EffTo
    where
        e.enterprise = :Enterprise
    and e.entityid between ROOT.end and ROOT.END+:Chunk
    and e.entitytype = :EntityType
    and e.valto > current timestamp and e.effto >  current timestamp
         AND 1 = (CASE
    WHEN M1.Enterprise IS NOT NULL AND F1.Enterprise IS NULL THEN 0
    ELSE 1 END)
)
from myinterm ROOT
  WHERE ROOT.end between ROOT.minentityid and ROOT.maxentityid or root.end = 0
)
,mymaxr(MaxEntityId,MinEntityId) AS (
SELECT
  MAX(R.EntityID),Min(r.EntityID)
FROM  opicm.Relator R
WHERE
    R.Enterprise = :Enterprise
AND R.EntityType = :EntityType
AND R.Valto = :forever AND CURRENT TIMESTAMP BETWEEN R.EffFrom AND R.EffTo
)
, myintermr(minentityid, maxentityid, start, end, hitcounter) as
(
  SELECT minentityid, maxentityid,  minentityid-1, minentityid, 1 FROM mymaxr
  UNION ALL
  SELECT ROOT.minentityid, ROOT.maxentityid, ROOT.end+1, ROOT.end+:Chunk,
(
    Select
    case
        when count(distinct r.entityid) > 0 then 1
        else 0 end
    mycount
    from opicm.relator r
        LEFT JOIN @t_schema.MetaLinkAttr M1 ON
                        M1.Enterprise = :Enterprise
        AND M1.LinkType = 'Entity/Status/ODSFilter'
        AND M1.LinkType1 = :EntityType
        AND M1.Linktype2 = :ODSSchema
        AND M1.Valto = :forever AND CURRENT TIMESTAMP BETWEEN M1.EffFrom AND M1.EffTo
        LEFT JOIN @t_schema.Flag F1 ON
                        F1.Enterprise = :Enterprise
        AND F1.EntityType = R.EntityType
        AND F1.EntityID = R.EntityID
        AND F1.AttributeCode = M1.LinkCode
        AND F1.AttributeValue = M1.LinkValue
        AND F1.Valto = :forever AND CURRENT TIMESTAMP BETWEEN F1.EffFrom AND F1.EffTo
        where
            R.Enterprise = :Enterprise
    and r.entityid between ROOT.end and ROOT.END+:Chunk
        AND R.EntityType = :EntityType
        AND R.Valto = :forever AND CURRENT TIMESTAMP BETWEEN R.EffFrom AND R.EffTo
        AND 1 = (CASE
              WHEN M1.Enterprise IS NOT NULL AND F1.Enterprise IS NULL THEN 0
              ELSE 1 END)
)
from myintermr ROOT
  WHERE ROOT.end between ROOT.minentityid and ROOT.maxentityid or root.end = 0
)
select * from myinterm where hitcounter > 0 and minentityid is not null
union
select * from myintermr where hitcounter > 0 and minentityid is not null
;

@execute

// Now open the cursor
EXEC SQL OPEN entity_cursor;
@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in EntityType varchar(32)
in ODSSchema varchar(16)
in Chunk int
@end
