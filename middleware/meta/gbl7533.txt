@name=GBL7533
@noremote=true
@type=basic
@dbase=opicmpdh
@addperm=false
@fenced=true
@results=1
@narrative
$Log: gbl7533.txt,v $
Revision 1.7  2010/06/21 15:43:14  wendy
Exceeded RMI 64k static block limit, not needed for RMI

Revision 1.6  2004/10/20 21:01:45  dave
changes to gen parm

Revision 1.5  2004/02/20 20:21:55  roger
Must be @t_schema

Revision 1.4  2004/02/20 18:09:34  roger
ALL table names must now be prefixed w/ @t_schema in
order to support multiple schemas in SPs.

Revision 1.3  2003/09/08 16:31:18  roger
Enterprise was changed to 16 char length

Revision 1.2  2002/11/27 19:26:15  gregg
change input param to RoleCode b/c we might want records for OPWG's other than the caller's
(in which case we'll have the rolecode, not OPWGID)

Revision 1.1  2002/11/27 19:20:44  gregg
initial load


@desc=Recursively retrieve all Action+Entity+Group records for a given Role starting from Action='EntryPoint'. Include Level and Parent Group of each Action.  
@parmstyle=GENERAL
@sql
EXEC SQL BEGIN DECLARE SECTION;
char brand[80] = "$Id: gbl7533.txt,v 1.7 2010/06/21 15:43:14 wendy Exp $";
EXEC SQL END DECLARE SECTION;
EXEC SQL DECLARE sp_cursor CURSOR FOR
with treeList (Level,Action,Entity,Group,ParentGroup) AS
(SELECT 
  INT(0)
 ,ROOT.linktype2  as Action
 ,ROOT.linkcode   as Entity
 ,ROOT.linkvalue  as Group
 ,'[NONE]'
 from @t_schema.MetaLinkAttr ROOT WHERE
     ROOT.enterprise = :Enterprise 
 AND ROOT.linktype = 'Role/Action/Entity/Group'
 AND ROOT.linktype1 = :RoleCode 
 AND ROOT.linktype2 = 'EntryPoint'
 AND ROOT.valfrom <= :ValOn 
 AND ROOT.valto > :ValOn
 AND ROOT.efffrom <= :EffOn 
 AND ROOT.effto > :EffOn
 UNION ALL
 SELECT 
  INT(PARENT.Level+1)
 ,CHILD.Action
 ,CHILD.Entity
 ,CHILD.Group
 ,CHILD.ParentGroup
 from treeList PARENT
 , (select distinct
     ROOT.linktype2 as Action
    ,ROOT.linkcode  as Entity
    ,ROOT.linkvalue as Group
    ,PARENTGROUP.linktype1 as ParentGroup
    from @t_schema.MetaLinkAttr ROOT 
    inner join @t_schema.MetaLinkAttr PARENTGROUP ON
        PARENTGROUP.enterprise = :Enterprise 
    AND PARENTGROUP.linktype = 'Group/Action'
    AND PARENTGROUP.linktype2 = ROOT.LINKTYPE2
    AND PARENTGROUP.linkcode = 'Link'
    AND PARENTGROUP.valfrom <= :ValOn 
    AND PARENTGROUP.valto > :ValOn
    AND PARENTGROUP.efffrom <= :EffOn 
    AND PARENTGROUP.effto > :EffOn
    WHERE
        ROOT.enterprise = :Enterprise 
    AND ROOT.linktype = 'Role/Action/Entity/Group'
    AND ROOT.linktype1 = :RoleCode 
    AND ROOT.valfrom <= :ValOn 
    AND ROOT.valto > :ValOn
    AND ROOT.efffrom <= :EffOn 
    AND ROOT.effto > :EffOn)    
    AS CHILD
 WHERE
     PARENT.Group = CHILD.ParentGroup
 AND PARENT.Action != CHILD.Action
 AND PARENT.Level < :MaxDepth
)
SELECT
 INT(Level)
,Action
,Entity
,Group
,ParentGroup
from treeList
ORDER BY Level, Action,Entity,Group,ParentGroup
;
@execute
EXEC SQL OPEN sp_cursor;
@parameters
inout ReturnStatus int
in Enterprise varchar(16)
in RoleCode varchar(32)
in MaxDepth int
in ValOn varchar(26)
in EffOn varchar(26)
@end




