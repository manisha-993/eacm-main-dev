// Licensed Materials -- Property of IBM
//
// (C) Copyright IBM Corp. 2008  All Rights Reserved.
// The source code for this program is not published or otherwise divested of
// its trade secrets, irrespective of what has been deposited with the U.S. Copyright office.
//
package COM.ibm.eannounce.abr.ln.adsxmlbh1;

import COM.ibm.eannounce.abr.util.*;
import COM.ibm.opicmpdh.middleware.*;
import COM.ibm.eannounce.objects.*;

import com.ibm.transform.oim.eacm.diff.*;
import com.ibm.transform.oim.eacm.util.PokUtils;

import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import javax.xml.parsers.*;
/**********************************************************************************
The necessary rows can be generated by joining three relators together (Left, Middle, and Right) and restricted by the following criterion along with the criterion specified in each section.

For GroupEntityType = MODELCG, the first criterion that is true is applied:
1.	If System MODEL.OSLEVEL is {empty | “OS Independent”}, then include the corresponding MODEL for all MODELCGOS
2.	If MODELCGOS.OS is "OS Independent", then include this MODELCGOS for all System MODELs
3.	If MODELCGOS.OS is in MODEL.OSLEVEL, then include the MODEL for this MODELCGOS
4.	Otherwise ignore.
For GroupEntityType = SEOCG, the first criterion that is true is applied:
1.	If System {MODEL.OSLEVEL | WWSEO.OS | LSEOBUNDLE.OSLEVEL} is {empty | “OS Independent”}, then include the corresponding System {MODEL | WWSEO | LSEOBUNDLE} for all SEOCGOS
2.	If SEOCGOS.OS is "OS Independent", then include this SEOCGOS for all System {MODEL & WWSEO & LSEOBUNDLE}.
3.	If SEOCGOS.OS is in System {MODEL.OSLEVEL | WWSEO.OS | LSEOBUNDLE.OSLEVEL}, then include the corresponding {MODEL | WWSEO | LSEOBUNDLE} for this SEOCGOS
4.	Otherwise ignore.

 
Notes: 
•	whenever a System “offering” is included, then there is a row added for each “Option” that is a child of the “OS” entity type of interest which may result in many rows being inserted.
•	OKTOPUB = No (“No”) needs to be handled by downstream systems.
•	For Right.COMPATPUBFLG = No (“No”) needs to be handled by downstream systems.





*/
public class ADSCOMPATGEN extends XMLMQRoot
{
//from		  rel			to
//MODELCG	  MDLCGMDL		MODEL
//MODELCG	  MDLCGMDLCGOS	MODELCGOS
//MODELCGOS	  MDLCGOSMDL	MODEL

/*
ADSWWCOMPAT	MDLCGMDL		D	0
ADSWWCOMPAT	MDLCGMDLCGOS	D	0
ADSWWCOMPAT	MDLCGOSMDL		D	1

*/
    static String m_strODSSchema = "GBLI.";
    static String m_tablename = "WWTECHCOMPAT";
    static String OSIndependent = "10589";
    protected Connection m_conODS = null;
    int count = 0;
    int decount = 0;
    int updatecount = 0;
    int errcount = 0;
    static final Hashtable Attr_OS;
    static{
    	Attr_OS = new Hashtable();
    	Attr_OS.put("MODEL", "OSLEVEL");
    	Attr_OS.put("LSEOBUNDLE", "OSLEVEL");
    	Attr_OS.put("MODELCGOS", "OS");
    	Attr_OS.put("SEOCGOS", "OS");
    	Attr_OS.put("WWSEO", "OS");
        
       }   
    static final int WWCOMPAT_ROW_LIMIT;
	static {
		String rowlimit = COM.ibm.opicmpdh.middleware.taskmaster.ABRServerProperties.getValue("COMPATGENABRSTATUS", "_CHUNKSIZE",
		"100000");
		WWCOMPAT_ROW_LIMIT = Integer.parseInt(rowlimit);
	}
    /**********************************
     * create xml and write to queue if notifynow=true
     */
    public void processThis(ADSABRSTATUS abr, Profile profileT1, Profile profileT2, EntityItem rootEntity, boolean notify)
    throws
    java.sql.SQLException,
    COM.ibm.opicmpdh.middleware.MiddlewareException,
    ParserConfigurationException,
    java.rmi.RemoteException,
    COM.ibm.eannounce.objects.EANBusinessRuleException,
    COM.ibm.opicmpdh.middleware.MiddlewareShutdownInProgressException,
    IOException,
    javax.xml.transform.TransformerException,
	MissingResourceException
    {
    	process(abr, profileT1, profileT2, getVeName(), rootEntity);
    	if (!getVeName2().equals("dummy")) {
    		process(abr, profileT1, profileT2, getVeName2(), rootEntity);
    	}
    }
    public void process(ADSABRSTATUS abr, Profile profileT1, Profile profileT2, String VeName, EntityItem rootEntity)
    throws
    java.sql.SQLException,
    COM.ibm.opicmpdh.middleware.MiddlewareException,
    ParserConfigurationException,
    java.rmi.RemoteException,
    COM.ibm.eannounce.objects.EANBusinessRuleException,
    COM.ibm.opicmpdh.middleware.MiddlewareShutdownInProgressException,
    IOException,
    javax.xml.transform.TransformerException,
	MissingResourceException
    {
 		long lastTime =System.currentTimeMillis();
 		long runTime = 0;
 		// do pull at current time so proper meta gets cached!!!
 		// some meta is post 1980 so VE gets bad info
 		// do pull at time2 (toDate)
 		EntityList listT2 = abr.getEntityListForDiff(profileT2, VeName,rootEntity);
 		// do pull at time1 (fromDate)
 		EntityList listT1 = abr.getEntityListForDiff(profileT1, VeName,rootEntity);
 		runTime = System.currentTimeMillis();
 		abr.addDebug("Time for both pulls: "+Stopwatch.format(runTime-lastTime));
 		lastTime=runTime;

 		// get VE steps for later flattening the VE
 		Hashtable hshMap =
 			((ExtractActionItem)listT2.getParentActionItem()).generateVESteps(abr.getDB(), profileT2,
 				rootEntity.getEntityType());
 		
 		if (getVeName().equals("ADSWWCOMPATMDLCGOSMDL1")) {
			hshMap.put("0MODELCGOSU","Hi");
			hshMap.put("0MODELD","Hi");
			}
 		if (getVeName().equals("ADSWWCOMPATSEOCGOSBDL")) {
			hshMap.put("0SEOCGOSU","Hi");
			hshMap.put("0LSEOBUNDLED","Hi");
			}	
 		if (getVeName().equals("ADSWWCOMPATSEOCGOSSEO")) {
			hshMap.put("0SEOCGOSU","Hi");
			hshMap.put("0WWSEOD","Hi");
			}	
 		if (getVeName().equals("ADSWWCOMPATSEOCGOSSVCSEO")) {
			hshMap.put("0SEOCGOSU","Hi");
			hshMap.put("0SVCSEOD","Hi");
			}	
 		// flatten both VEs using the VE steps
 		DiffVE diff = new DiffVE(listT1,listT2, hshMap);
 		diff.setCheckAllNLS(true);
 		abr.addDebug("hshMap: "+hshMap);
 		abr.addDebug("time1 flattened VE: "+diff.getPriorDiffVE());
 		abr.addDebug("time2 flattened VE: "+diff.getCurrentDiffVE());

 		// merge time1 and time2 flattened VEs into one with adds and deletes marked
 		Vector diffVct = diff.diffVE();
 		abr.addDebug(" diffVE info:\n"+diff.getDebug());
 		abr.addDebug(" diffVE flattened VE: "+diffVct);

 		runTime = System.currentTimeMillis();
 		abr.addDebug(" Time for diff: "+Stopwatch.format(runTime-lastTime));
 		lastTime=runTime;

 		// group all changes by entitytype, except for root entity
 		Hashtable diffTbl = new Hashtable();
 		boolean chgsFnd = false;
 		for (int x=0; x<diffVct.size(); x++){
 			DiffEntity de = (DiffEntity)diffVct.elementAt(x);
 			// keep track of any changes
 			chgsFnd = chgsFnd || de.isChanged();
 		}
 		for (int x=0; x<diffVct.size(); x++){
			DiffEntity de = (DiffEntity)diffVct.elementAt(x);
			// keep track of any changes
			chgsFnd = chgsFnd || de.isChanged();
		//abr.addDebug(" de.isChanged(): "+de.isChanged()+" "+de.toString());

			// must be able to find up and down links from a diffentity
			diffTbl.put(de.getKey(), de);

			String type = de.getEntityType();
			if (de.isRoot()){
				type = "ROOT";
			}
			Vector vct = (Vector)diffTbl.get(type);
			if (vct==null){
				vct = new Vector();
				diffTbl.put(type, vct);
			}
			vct.add(de);
		}
		// convert to xml and put on queue
		if (chgsFnd){
			// make sure there is a vector for each entitygroup in the extract
			for (int i=0; i< listT2.getEntityGroupCount(); i++){
				String type = listT2.getEntityGroup(i).getEntityType();
				Vector vct = (Vector)diffTbl.get(type);
				if (vct==null){
					vct = new Vector();
					diffTbl.put(type, vct);
				}
			}
			
			diffTbl.put("VeName", VeName);	
			populateTable(abr, profileT1, profileT2, diffTbl);

		    
		}else{
			//NO_CHANGES_FND=No Changes found for {0}
			abr.addXMLGenMsg("NO_CHANGES_FND",rootEntity.getKey());
		}

 		// release memory
 		listT1.dereference();
 		listT2.dereference();
 		hshMap.clear();
 		diffVct.clear();
 		diff.dereference();
 		
 		for (Enumeration eNum = diffTbl.elements(); eNum.hasMoreElements();)  {
 			Object obj = eNum.nextElement();
 			if(obj instanceof Vector){
 				((Vector)obj).clear();
 			}
 		}
 		diffTbl.clear();
     }

     /**
      * populateTable 
      * @param abr
      * @param diffTbl
      * @throws java.sql.SQLException
      * @throws COM.ibm.opicmpdh.middleware.MiddlewareException
      * @throws ParserConfigurationException
      * @throws java.rmi.RemoteException
      * @throws COM.ibm.eannounce.objects.EANBusinessRuleException
      * @throws COM.ibm.opicmpdh.middleware.MiddlewareShutdownInProgressException
      * @throws IOException
      * @throws javax.xml.transform.TransformerException
      */
     protected void populateTable(ADSABRSTATUS abr, Profile profileT1, Profile profileT2, Hashtable diffTbl)
     throws
     java.sql.SQLException,
     COM.ibm.opicmpdh.middleware.MiddlewareException,
     ParserConfigurationException,
     java.rmi.RemoteException,
     COM.ibm.eannounce.objects.EANBusinessRuleException,
     COM.ibm.opicmpdh.middleware.MiddlewareShutdownInProgressException,
     IOException,
     javax.xml.transform.TransformerException
     {
 		//use this difftbl and build one xml for each os
	    setConnection();
	    errcount = 0;
 		decount = 0;
 		updatecount = 0;
 		count = 0;
 		getModelsByOS(abr, diffTbl, profileT2.getNow(),profileT2.getEndOfDay());
 		if (decount>0)
 		    abr.addOutput("ADSWWCOMPATABR found deactivate count:" + decount + " records be deactivated from table. " + "Error count :" + errcount);
 		if (updatecount>0)
 			abr.addOutput("ADSWWCOMPATABR found updated count:" + updatecount + " records be updated. " + "Error count :" + errcount);
 		if (count>0)
 			abr.addOutput("ADSWWCOMPATABR found count:" + count + " records be inserted into table. " + "Error count :" + errcount);
 		// release memory
 		releaseConn();
 		System.gc();
     }
    
		protected void getModelsByOS(ADSABRSTATUS abr, Hashtable diffTbl, String update, String timeofchange) throws SQLException {	
			}
		/**
		 * prepare update compat table
		 * @param abr
		 * @param model2modelVct
		 * @param m_update
		 * @param m_timeofchange
		 */
	   protected void updateCompat(ADSABRSTATUS abr, Vector model2modelVct, String m_update, String m_timeofchange){
		   for (int i=0; i<model2modelVct.size(); i++){
				WWCOMPAT wwcompat = (WWCOMPAT)model2modelVct.elementAt(i);
			    UpdateWWTECHCOMPAT(abr, wwcompat , m_update, m_timeofchange);
		   }
	   }
		/**
		 * udpate the pubform pubto reletype of mdlcgosmdl when compatpubflg was changed. 
		 * @param abr
		 * @param CGOS
		 * @param CGOSID
		 * @param Optiontype
		 * @param OptionID
		 * @param oktoput
		 * @param pubfrom
		 * @param pubto
		 * @param reltype
		 * @param update
		 * @param timeofchange
		 * @return
		 */
	    protected int updateCOMPATPUBFLG(ADSABRSTATUS abr,  String CGOS, int CGOSID, String Optiontype, int  OptionID, String oktoput, String pubfrom, String pubto,String reltype, String update, String timeofchange){
	    	PreparedStatement statement = null;
	       	 
			int result = 0;
			String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ?, CompatibilityPublishingFlag = ?, RelationshipType = ?, PublishFrom = ?, PublishTo = ? " + 
			" WHERE  OptionEntityType = ? " + 
		    " AND OptionEntityId = ? " + 
		    " AND OSEntityType = ? " + 
		    " AND OSEntityId = ? " + 
		    " AND TimeOfChange < ? " +
		    " AND Activity <> 'D' "; 

					
		    try {
		    	setConnection();
	    		abr.addDebug(" Beging to execute updateCOMPATPUBFLG SQL : " + Optiontype + "|" + OptionID + "|" + CGOS + "|" + CGOSID + "|" + oktoput );
	    		statement = null;
	    		statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
		    	statement.setString(1, "C");
	            statement.setString(2, update);
	            statement.setString(3, timeofchange);
	            statement.setString(4, oktoput);
	            statement.setString(5, reltype);
	            statement.setString(6, pubfrom);
	            statement.setString(7, pubto);
	            statement.setString(8, Optiontype);
	            statement.setInt(9, OptionID);
	            statement.setString(10, CGOS);
	            statement.setInt(11, CGOSID);
	            statement.setString(12, timeofchange);
	            result = statement.executeUpdate(); 
	            updatecount+=result;
	            abr.addDebug(" end to execute updateCOMPATPUBFLG SQL, the update count is : " + result);
		    } catch (SQLException ex) {
	        	errcount++;
	        	abr.addOutput("Error: SQL Skipping update. Activity D" +   Optiontype + "|" + OptionID + "|" + CGOS + "|" + CGOSID + "|" + oktoput + " Error MESS:" + ex.getMessage());
	        }
	        finally{
				try {
		        	m_conODS.commit();
					if (statement!=null) {
						statement.close();
						statement=null;
					}
				}catch(Exception e){
					abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
				}
	        }
			return result;	
	    }
	    
	    /**
	     * deactivate the identified mdlcgosmdl is Del
	     * @param abr
	     * @param CGOS
	     * @param CGOSID
	     * @param Optiontype
	     * @param OptionID
	     * @param update
	     * @param timeofchange
	     * @return
	     */
        protected int deActivateMDLCGOSMDL(ADSABRSTATUS abr,  String CGOS, int CGOSID, String Optiontype, int  OptionID, String update, String timeofchange){
        	PreparedStatement statement = null;
       	 
			int result = 0;
			String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ?" + 
			" WHERE  OptionEntityType = ? " + 
		    " AND OptionEntityId = ? " + 
		    " AND OSEntityType = ? " + 
		    " AND OSEntityId = ? " + 
		    " AND TimeOfChange < ? " +
		    " AND Activity <> 'D' "; 

					
		    try {
		    	setConnection();
	    		abr.addDebug(" Beging to execute deActivateMDLCGOSMDL SQL : " + Optiontype + "|" + OptionID + "|" + CGOS + "|" + CGOSID);
	    		statement = null;
	    		statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
		    	statement.setString(1, "D");
	            statement.setString(2, update);
	            statement.setString(3, timeofchange);
	            statement.setString(4, Optiontype);
	            statement.setInt(5, OptionID);
	            statement.setString(6, CGOS);
	            statement.setInt(7, CGOSID);
	            statement.setString(8, timeofchange);
	            result = statement.executeUpdate(); 
	            decount += result;
	            abr.addDebug(" end to execute deActivateMDLCGOSMDL SQL, the deactivate count is : " + result);
		    } catch (SQLException ex) {
	        	errcount++;
	        	abr.addOutput("Error: SQL Skipping update. Activity D" +   Optiontype + "|" + OptionID + "|" + CGOS + "|" + CGOSID + " Error MESS:" + ex.getMessage());
	        }
	        finally{
				try {
		        	m_conODS.commit();
					if (statement!=null) {
						statement.close();
						statement=null;
					}
				}catch(Exception e){
					abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
				}
	        }
			return result;	
	    }
        	
       
	    protected  int deActivateSystemOS(ADSABRSTATUS abr, String Systemtype, int  SystemID, Vector os, String update, String timeofchange){
	    	PreparedStatement statement = null;
	 
			int result = 0;
			String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ? " + 
			" WHERE  SystemEntityType = ? " + 
		    " AND SystemEntityId = ? " + 
		    " AND SystemOS = ? " + 
		    " AND TimeOfChange < ? " +
		    " AND Activity <> 'D' "; 

					
		    try {
		    	setConnection();
		    	for (int i=0; i<os.size(); i++){    	    
		    		String osdel = (String)os.elementAt(i);
		    		abr.addDebug(" Beging to execute deActivateSystemOS SQL : " + Systemtype + "|" + SystemID + "|" + osdel  );
		    		statement = null;
		    		statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
			    	statement.setString(1, "D");
		            statement.setString(2, update);
		            statement.setString(3, timeofchange);
		            statement.setString(4, Systemtype);
		            statement.setInt(5, SystemID);
		            statement.setString(6, osdel);
		            statement.setString(7, timeofchange);
		            result = statement.executeUpdate();
		            decount+=result;
		            abr.addDebug(" end to execute deActivateSystemOS SQL, the deactivate count is : " + result);
		    		
		    	}
		       
		    	
		    	
		    } catch (SQLException ex) {
	        	errcount++;
	        	abr.addOutput("Error: SQL Skipping update. Activity D" +   Systemtype + "|" + SystemID + "|" + os + " Error MESS:" + ex.getMessage());
	        }
	        finally{
				try {
		        	m_conODS.commit();
					if (statement!=null) {
						statement.close();
						statement=null;
					}
				}catch(Exception e){
					abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
				}
	        }
			return result;	
	    }
	    /**
	     * deactivate the identified system and cg
	     * @param abr
	     * @param Systemtype
	     * @param SystemID
	     * @param cg
	     * @param cgID
	     * @param update
	     * @param timeofchange
	     * @return
	     */
	    
	    protected  int deActivateSystem(ADSABRSTATUS abr, String Systemtype, int SystemID, String cg, int cgID , String update, String timeofchange){
	    	PreparedStatement statement = null;
	    	 
			int result = 0;
			String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ? " + 
			" WHERE  SystemEntityType = ? " + 
		    " AND SystemEntityId = ? " + 
		    " AND GroupEntityType = ? " + 
		    " AND GroupEntityId = ? " +
		    " AND TimeOfChange < ? " +
		    " AND Activity <> 'D' "; 

					
		    try {
		       	setConnection();
		    	abr.addDebug(" Beging to execute deActivateSystem SQL : " + Systemtype + "|" + SystemID + "|" + cg + "|" +cgID );
		    	statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
		    	statement.setString(1, "D");
	            statement.setString(2, update);
	            statement.setString(3, timeofchange);
	            statement.setString(4, Systemtype);
	            statement.setInt(5, SystemID);
	            statement.setString(6, cg);
	            statement.setInt(7, cgID);
	            statement.setString(8, timeofchange);
	            result = statement.executeUpdate();
	            decount+=result;
	            abr.addDebug(" end to execute deActivateSystem SQL, the deactivate count is : " + result);
		    	
		    } catch (SQLException ex) {
	        	errcount++;
	        	abr.addOutput("Error: SQL Skipping update. Activity D" +   Systemtype + "|" + SystemID + "|" + cg + "|" +cgID + " Error MESS:" + ex.getMessage());
	        }
	        finally{
				try {
		        	m_conODS.commit();
					if (statement!=null) {
						statement.close();
						statement=null;
					}
				}catch(Exception e){
					abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
				}
	        }
			return result;	
	    	
	    }
	    /**
	     * deactivate identified CG and CGOS
	     * @param abr
	     * @param cg
	     * @param cgID
	     * @param CGOS
	     * @param CGOSID
	     * @param update
	     * @param timeofchange
	     * @return
	     */
	    protected  int deActivateCGOS(ADSABRSTATUS abr,String cg, int cgID ,  String CGOS, int CGOSID,  String update, String timeofchange){
	    	PreparedStatement statement = null;
	    	 
			int result = 0;
			String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ? " + 
			" WHERE  GroupEntityType = ? " + 
		    " AND GroupEntityId = ? " +
		    " AND OSEntityType = ? " + 
		    " AND OSEntityId = ? " + 
		    " AND TimeOfChange < ? " +
		    " AND Activity <> 'D' "; 

					
		    try {
		       	setConnection();
		    	abr.addDebug(" Beging to execute deActivateCGOS SQL : "  + cg + "|" +cgID + "|" + CGOS + "|" + CGOSID   );
		    	statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
		    	statement.setString(1, "D");
	            statement.setString(2, update);
	            statement.setString(3, timeofchange);
	            statement.setString(4, cg);
	            statement.setInt(5, cgID);
	            statement.setString(6, CGOS);
	            statement.setInt(7, CGOSID);
	            statement.setString(8, timeofchange);
	            result = statement.executeUpdate();
	            decount+=result;
	            abr.addDebug(" end to execute deActivateCGOS SQL, the deactivate count is : " + result);
		    	
		    } catch (SQLException ex) {
	        	errcount++;
	        	abr.addOutput("Error: SQL Skipping update. Activity D"   + cg + "|" +cgID + "|" + CGOS + "|" + CGOSID + " Error MESS:" + ex.getMessage());
	        }
	        finally{
				try {
		        	m_conODS.commit();
					if (statement!=null) {
						statement.close();
						statement=null;
					}
				}catch(Exception e){
					abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
				}
	        }
			return result;	
	    	
	    }
	    /**
	     * 
	     * @param Systemtype
	     * @param SystemID
	     * @param cg
	     * @param cgID
	     * @return
	     */
	   
	    
    protected  int deActivateOption(ADSABRSTATUS abr, String Optiontype, int OptionID, String os, int osID , String update, String timeofchange){
    	PreparedStatement statement = null;
 
		int result = 0;
		String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ? " + 
	    " WHERE OptionEntityType = ? " +
	    " AND OptionEntityId = ? " +
	    " AND OSEntityType = ? " + 
	    " AND OSEntityId = ? " +
	    " AND TimeOfChange < ? " +
	    " AND Activity <> 'D' "; 

				
	    try {
	       	setConnection();
	    	abr.addDebug(" Beging to execute deActivateOption SQL : " + Optiontype + "|" + OptionID + "|" + os + "|" +osID );
	    	statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
	    	statement.setString(1, "D");
            statement.setString(2, update);
            statement.setString(3, timeofchange);
            statement.setString(4, Optiontype);
            statement.setInt(5, OptionID);
            statement.setString(6, os);
            statement.setInt(7, osID);
            statement.setString(8, timeofchange);
            result = statement.executeUpdate();
            decount+=result;
            abr.addDebug(" end to execute deActivateOption SQL, the deactivate cound is : " + result);
	    	
	    } catch (SQLException ex) {
        	errcount++;
        	abr.addOutput("Error: SQL Skipping update. Activity D" +   Optiontype + "|" + OptionID + "|" + os + "|" +osID + " Error MESS:" + ex.getMessage());
        }
        finally{
			try {
	        	m_conODS.commit();
				if (statement!=null) {
					statement.close();
					statement=null;
				}
			}catch(Exception e){
				abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
			}
        }
		return result;	
    }
	  
    /**
     *  deActivate the identified CG
     * @param abr
     * @param cg
     * @param osID
     * @param update
     * @param timeofchange
     * @return
     */
    protected  int deActivateCG(ADSABRSTATUS abr, String cg, int cgID , String update, String timeofchange){
    	PreparedStatement statement = null;
 
		int result = 0;
		String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ? " + 
		" WHERE GroupEntityType = ? " + 
	    " AND GroupEntityId = ? " + 
	    " AND TimeOfChange < ? " +
	    " AND Activity <> 'D' "; 

				
	    try {
	       	setConnection();
	    	abr.addDebug(" Beging to execute deActivateCG SQL : " + "|" + cg + "|" +cgID );
	    	statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
	    	statement.setString(1, "D");
            statement.setString(2, update);
            statement.setString(3, timeofchange);
            statement.setString(4, cg);
            statement.setInt(5, cgID);
            statement.setString(6, timeofchange);
            result = statement.executeUpdate();
            decount+=result;
            abr.addDebug(" end to execute deActivateCG SQL, the deactivate count is : " + result);
	    	
	    } catch (SQLException ex) {
        	errcount++;
        	abr.addOutput("Error: SQL Skipping update. Activity D" + "|" + cg + "|" +cgID + " Error MESS:" + ex.getMessage());
        }
        finally{
			try {
	        	m_conODS.commit();
				if (statement!=null) {
					statement.close();
					statement=null;
				}
			}catch(Exception e){
				abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
			}
        }
		return result;	
    }
    /**
     *  deActivate the identified CGOS
     * @param abr
     * @param cgos
     * @param osID
     * @param os
     * @param update
     * @param timeofchange
     * @return
     */
    protected  int deActivateCGOS(ADSABRSTATUS abr, String cgos, int osID , String os, String update, String timeofchange){
    	PreparedStatement statement = null;
 
		int result = 0;
		String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ? " + 
	    " WHERE OSEntityType = ? " + 
	    " AND OSEntityId = ? " +
	    " AND OS = ? " + 
	    " AND TimeOfChange < ? " +
	    " AND Activity <> 'D' "; 

				
	    try {
	       	setConnection();
	    	abr.addDebug(" Beging to execute deActivateCGOS SQL : " + "|" + cgos + "|" +osID + "|" +os);
	    	statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
	    	statement.setString(1, "D");
            statement.setString(2, update);
            statement.setString(3, timeofchange);
            statement.setString(4, cgos);
            statement.setInt(5, osID);
            statement.setString(6, os);
            statement.setString(7, timeofchange);
            result = statement.executeUpdate();
            decount+=result;
            abr.addDebug(" end to execute deActivateCGOS SQL, the deactivate count is : " + result);
	    	
	    } catch (SQLException ex) {
        	errcount++;
        	abr.addOutput("Error: SQL Skipping update. Activity D" + "|" + cgos + "|" +osID + "|" +os+ " Error MESS:" + ex.getMessage());
        }
        finally{
			try {
	        	m_conODS.commit();
				if (statement!=null) {
					statement.close();
					statement=null;
				}
			}catch(Exception e){
				abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
			}
        }
		return result;	
    }
    /**
     *  update the identified CG oktopub
     * @param abr
     * @param Optiontype
     * @param OptionID
     * @param os
     * @param osID
     * @param update
     * @param timeofchange
     * @return
     */
    protected  int updateCGOKTOPUB(ADSABRSTATUS abr, String cg, int cgID , String OKTOPUB, String BRANDCD, String update, String timeofchange){
    	PreparedStatement statement = null;
 
		int result = 0;
		String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ?, OKTOPUB = ?, BRANDCD_FC = ?" + 
	    " WHERE GroupEntityType = ? " + 
	    " AND GroupEntityId = ? " +
	    " AND TimeOfChange < ? " +
	    " AND Activity <> 'D' "; 

				
	    try {
	       	setConnection();
	    	abr.addDebug(" Beging to execute updateCGOKTOPUB SQL : " + "|" + cg + "|" +cgID + "|" + OKTOPUB + "|" +BRANDCD);
	    	statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);
	    	statement.setString(1, "C");
            statement.setString(2, update);
            statement.setString(3, timeofchange);
            statement.setString(4, OKTOPUB);
            statement.setString(5, BRANDCD);
            statement.setString(6, cg);
            statement.setInt(7, cgID);
            statement.setString(8, timeofchange);
            result = statement.executeUpdate();
            updatecount+=result;
            abr.addDebug(" end to execute updateCGOKTOPUB SQL, the update count is : " + result);
	    	
	    } catch (SQLException ex) {
        	errcount++;
        	abr.addOutput("Error: SQL updating . Activity C" + "|" + cg + "|" +cgID + "|" + OKTOPUB + "|" +BRANDCD +"  Error MESS:" + ex.getMessage());
        }
        finally{
			try {
	        	m_conODS.commit();
				if (statement!=null) {
					statement.close();
					statement=null;
				}
			}catch(Exception e){
				abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
			}
        }
		return result;	
    }
	/**
	 * For each row produced via the specified extract (query), 
		where the record is not in 
		Activity <> “D”
		Update = don’t care
		TimeOfChange = don’t care
		all other columns are identical
		then insert with the following values unless the sections below specify different values.
		Activity = “A”
		Updated = NOW()
		TimeOfChange = T2

	 * 
	 * @param abr
	 * @param m2m
	 * @param m_Updated
	 * @param m_TimeOfChange
	 * @return
	 * @throws SQLException 
	 * @throws java.sql.SQLException
	 */
    protected int UpdateWWTECHCOMPAT(ADSABRSTATUS abr, WWCOMPAT wwcompat, String m_Updated, String m_TimeOfChange)
    	 
    		{
    			PreparedStatement statement = null;
    			int result = 0;
    			
    			String strInsertWWTECHCOMPATSQL = "INSERT  INTO " + m_strODSSchema + m_tablename +
                " (Activity, Updated, TimeOfChange, BRANDCD_FC, SystemEntityType, SystemEntityId, SystemOS, GroupEntityType, GroupEntityId, OKTOPUB, OSEntityType, OSEntityId, OS, OptionEntityType, OptionEntityId, CompatibilityPublishingFlag, RelationshipType, PublishFrom, PublishTo) " + 
                " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    			
    			String strUpdateWWTECHCOMPATSQL = "UPDATE " + m_strODSSchema + m_tablename + " SET Activity =  ?, Updated = ?, TimeOfChange = ?, BRANDCD_FC = ?, OKTOPUB = ?, CompatibilityPublishingFlag = ?, RelationshipType = ?, PublishFrom = ?, PublishTo = ? " + 
    			" WHERE  SystemEntityType = ? " + 
    		    " AND SystemEntityId = ? " + 
    		    " AND SystemOS = ? " + 
    		    " AND GroupEntityType = ? " + 
    		    " AND GroupEntityId = ? " + 
    		    " AND OSEntityType = ? " + 
    		    " AND OSEntityId = ? " + 
    		    " AND OS = ? " + 
    		    " AND OptionEntityType = ? " +
    		    " AND OptionEntityId = ? ";
    	        try {		
    	             String[] answer = entityExistsInCOMPAT(abr, wwcompat, m_TimeOfChange);
				
    	            if (answer == null ){
    	      
    	                	   abr.addDebug(" Beging to execute strInsertWWTECHCOMPATSQL : " + wwcompat.getKey() );
        	    			   statement = m_conODS.prepareStatement(strInsertWWTECHCOMPATSQL);

        	    	            statement.clearParameters();
        	    	            statement.setString(1, "A");
        	    	            statement.setString(2, m_Updated);
        	    	            statement.setString(3, m_TimeOfChange);
        	    	            statement.setString(4, wwcompat.getBRANDCD_FC());
        	    	            statement.setString(5, wwcompat.getSystemEntityType());
        	    	            statement.setInt(6, wwcompat.getSystemEntityId());
        	    	            statement.setString(7, wwcompat.getSystemOS());
        	    	            statement.setString(8, wwcompat.getGroupEntityType());
        	    	            statement.setInt(9, wwcompat.getGroupEntityId());
        	    	            statement.setString(10, wwcompat.getOKTOPUB());
        	    	            statement.setString(11, wwcompat.getOSEntityType());
        	    	            statement.setInt(12, wwcompat.getOSEntityId());            
        	    	            statement.setString(13, wwcompat.getOS());
        	    	            statement.setString(14, wwcompat.getOptionEntityType());
        	    	            statement.setInt(15, wwcompat.getOptionEntityId());
        	    	            statement.setString(16, wwcompat.getCompatibilityPublishingFlag());
        	    	            statement.setString(17, wwcompat.getRelationshipType());
        	    	            statement.setString(18, wwcompat.getPublishFrom());
        	    	            statement.setString(19, wwcompat.getPublishTo());
                                result = statement.executeUpdate();
                                count++;
                                abr.addDebug("execute INSERT into table WWTECHCOMPAT :COUNT: " + count  +  "\n" + wwcompat.getKey());  
    	            	   
    	            }else{
    	            	String activity = answer[0];
    	            	String timeofChange = answer[1];
    	            	if (m_TimeOfChange.compareTo(timeofChange)>=0){
    	            		
    		    				statement = m_conODS.prepareStatement(strUpdateWWTECHCOMPATSQL);

    		    	            statement.clearParameters();
    		    	            statement.setString(1, "A");
    		    	            statement.setString(2, m_Updated);
    		    	            statement.setString(3, m_TimeOfChange);
    		    	            statement.setString(4, wwcompat.getBRANDCD_FC());
    		    	            statement.setString(5, wwcompat.getOKTOPUB());
    		    	            statement.setString(6, wwcompat.getCompatibilityPublishingFlag());
    	                        statement.setString(7, wwcompat.getRelationshipType());
    		    	            statement.setString(8, wwcompat.getPublishFrom());
    		    	            statement.setString(9, wwcompat.getPublishTo());
    		    	            statement.setString(10,wwcompat.getSystemEntityType());
    		    	            statement.setInt(11, wwcompat.getSystemEntityId());
    		    	            statement.setString(12, wwcompat.getSystemOS());
    		    	            statement.setString(13, wwcompat.getGroupEntityType());
    		    	            statement.setInt(14, wwcompat.getGroupEntityId());
    		    	            statement.setString(15,  wwcompat.getOSEntityType());
    		    	            statement.setInt(16, wwcompat.getOSEntityId()); 
    		    	            statement.setString(17, wwcompat.getOS());
    		    	            statement.setString(18, wwcompat.getOptionEntityType());
    		    	            statement.setInt(19, wwcompat.getOptionEntityId());
    		    	            result = statement.executeUpdate();
    		    	            updatecount++;
    	                        abr.addDebug("execute UPDATE into talble WWTECHCOMPAT :UPDATE COUNT: " + updatecount  +  "\n" + wwcompat.getKey());
    	            		
    	            	}  else{
    	            		abr.addDebug("This record has beed update at the same time of " + timeofChange + "activity" + activity + "\n" + wwcompat.getKey()); 
    	            	}
    	            }  
   	                   	               	            
    	        } catch (SQLException ex) {
    	        	errcount++;
    	        	abr.addOutput("Error: SQL Skipping insert. Activity " +  wwcompat.getKey() +  "\n" + " Error MESS:" + ex.getMessage());
    	        }
    	        finally{
    				try {
        	        	m_conODS.commit();
    					if (statement!=null) {
    						statement.close();
    						statement=null;
    					}
    				}catch(Exception e){
    					abr.addDebug("UpdateWWTECHCOMPAT(), unable to close statement. "+ e);
    				}
    	        }
    			return result;
    }
/**
 * entityExistsInCOMPAT
 *
 * @param _strEtype
 * @param _iEid
 * @param _iNls
 * @return
 *  @author David Bigelow
 * @throws SQLException 
 */
	/**
	 * entityExistsInCOMPAT
	 *
	 * @param _strEtype
	 * @param _iEid
	 * @param _iNls
	 * @return
	 *  @author David Bigelow
	 * @throws SQLException 
	 */
	protected String[] entityExistsInCOMPAT(ADSABRSTATUS abr,  WWCOMPAT wwcompat, String m_TimeOfChange) throws SQLException {
	    String strCheckExistSQL = "SELECT Activity, TimeOfChange from " + m_strODSSchema + m_tablename + " WHERE  SystemEntityType = ? " + 
	    " AND SystemEntityId = ? " + 
	    " AND SystemOS = ? " + 
	    " AND GroupEntityType = ? " + 
	    " AND GroupEntityId = ? " + 
	    " AND OSEntityType = ? " + 
	    " AND OSEntityId = ? " + 
	    " AND OS = ? " + 
	    " AND OptionEntityType = ? " +
	    " AND OptionEntityId = ? with ur";
	    String result[] = null;
	    //abr.addDebug("Check m2m whether exist in techwwcompat:" + wwcompat.getKey());
	    PreparedStatement psCheck = null;
	    ResultSet rs = null;
	    try {
	        	
	            psCheck = m_conODS.prepareStatement(strCheckExistSQL);
	            psCheck.setString(1, wwcompat.getSystemEntityType());
	            psCheck.setInt(2, wwcompat.getSystemEntityId());
	            psCheck.setString(3, wwcompat.getSystemOS());
	            psCheck.setString(4, wwcompat.getGroupEntityType());
	            psCheck.setInt(5, wwcompat.getGroupEntityId());
	            psCheck.setString(6, wwcompat.getOSEntityType());
	            psCheck.setInt(7, wwcompat.getOSEntityId());
	            psCheck.setString(8, wwcompat.getOS());
	            psCheck.setString(9, wwcompat.getOptionEntityType());
	            psCheck.setInt(10, wwcompat.getOptionEntityId());
	            rs = psCheck.executeQuery();
	            if (rs.next()) {
	            	String Activity = rs.getString("Activity");
	            	String TimeOfChange = rs.getString("TimeOfChange");
	            	result = new String[]{Activity,TimeOfChange};
	            	abr.addDebug(" reslut Activity : " + Activity + "  TimeOfChange: " + TimeOfChange);
	                   
	            } else{
	            	abr.addDebug(" could not find reslut Activity");
	            }
	          
	        }
	        finally {
	            if (rs != null) {
	                rs.close();
	                rs = null;
	            }
	            if (psCheck != null) {
	                psCheck.close();
	                psCheck = null;
	            }
	        }
	    return result;
	}
		/**
		 * @param osLvlVct
		 * @param mdlitem
		 */
		protected static void setSystemSoLvVct(Vector osLvlVct, EntityItem mdlitem) {
			if (mdlitem != null){
				String EntityType = mdlitem.getEntityType();
				EANFlagAttribute fAtt = null;
				if ("MODEL".equals(EntityType)||"LSEOBUNDLE".equals(EntityType)){
					fAtt = (EANFlagAttribute)mdlitem.getAttribute("OSLEVEL");
				}else{
				    fAtt = (EANFlagAttribute)mdlitem.getAttribute("OS");
				}
				if (fAtt!=null && fAtt.toString().length()>0){
					// Get the selected Flag codes.
					MetaFlag[] mfArray = (MetaFlag[]) fAtt.get();
					for (int i2 = 0; i2 < mfArray.length; i2++){
						// get selection
						if (mfArray[i2].isSelected()){
							osLvlVct.add(mfArray[i2].getFlagCode());
						}
					}
				}else {
					osLvlVct.add("");
				}
			} 
		}
		
	  	/**
	  	 * Check System or option OSLeve or OS wheth is Update or Delete
	  	 * @param diff
	  	 * @param osvalue
	  	 * @param attrcode
	  	 * @return
	  	 */
	  	protected static String checkSYSOSValue(DiffEntity diff, String osvalue, String attrcode){
			    String activity = null;
				if (!("").equals(osvalue)){
					EntityItem item = diff.getCurrentEntityItem();
					EANFlagAttribute fAtt = (EANFlagAttribute)item.getAttribute(attrcode);
					if (fAtt== null || !fAtt.isSelected(osvalue)){
						 activity = XMLElem.DELETE_ACTIVITY;
					}else{
						item = diff.getPriorEntityItem();
						fAtt = (EANFlagAttribute)item.getAttribute(attrcode);
						if (fAtt== null || !fAtt.isSelected(osvalue)){
							 activity = XMLElem.UPDATE_ACTIVITY;
						}
					}
				} else{
					EntityItem item = diff.getCurrentEntityItem();
					EANFlagAttribute fAtt = (EANFlagAttribute)item.getAttribute(attrcode);
					if (fAtt != null){
						 activity = XMLElem.DELETE_ACTIVITY;
					}else{
						item = diff.getPriorEntityItem();
						fAtt = (EANFlagAttribute)item.getAttribute(attrcode);
						if (fAtt != null){
							activity = XMLElem.UPDATE_ACTIVITY;
						}
					}
				}
				
			return activity;
		}
	/***********************************
	A.	Handling OSLEVEL and OS
	For GroupEntityType = MODELCG, the first criterion that is true is applied:
	1.	If System MODEL.OSLEVEL is {empty | “OS Independent”(10589)}, then include the corresponding MODEL for all MODELCGOS
	2.	If MODELCGOS.OS is "OS Independent", then include this MODELCGOS for all System MODELs
	3.	If MODELCGOS.OS is in MODEL.OSLEVEL, then include the MODEL for this MODELCGOS
	4.	Otherwise ignore.
	
	For GroupEntityType = SEOCG, the first criterion that is true is applied:
	1.	If System {MODEL.OSLEVEL | WWSEO.OS | LSEOBUNDLE.OSLEVEL} is {empty | “OS Independent”(10589)}, then include the corresponding System {MODEL | WWSEO | LSEOBUNDLE} for all SEOCGOS
	2.	If SEOCGOS.OS is "OS Independent", then include this SEOCGOS for all System {MODEL & WWSEO & LSEOBUNDLE}.
	3.	If SEOCGOS.OS is in System {MODEL.OSLEVEL | WWSEO.OS | LSEOBUNDLE.OSLEVEL}, then include the corresponding {MODEL | WWSEO | LSEOBUNDLE} for this SEOCGOS
	4.	Otherwise ignore.

	*/
	protected static String[] oslvlMatch(String osStr, Vector osLvlVct){
		String matchval[] = null;
		
		if (osStr !=null && osLvlVct.contains("10589")){
			matchval = new String[] {"10589"};
		}else if ("10589".equals(osStr)){
			matchval = new String[osLvlVct.size()];
			osLvlVct.copyInto(matchval);	
		}else if (osStr !=null && osLvlVct.contains(osStr)){
			matchval = new String[] {osStr};
		}else if (osStr !=null && osLvlVct.contains("")){
			matchval = new String[] {""};
		}

		return matchval;
	}
	/**
	 * get the changed value 
	 * @param diffitem
	 * @param attrcode
	 * @return
	 */
	protected static String getValue(DiffEntity diffitem, String attrcode){
		String result = null;
		String curvalue = "";
		String prevvalue = "";
		EntityItem curritem = diffitem.getCurrentEntityItem();
		EntityItem previtem = diffitem.getPriorEntityItem();
		if (diffitem.isDeleted()){
			prevvalue = PokUtils.getAttributeValue(previtem, attrcode,", ", "", false);
		}else if (diffitem.isNew()){
			curvalue = PokUtils.getAttributeValue(curritem, attrcode,", ", "", false);
		}else{
			prevvalue = PokUtils.getAttributeValue(previtem, attrcode,", ", "", false);
			curvalue = PokUtils.getAttributeValue(curritem, attrcode,", ", "", false);
		}

		if (!prevvalue.equals(curvalue)){
			result = curvalue;
		}
        return result;

	}
    /**
     * get the changed flag value
     * @param diffitem
     * @param attrcode
     * @return
     */
	protected static String getFlagValue(DiffEntity diffitem, String attrcode){
		String result = null;
		String curvalue = "";
		String prevvalue = "";
		EntityItem curritem = diffitem.getCurrentEntityItem();
		EntityItem previtem = diffitem.getPriorEntityItem();
		if (diffitem.isDeleted()){
			prevvalue = PokUtils.getAttributeFlagValue(previtem, attrcode);
			if (prevvalue==null){
				prevvalue = "";
			}
		}else if (diffitem.isNew()){
			curvalue = PokUtils.getAttributeFlagValue(curritem, attrcode);
			if (curvalue==null){
				curvalue = "";
			}
		}else{
			prevvalue = PokUtils.getAttributeFlagValue(previtem, attrcode);
			curvalue = PokUtils.getAttributeFlagValue(curritem, attrcode);
			if (curvalue==null){
				curvalue = "";
			}
			if (prevvalue==null){
				prevvalue = "";
			}
		}

		if (!prevvalue.equals(curvalue)){
			result = curvalue;
		}

		return result;
	}
	/**
	 * 
	 * @param WWCOMPATVector
	 * @param SystemOSVector
	 * @param OptionOSVector
	 * @param SystemEntityType
	 * @param SystemEntityId
	 * @param GroupEntityType
	 * @param GroupEntityId
	 * @param OSEntityType
	 * @param OSEntityId
	 * @param OSOPTIONType
	 * @param OSOPTIONId
	 * @param OptionEntityType
	 * @param OptionEntityId
	 * @return
	 * @throws SQLException
	 * @throws MiddlewareRequestException 
	 */
	protected  boolean putvalidWWCOMPAT(ADSABRSTATUS abr, EntityItem curritem, Vector WWCOMPATVector, Vector SystemOSVector, Vector OptionOSVector,
		String SystemEntityType, int SystemEntityId, String GroupEntityType, int GroupEntityId, String OSEntityType,
		int OSEntityId, String OSOPTIONType, int OSOPTIONId, String OptionEntityType, int OptionEntityId, String timeofchange) throws SQLException {

		// check the systemos
		// //////////////////////////////////////////////////
		// Statement statementSelect = conOPICM.createStatement();
		// ResultSet resultSelect = null;
		// ////////////////////////////////////////////////////
		// System entity
		// ////////////////////////////////////////////////////
		setConnection();
//		boolean isSystemOS = false;
		String EntityStatus = "";
		// check the status
		EntityStatus = getEntityStatus(SystemEntityType, SystemEntityId, timeofchange);
		if (!EntityStatus.equals("0020") && !EntityStatus.equals("0040") && !EntityStatus.equals("")) {
			abr.addDebug("Status is not RFR or Final :SystemEntity " + SystemEntityType + SystemEntityId + " Status : " + EntityStatus );
			return false;
		}
		// TODO don't need to check System OSLEVEL
		String SystemOS = "";
//		if (SystemOSVector.size()<=0){
//			String attr_OS = (String)Attr_OS.get(SystemEntityType);
//			if (attr_OS != null){
//			    SystemOSVector = getEntityFlagMulti(SystemEntityType, SystemEntityId, attr_OS,timeofchange);
//			    if (SystemOSVector.size()==0){
//			    	SystemOSVector.add(SystemOS);
//			    }		    	
//			}else{
//				abr.addOutput("This system entity can not find system operation Meta attribute code! " + SystemEntityType );
//				return false;
//			}
//		}
		
//		if (SystemOSVector.size()>0){
//			if(SystemOSVector.contains(""))
//				isSystemOS = true;
//				
//		}else{
//			String attr_OS = (String)Attr_OS.get(SystemEntityType);
//			if (attr_OS != null){
//				SystemOSVector = getEntityFlagMulti(SystemEntityType, SystemEntityId, attr_OS,timeofchange);
//				if (SystemOSVector.size() == 0) {
//					isSystemOS = true;
//				}
//			}else{
//				abr.addOutput("This system entity can not find system operation Meta attribute code! " + SystemEntityType );
//				return false;
//			}		
//		}
		// ////////////////////////////////////////////////////
		// Group entity
		// ////////////////////////////////////////////////////
		boolean isOKTOPUB = true;
		String OKTOPUB = "";
		String BRANDCD_FC = "";
		// check the status
		EntityStatus = getEntityStatus(GroupEntityType, GroupEntityId,timeofchange);
		if (!EntityStatus.equals("0020") && !EntityStatus.equals("0040")) {
			abr.addDebug("Status is not RFR or Final :CG " + GroupEntityType + GroupEntityId + " Status : " + EntityStatus);
			return false;
		}
		// 2. check OKTOPUB attribute
		OKTOPUB = getEntityFlagUnique(GroupEntityType, GroupEntityId, "OKTOPUB",timeofchange);
		isOKTOPUB = OKTOPUB.equalsIgnoreCase("DEL") ? false : true;
		if (isOKTOPUB == false){
			abr.addDebug("isOKTOPUB is delete :CG " + GroupEntityType + GroupEntityId + " Status : " + EntityStatus);
			return false;
		}
		// 3. get BRANDCD attribute
		BRANDCD_FC = getEntityFlagUnique(GroupEntityType, GroupEntityId, "BRANDCD", timeofchange);
		// ////////////////////////////////////////////////////
		// OS entity
		// ////////////////////////////////////////////////////
		boolean isOS = false;
		String OS = "";
		// check the status
		EntityStatus = getEntityStatus(OSEntityType, OSEntityId, timeofchange);
		if (!EntityStatus.equals("0020") && !EntityStatus.equals("0040")) {
			abr.addDebug("Status is not RFR or Final :CGOS " + OSEntityType + OSEntityId + " Status : " + EntityStatus);
			return false;
		}
		// 2. get OS attribute
		OS = getEntityFlagUnique(OSEntityType, OSEntityId, "OS", timeofchange);
		//comment out isOS = OS.equals("") ? true : false;
		//isOS = OS.equals("") ? true : false;
		//isOS = OS.equals(OSIndependent) ? true : false;
        //For each SEOCGOS where OS = “OS Independent” (10589), perform the following to obtain the “options” side.
		
		if (OS.equals(OSIndependent)||OS.equals("")){
			isOS = true;
		}
		if (!isOS){
			abr.addDebug(OSEntityType + OSEntityId +" does not have OS attr equal to OS Independent 10589.");
			return false;
		}
		
		// ////////////////////////////////////////////////////
		// OSOPTION entity
		// ////////////////////////////////////////////////////
		boolean isCOMPATPUBFLG = true;
		String CompatibilityPublishingFlag = "";
		String PublishFrom = "";
		String PublishTo = "";
		String RelationshipType = "";
		// check the status
		EntityStatus = getEntityStatus(OSOPTIONType, OSOPTIONId, timeofchange);
		if (!EntityStatus.equals("0020") && !EntityStatus.equals("0040")) {
			abr.addDebug("Status is not RFR or Final :" + OSOPTIONType + OSOPTIONId + " Status : " + EntityStatus);
			return false;
		}
		// check the attributes
		CompatibilityPublishingFlag = getEntityFlagUnique(OSOPTIONType, OSOPTIONId, "COMPATPUBFLG", timeofchange);
		isCOMPATPUBFLG = CompatibilityPublishingFlag.equalsIgnoreCase("DEL") ? false : true;
		if (isCOMPATPUBFLG == false){
			abr.addDebug("COMPATPUBFLG is delete :" + OSOPTIONType + OSOPTIONId + " Status : " + EntityStatus);
			return false;
		}
		PublishFrom = getEntityTextValue(OSOPTIONType, OSOPTIONId, "PUBFROM", timeofchange);
		PublishTo = getEntityTextValue(OSOPTIONType, OSOPTIONId, "PUBTO", timeofchange);
		RelationshipType = getEntityFlagUnique(OSOPTIONType, OSOPTIONId, "RELTYPE", timeofchange);
		// ////////////////////////////////////////////////////
		// OPTION entity
		// ////////////////////////////////////////////////////
		// check the status
		EntityStatus = getEntityStatus(OptionEntityType, OptionEntityId, timeofchange);
		if (!EntityStatus.equals("0020") && !EntityStatus.equals("0040") && !EntityStatus.equals("")) {
			abr.addDebug("Status is not RFR or Final :" + OptionEntityType + OptionEntityId + " Status : " + EntityStatus);
			return false;
		}
		// TODO  According to Doc BH FS ABR Catalog DB Compatibility Gen20121030.doc  do not need to check OSLEVEL If an LSEOBUNDLE is in the “Options” result and it has multiple values for “OSLEVEL”, only the value of “OS Independent” is used.
		
//		if ("LSEOBUNDLE".equals(OptionEntityType)){
//			if (OptionOSVector.size()>0){
//				if(!OptionOSVector.contains(OSIndependent))
//					abr.addDebug(OptionEntityType + OptionEntityId + " multiple values of OSLEVEL do not contain OS Independent 10589, it will not insert into table WWTECHCOMPAT ");
//					return false;
//					
//			}else{
//				String attr_OS = (String)Attr_OS.get(OptionEntityType);
//				if (attr_OS != null){
//					OptionOSVector = getEntityFlagMulti(OptionEntityType, OptionEntityId, attr_OS,timeofchange);
//					if (!OptionOSVector.contains(OSIndependent)) {
//						abr.addDebug(OptionEntityType + OptionEntityId + " multiple values of OSLEVEL do not contain OS Independent 10589, it will not insert into table WWTECHCOMPAT ");
//						return false;
//					}
//				}else{
//					abr.addDebug("This entity does not have OS attr ! " + OptionEntityType );
//					return false;
//				}		
//			}
//		}
			
		//		if (OptionOSVector.size()>0){
//			if(OptionOSVector.contains(""))
//				isOptionOS = true;
//				
//		}else{
//			String attr_OS = (String)Attr_OS.get(OptionEntityType);
//			if (attr_OS != null){
//				OptionOSVector = getEntityFlagMulti(OptionEntityType, OptionEntityId, attr_OS,timeofchange);
//				if (OptionOSVector.size() == 0) {
//					isOptionOS = true;
//				}
//			}else{
//				isOptionOS = true;
//				abr.addDebug("This entity does not have OS attr ! " + OptionEntityType );
//			}		
//		}
	    
	
	
		
		if ("WWSEO".equals(SystemEntityType) || "LSEOBUNDLE".equals(SystemEntityType) || "MODEL".equals(SystemEntityType)){

//			TODO if system entityType is equal to WWSEO then SystemOD = Null (Empty). From Wayne Note : Section XXI. LSEOBUNDLE
//			Subsection B. Processing
//			The "System" side (aka left side) should be "empty" 
//			·	SystemOS = Null (empty)
			setWWCOMPAT(BRANDCD_FC, SystemEntityType, SystemEntityId, SystemOS, GroupEntityType, GroupEntityId, OKTOPUB,
				OSEntityType, OSEntityId, OS, OptionEntityType, OptionEntityId, CompatibilityPublishingFlag,
				RelationshipType, PublishFrom, PublishTo, WWCOMPATVector);	
			
		} else {
//			TODO For Root entity is SEOCGOS , SEOCG, MODEL, SEOCGOSBDL, SEOCGOSSEO SystemOS = {MODEL.OSLEVEL | WWSEO.OS | LSEOBUNDLE.OSLEVEL}
			//For each SEOCGOS where OS = “OS Independent” (10589), perform the following to obtain the “options” side.
			//Perform extracts for this SEOCG. This may result in one or more rows for each system OS.
			//From Doc BH FS Catalog DB Compatibility Gen 20120627.doc SEOCG and SEOCGOS and MODEL processing
			//•	SystemOS = {MODEL.OSLEVEL | WWSEO.OS | LSEOBUNDLE.OSLEVEL}
//			for (int kk = 0; kk < SystemOSVector.size(); kk++) {
//				SystemOS = (String) SystemOSVector.get(kk);
//				setWWCOMPAT(BRANDCD_FC, SystemEntityType, SystemEntityId, SystemOS, GroupEntityType, GroupEntityId, OKTOPUB,
//						OSEntityType, OSEntityId, OS, OptionEntityType, OptionEntityId, CompatibilityPublishingFlag,
//						RelationshipType, PublishFrom, PublishTo, WWCOMPATVector);	
//			}
			
			abr.addDebug("Not support for this release :" + SystemEntityType + SystemEntityId );
			return false;
			
		}		
        //TODO comment out the following check. do not support this release.
//		/**
//		 * 
//		 * totoal 11 cases case SystemOS OS OptionOS case1 null case2
//		 * OSIndependent case3 normal null null case4 normal null OSIndependent
//		 * case5 normal null normal case6 normal OSIndependent null case7 normal
//		 * OSIndependent OSIndependent case8 normal OSIndependent normal case9
//		 * normal normal null case10 normal normal OSIndependent case11 normal
//		 * normal normal
//		 */
		// case1 null
//		if (isSystemOS) {
//			if(isOS || OS.equals(OSIndependent)){
//				setWWCOMPAT(BRANDCD_FC, SystemEntityType, SystemEntityId, SystemOS, GroupEntityType, GroupEntityId, OKTOPUB,
//						OSEntityType, OSEntityId, OS, OptionEntityType, OptionEntityId, CompatibilityPublishingFlag, RelationshipType,
//						PublishFrom, PublishTo, WWCOMPATVector);
//			}else{
//				if(isOptionOS|| OptionOSVector.contains(OSIndependent) || OptionOSVector.contains(OS)){
//					setWWCOMPAT(BRANDCD_FC, SystemEntityType, SystemEntityId, SystemOS, GroupEntityType, GroupEntityId, OKTOPUB,
//							OSEntityType, OSEntityId, OS, OptionEntityType, OptionEntityId, CompatibilityPublishingFlag, RelationshipType,
//							PublishFrom, PublishTo, WWCOMPATVector);
//				}
//			}
//		} else {
//			// check the OSLEVEL with os and optionos
//			for (int kk = 0; kk < SystemOSVector.size(); kk++) {
//				SystemOS = (String) SystemOSVector.get(kk);
//				// case2 OSIndependent
//				//if (SystemOS.equals(OSIndependent)) {
//				if(isOS || OS.equals(OSIndependent)){
//					setWWCOMPAT(BRANDCD_FC, SystemEntityType, SystemEntityId, SystemOS, GroupEntityType, GroupEntityId, OKTOPUB,
//						OSEntityType, OSEntityId, OS, OptionEntityType, OptionEntityId, CompatibilityPublishingFlag,
//						RelationshipType, PublishFrom, PublishTo, WWCOMPATVector);
//				} else {
//					if(SystemOS.equals(OSIndependent) || SystemOS.equals(OS)){
//						if (isOptionOS || OptionOSVector.contains(OSIndependent) || OptionOSVector.contains(OS)) {
//							setWWCOMPAT(BRANDCD_FC, SystemEntityType, SystemEntityId, SystemOS, GroupEntityType, GroupEntityId,OKTOPUB, 
//									OSEntityType, OSEntityId, OS, OptionEntityType, OptionEntityId,	CompatibilityPublishingFlag, 
//									RelationshipType, PublishFrom, PublishTo, WWCOMPATVector);
//							
//						}
//					}
//
//				}
//
//			}
//		}


		return true;
	}


	/*
	 * //TODO CALL putWWCOMPATVector();
	 */
	protected void putWWCOMPATVector(ADSABRSTATUS abr, Vector osTbl,  EntityItem curritem, ResultSet result2, Vector SystemOSVector, Vector OptionOSVector, Vector WWCOMPATVector, String update, String timeofchange ) throws SQLException{
		String SystemEntityType = "";
		int SystemEntityId ;
		String GroupEntityType = "";
		int GroupEntityId ;
		String OSEntityType = "";
		int OSEntityId;
		String OSOPTIONType ="";
		int OSOPTIONId;
		String OptionEntityType="";
		int OptionEntityId;
		int counter = 1;
		long curtime = System.currentTimeMillis();
		boolean issysvectorclear = SystemOSVector.size()==0? true: false;
		boolean isoptvectorclear = SystemOSVector.size()==0? true: false;
		if (result2 != null){
			while(result2.next()){
				SystemEntityType	= result2.getString("SystemEntityType");
				SystemEntityId 		= result2.getInt("SystemEntityId");						
				GroupEntityType 	= result2.getString("GroupEntityType");
			    GroupEntityId 		= result2.getInt("GroupEntityId");
				OSEntityType    	= result2.getString("OSEntityType");
				OSEntityId 			= result2.getInt("OSEntityId");
				OSOPTIONType        = result2.getString("OSOPTIONType");
				OSOPTIONId   		= result2.getInt("OSOPTIONId");
				OptionEntityType   	= result2.getString("OptionEntityType");
				OptionEntityId 		= result2.getInt("OptionEntityID");
				WWCOMPATVector.clear();
				if (issysvectorclear){
				    SystemOSVector.clear();
				}			
				if (isoptvectorclear){
					OptionOSVector.clear();
				}
				putvalidWWCOMPAT(abr, curritem, WWCOMPATVector, SystemOSVector, OptionOSVector, SystemEntityType,
					 SystemEntityId 		,					
					  GroupEntityType 	,
					  GroupEntityId 		,
					  OSEntityType    	,
					  OSEntityId 			,
					  OSOPTIONType       ,
					  OSOPTIONId   		,
					  OptionEntityType   ,
					  OptionEntityId,
					  timeofchange);
				osTbl.addAll(WWCOMPATVector);
				//TODO SET chunk size to avoid out of memory
				if (osTbl.size()>=WWCOMPAT_ROW_LIMIT){
					abr.addDebug("Chunking size is " +  WWCOMPAT_ROW_LIMIT + ". Start to run chunking "  + counter++  + " times.");
					updateCompat(abr,osTbl,update,timeofchange);
//					 release memory
					osTbl.clear();
				}
				
			} 
			if (osTbl.size()>0){
				updateCompat(abr,osTbl,update,timeofchange);
			}
			abr.addDebug("Time to getMatchingDateIds all WWCOMPATVector size:" + ((counter -1)*WWCOMPAT_ROW_LIMIT + osTbl.size() )  +"|"+ curritem.getKey()
				+ ": " + Stopwatch.format(System.currentTimeMillis() - curtime));
			//release memory
			osTbl.clear();
//		    if (((counter -1)*WWCOMPAT_ROW_LIMIT + osTbl.size() )==0){
//		    	abr.addOutput("ADSWWCOMPATABR found insert count: 0");
//		    }	
		}

	}
		
		  		
	/**
	 * @param SystemEntityType
	 * @param SystemEntityId
	 * @param SystemStatus
	 * @return
	 * @throws SQLException
	 */
	protected String getEntityStatus(String EntityType, int EntityId, String timeofchange) throws SQLException {
		return getEntityFlagUnique(EntityType,EntityId,"STATUS",timeofchange);		
	}
	
	/**
	 * @param SystemEntityType
	 * @param SystemEntityId
	 * @param SystemStatus
	 * @return attributevalue
	 * @throws SQLException
	 */
	protected String getEntityFlagUnique(String EntityType, int EntityId, String attributecode, String timeofchange) throws SQLException {
		String attributevalue ="";
		PreparedStatement prestatement = null;
		ResultSet preresult  = null;
		String sql 	= " select attributevalue from opicm.flag where entitytype=? and entityid=? and attributecode=? "
			        + " and effto > ? and valto > ?  and enterprise= 'SG' with ur";
		
		prestatement = m_conODS.prepareStatement(sql);
		prestatement.setString(1,EntityType);
		prestatement.setInt(2,EntityId);
		prestatement.setString(3,attributecode);
		prestatement.setString(4,timeofchange);
		prestatement.setString(5,timeofchange);
		preresult = prestatement.executeQuery();
		if(preresult.next()){
			attributevalue = preresult.getString("attributevalue");
		}
		preresult.close();
		prestatement.close();
		return attributevalue;
	}
	/**
	 * @param SystemEntityType
	 * @param SystemEntityId
	 * @param SystemStatus
	 * @return attributevalue
	 * @throws SQLException
	 */
	protected String getEntityTextValue(String EntityType, int EntityId, String attributecode, String timeofchange) throws SQLException {
		String attributevalue ="";
		PreparedStatement prestatement = null;
		ResultSet preresult  = null;
		String sql 	= " select attributevalue from opicm.text where entitytype=? and entityid=? and attributecode=? "
			        + " and effto > ? and valto > ?  and enterprise= 'SG' with ur";
		
		prestatement = m_conODS.prepareStatement(sql);
		prestatement.setString(1,EntityType);
		prestatement.setInt(2,EntityId);
		prestatement.setString(3,attributecode);
		prestatement.setString(4,timeofchange);
		prestatement.setString(5,timeofchange);
		preresult = prestatement.executeQuery();
		if(preresult.next()){
			attributevalue = preresult.getString("attributevalue");
		}
		preresult.close();
		prestatement.close();
		return attributevalue;
	}
	/**
	 * @param SystemEntityType
	 * @param SystemEntityId
	 * @param SystemStatus
	 * @return attributevalue
	 * @throws SQLException
	 */
	protected  Vector getEntityFlagMulti(String EntityType, int EntityId, String attributecode, String timeofchange) throws SQLException {
		Vector falgVector = new Vector();
		PreparedStatement prestatement = null;
		ResultSet preresult  = null;
		String sql 	= " select attributevalue from opicm.flag where entitytype=? and entityid=? and attributecode=? "
			        + " and effto > ? and valto > ? and enterprise= 'SG' with ur";
		
		prestatement = m_conODS.prepareStatement(sql);
		
		
		prestatement.setString(1,EntityType);
		prestatement.setInt(2,EntityId);
		prestatement.setString(3,attributecode);
		prestatement.setString(4,timeofchange);
		prestatement.setString(5,timeofchange);
		preresult = prestatement.executeQuery();
		while(preresult.next()){
			falgVector.add(preresult.getString("attributevalue"));
		}
		preresult.close();
		prestatement.close();
		return falgVector;
	}
	/**
	 * @param BRANDCD_FC
	 * @param SystemEntityType
	 * @param SystemEntityId
	 * @param SystemOS
	 * @param GroupEntityType
	 * @param GroupEntityId
	 * @param OKTOPUB
	 * @param OSEntityType
	 * @param OSEntityId
	 * @param OS
	 * @param OptionEntityType
	 * @param OptionEntityID
	 * @param CompatibilityPublishingFlag
	 * @param RelationshipType
	 * @param PublishFrom
	 * @param PublishTo
	 * @param WWCOMPATVector
	 */
	public static void setWWCOMPAT(String BRANDCD_FC, String SystemEntityType, int SystemEntityId, String SystemOS, String GroupEntityType, int GroupEntityId, String OKTOPUB, String OSEntityType, int OSEntityId, String OS, String OptionEntityType, int OptionEntityId, String CompatibilityPublishingFlag, String RelationshipType, String PublishFrom, String PublishTo, Vector WWCOMPATVector) {
		WWCOMPAT WWCOMPAT;
		WWCOMPAT = new WWCOMPAT();
		WWCOMPAT.setBRANDCD_FC(BRANDCD_FC);       
		WWCOMPAT.setSystemEntityType(SystemEntityType); 
		WWCOMPAT.setSystemEntityId(SystemEntityId);  
		WWCOMPAT.setSystemOS(SystemOS);        
		WWCOMPAT.setGroupEntityType(GroupEntityType);  
		WWCOMPAT.setGroupEntityId(GroupEntityId);   
		WWCOMPAT.setOKTOPUB(OKTOPUB);          
		WWCOMPAT.setOSEntityType(OSEntityType);     
		WWCOMPAT.setOSEntityId(OSEntityId);       
		WWCOMPAT.setOS(OS);               
		WWCOMPAT.setOptionEntityType(OptionEntityType); 
		WWCOMPAT.setOptionEntityId(OptionEntityId);   
		WWCOMPAT.setCompatibilityPublishingFlag(CompatibilityPublishingFlag); 
		WWCOMPAT.setRelationshipType(RelationshipType); 
		WWCOMPAT.setPublishFrom(PublishFrom);      
		WWCOMPAT.setPublishTo(PublishTo); 
		WWCOMPATVector.add(WWCOMPAT);
	}
	
    /**********************************
	    * get the status attribute to use for this ABR
	    */
	public String getStatusAttr() { return "STATUS";}

    /***********************************************
    *  Get the version
    *
    *@return java.lang.String
    */
    public String getVersion()
    {
        return "$Revision: 1.1 $";
    }

   
    /********************************************************************************
     * setup the connection and preparedstatements
     * @throws SQLException 
     */
     protected void setConnection() throws SQLException{
    	 if (m_conODS == null){
    		 m_conODS =
			     DriverManager.getConnection(
			         MiddlewareServerProperties.getPDHDatabaseURL(),
			         MiddlewareServerProperties.getPDHDatabaseUser(),
			         MiddlewareServerProperties.getPDHDatabasePassword());
    	      m_conODS.setAutoCommit(true);   
    	 }
    		 	 
     }
     /**
      * get connection 
      * @return
      * @throws SQLException
      */
     protected Connection getConnection() throws SQLException {
    	 if (m_conODS == null){
    		 setConnection();
    	 }
		return m_conODS;
    	 
     }
     
     /**
      * release Connection m_conODS
      */
     protected void releaseConn(){
    	 m_conODS = null;
     }
	public String getMQCID() {
		return null;
	}
  	public String getCommMODELCGSql(String wherestr){
		  StringBuffer MDOELCGOS_SQL = new StringBuffer(" select                     \r\n"+
		  "   MODEL.entitytype                 as SystemEntityType,                  \r\n"+
		  "   MODEL.entityid                   as SystemEntityId,                    \r\n"+
		  "   MODELCG.entitytype               as GroupEntityType,                   \r\n"+
		  "   MODELCG.entityid                 as GroupEntityId,                     \r\n"+
		  "   MODELCGOS.entitytype             as OSEntityType,                      \r\n"+
		  "   MODELCGOS.entityid               as OSEntityId,                        \r\n"+
		  "   MDLCGOSMDL.entityid              as OSOPTIONId,                        \r\n"+
		  "   MDLCGOSMDL.entitytype            as OSOPTIONType,                      \r\n"+
		  "   MODEL2.entitytype                as OptionEntityType,                  \r\n"+
		  "   MODEL2.entityid                  as OptionEntityID                     \r\n"+
		  " from opicm.flag MODELCG                                                  \r\n"+
		  " inner join opicm.relator           as MDLCGMDL on                        \r\n"+
		  "    MDLCGMDL.entity1type            = 'MODELCG' and                       \r\n"+
		  "    MDLCGMDL.entity2type            = 'MODEL'  and                        \r\n"+
		  "    MDLCGMDL.entity1id              = MODELCG.entityid and                \r\n"+
		  "    MDLCGMDL.valto                  > current timestamp and               \r\n"+
		  "    MDLCGMDL.effto                  > current timestamp and               \r\n"+
		  "    MDLCGMDL.ENTERPRISE             = 'SG'                                \r\n"+
		  " inner join opicm.flag              as MODEL on                           \r\n"+
		  "    MODEL.entitytype                = 'MODEL' and                         \r\n"+
		  "    MODEL.entityid                  = MDLCGMDL.entity2id and              \r\n"+
		  "    MODEL.valto                     > current timestamp and               \r\n"+
		  "    MODEL.effto                     > current timestamp and               \r\n"+
		  "    MODEL.attributecode             = 'STATUS' and                        \r\n"+
		  "    MODEL.attributevalue            in('0040','0020') and              \r\n"+
		  "    MODEL.ENTERPRISE='SG'                                                 \r\n"+
		  " inner join opicm.relator           as MDLCGMDLCGOS on                    \r\n"+
		  "    MDLCGMDLCGOS.entity1type        = 'MODELCG' and                       \r\n"+
		  "    MDLCGMDLCGOS.entity2type        = 'MODELCGOS' and                     \r\n"+
		  "    MDLCGMDLCGOS.entity1id          = MODELCG.entityid and                \r\n"+
		  "    MDLCGMDLCGOS.valto              > current timestamp and               \r\n"+
		  "    MDLCGMDLCGOS.effto              > current timestamp and               \r\n"+
		  "    MDLCGMDLCGOS.ENTERPRISE         = 'SG'                                \r\n"+
		  " inner join opicm.flag              as MODELCGOS on                       \r\n"+
		  "    MODELCGOS.entitytype            = 'MODELCGOS' and                     \r\n"+
		  "    MODELCGOS.entityid              = MDLCGMDLCGOS.entity2id and          \r\n"+
		  "    MODELCGOS.valto                 > current timestamp and               \r\n"+
		  "    MODELCGOS.effto                 > current timestamp and               \r\n"+
		  "    MODELCGOS.attributecode         = 'STATUS' and                        \r\n"+
		  "    MODELCGOS.attributevalue        in('0040','0020') and                 \r\n"+
		  "    MODELCGOS.ENTERPRISE            = 'SG'                                \r\n"+
		  " inner join opicm.relator            as MDLCGOSMDL on                     \r\n"+
		  "    MDLCGOSMDL.entity1type          = 'MODELCGOS' and                     \r\n"+
		  "    MDLCGOSMDL.entity2type          = 'MODEL' and                         \r\n"+
		  "    MDLCGOSMDL.entity1id            = MODELCGOS.entityid and              \r\n"+
		  "    MDLCGOSMDL.valto                > current timestamp and               \r\n"+
		  "    MDLCGOSMDL.effto                > current timestamp and               \r\n"+
		  "    MDLCGOSMDL.ENTERPRISE           = 'SG'                                \r\n"+
		  " inner join opicm.flag              as OSOPTION  on                       \r\n"+
		  "    OSOPTION.entitytype             = MDLCGOSMDL.entitytype and           \r\n"+
		  "    OSOPTION.entityid               = MDLCGOSMDL.entityid and             \r\n"+
		  "    OSOPTION.valto                  > current timestamp and               \r\n"+
		  "    OSOPTION.effto                  > current timestamp and               \r\n"+
		  "    OSOPTION.attributecode          = 'STATUS' and                        \r\n"+
		  "    OSOPTION.attributevalue         in('0040','0020') and                 \r\n"+
		  "    OSOPTION.ENTERPRISE             = 'SG'                                \r\n"+
		  " inner join opicm.flag              as MODEL2 on                          \r\n"+
		  "    MODEL2.entitytype               = 'MODEL' and                         \r\n"+
		  "    MODEL2.entityid                 = MDLCGOSMDL.entity2id and            \r\n"+
		  "    MODEL2.valto                    > current timestamp and               \r\n"+
		  "    MODEL2.effto                    > current timestamp and               \r\n"+
		  "    MODEL2.attributecode            = 'STATUS' and                        \r\n"+
		  "    MODEL2.attributevalue           in('0040','0020') and              \r\n"+
		  "    MODEL2.ENTERPRISE               = 'SG'                                \r\n"+
		  " where                                                                    \r\n"+
		  "    MODELCG.entitytype              = 'MODELCG' and                       \r\n"+
		  "    MODELCG.valto                   > current timestamp and               \r\n"+
		  "    MODELCG.effto                   > current timestamp and               \r\n"+
		  "    MODELCG.attributecode           = 'STATUS' and                        \r\n"+
		  "    MODELCG.attributevalue          in('0040','0020') and                 \r\n"+
		  "    MODELCG.ENTERPRISE              = 'SG' and                            \r\n");
		  MDOELCGOS_SQL.append(wherestr);
			return MDOELCGOS_SQL.toString();
			}
  	
  	/**
  	 * 
  	 * @param wherestr
  	 * @return
  	 */
  	public String getCommSEOCGSql(String wherestr){
  		 StringBuffer   SEOCG_SQL  =  new StringBuffer (" select                                        \r\n"+
    	"    SystemGroup.SystemId          as SystemEntityId,                                           \r\n"+
    	"    SystemGroup.SystemType        as SystemEntityType,                                         \r\n"+
    	"    SystemGroup.GroupId           as GroupEntityId,                                            \r\n"+
    	"    SystemGroup.GroupType         as GroupEntityType,                                          \r\n"+
    	"    OSOption.OSId                 as OSEntityId,                                               \r\n"+
    	"    OSOption.OSType               as OSEntityType,                                             \r\n"+
    	"    OSOption.OSOPTIONId           as OSOPTIONId,                                               \r\n"+
    	"    OSOption.OSOPTIONType         as OSOPTIONType,                                             \r\n"+
    	"    OSOption.OptionId             as OptionEntityID,                                           \r\n"+
    	"    OSOption.OptionType           as OptionEntityType                                          \r\n"+
    	" from                                                                     \r\n"+
    	" (                                                                        \r\n"+
    	" select                                                                   \r\n"+
    	"   SEOCG.entityid                   as GroupId,                           \r\n"+
    	"   SEOCG.entityType                 as GroupType,                         \r\n"+
    	"   LSEOBUNDLE.entityid              as SystemId,                          \r\n"+
    	"   LSEOBUNDLE.entityType            as SystemType                         \r\n"+
    	" from opicm.flag                    as SEOCG                              \r\n"+
    	" inner join opicm.relator           as SEOCGBDL on                        \r\n"+
    	"    SEOCGBDL.entity1type            = 'SEOCG' and                         \r\n"+
    	"    SEOCGBDL.entity2type            = 'LSEOBUNDLE' and                    \r\n"+
    	"    SEOCGBDL.entity1id              = SEOCG.entityid and                  \r\n"+
    	"    SEOCGBDL.valto                  > current timestamp and               \r\n"+
    	"    SEOCGBDL.effto                  > current timestamp and               \r\n"+
    	"    SEOCGBDL.ENTERPRISE             = 'SG'                                \r\n"+
    	" inner join opicm.flag              as LSEOBUNDLE on                      \r\n"+
    	"    LSEOBUNDLE.entitytype           = 'LSEOBUNDLE' and                    \r\n"+
    	"    LSEOBUNDLE.entityid             = SEOCGBDL.entity2id and              \r\n"+
    	"    LSEOBUNDLE.valto                > current timestamp and               \r\n"+
    	"    LSEOBUNDLE.effto                > current timestamp and               \r\n"+
    	"    LSEOBUNDLE.attributecode        = 'STATUS' and                        \r\n"+
    	"    LSEOBUNDLE.attributevalue       in('0040','0020') and              \r\n"+
    	"    LSEOBUNDLE.ENTERPRISE           = 'SG'                                \r\n"+
    	" where                                                                    \r\n"+
    	"    SEOCG.entitytype                = 'SEOCG' and                         \r\n"+
    	"    SEOCG.valto                     > current timestamp and               \r\n"+
    	"    SEOCG.effto                     > current timestamp and               \r\n"+
    	"    SEOCG.attributecode             = 'STATUS' and                        \r\n"+
    	"    SEOCG.attributevalue            in('0040','0020') and                 \r\n"+
    	"    SEOCG.ENTERPRISE                = 'SG'                                \r\n"+
    	" union all                                                                \r\n"+
    	" select                                                                   \r\n"+
    	"   SEOCG.entityid                   as GroupId,                           \r\n"+
    	"   SEOCG.entityType                 as GroupType,                         \r\n"+
    	"   MODEL.entityid                   as SystemId,                          \r\n"+
    	"   MODEL.entityType                 as SystemType                         \r\n"+
    	" from opicm.flag                    as SEOCG                              \r\n"+
    	" inner join opicm.relator           as SEOCGMDL on                        \r\n"+
    	"    SEOCGMDL.entity1type            = 'SEOCG' and                         \r\n"+
    	"    SEOCGMDL.entity2type            = 'MODEL'  and                        \r\n"+
    	"    SEOCGMDL.entity1id              = SEOCG.entityid and                  \r\n"+
    	"    SEOCGMDL.valto                  > current timestamp and               \r\n"+
    	"    SEOCGMDL.effto                  > current timestamp and               \r\n"+
    	"    SEOCGMDL.ENTERPRISE             = 'SG'                                \r\n"+
    	" inner join opicm.flag              as MODEL on                           \r\n"+
    	"    MODEL.entitytype                = 'MODEL' and                         \r\n"+
    	"    MODEL.entityid                  = SEOCGMDL.entity2id and              \r\n"+
    	"    MODEL.valto                     > current timestamp and               \r\n"+
    	"    MODEL.effto                     > current timestamp and               \r\n"+
    	"    MODEL.attributecode             = 'STATUS' and                        \r\n"+
    	"    MODEL.attributevalue            in('0040','0020') and              \r\n"+
    	"    MODEL.ENTERPRISE                = 'SG'                                \r\n"+
    	" where                                                                    \r\n"+
    	"    SEOCG.entitytype                = 'SEOCG' and                         \r\n"+
    	"    SEOCG.valto                     > current timestamp and               \r\n"+
    	"    SEOCG.effto                     > current timestamp and               \r\n"+
    	"    SEOCG.attributecode             = 'STATUS' and                        \r\n"+
    	"    SEOCG.attributevalue            in('0040','0020') and                 \r\n"+
    	"    SEOCG.ENTERPRISE                = 'SG'                                \r\n"+
    	" union all                                                                \r\n"+
    	" select                                                                   \r\n"+
    	"   SEOCG.entityid                   as GroupId,                           \r\n"+
    	"   SEOCG.entityType                 as GroupType,                         \r\n"+
    	"   WWSEO.entityid                   as SystemId,                          \r\n"+
    	"   WWSEO.entityType                 as SystemType                         \r\n"+
    	" from opicm.flag                    as SEOCG                              \r\n"+
    	" inner join opicm.relator           as SEOCGSEO on                        \r\n"+
    	"    SEOCGSEO.entity1type            = 'SEOCG' and                         \r\n"+
    	"    SEOCGSEO.entity2type            = 'WWSEO'  and                        \r\n"+
    	"    SEOCGSEO.entity1id              = SEOCG.entityid and                  \r\n"+
    	"    SEOCGSEO.valto                  > current timestamp and               \r\n"+
    	"    SEOCGSEO.effto                  > current timestamp and               \r\n"+
    	"    SEOCGSEO.ENTERPRISE             = 'SG'                                \r\n"+
    	" inner join opicm.flag              as WWSEO on                           \r\n"+
    	"    WWSEO.entitytype                = 'WWSEO' and                         \r\n"+
    	"    WWSEO.entityid                  = SEOCGSEO.entity2id and              \r\n"+
    	"    WWSEO.valto                     > current timestamp and               \r\n"+
    	"    WWSEO.effto                     > current timestamp and               \r\n"+
    	"    WWSEO.attributecode             = 'STATUS' and                        \r\n"+
    	"    WWSEO.attributevalue            in('0040','0020') and              \r\n"+
    	"    WWSEO.ENTERPRISE                = 'SG'                                \r\n"+
    	" where                                                                    \r\n"+
    	"    SEOCG.entitytype                = 'SEOCG' and                         \r\n"+
    	"    SEOCG.valto                     > current timestamp and               \r\n"+
    	"    SEOCG.effto                     > current timestamp and               \r\n"+
    	"    SEOCG.attributecode             = 'STATUS' and                        \r\n"+
    	"    SEOCG.attributevalue            in('0040','0020') and                 \r\n"+
    	"    SEOCG.ENTERPRISE                = 'SG'                                \r\n"+
    	" )                                                                        \r\n"+
    	" as SystemGroup                                                           \r\n"+
    	" inner join opicm.relator           as SEOCGSEOCGOS on                    \r\n"+
    	"    SEOCGSEOCGOS.entity1type        = 'SEOCG' and                         \r\n"+
    	"    SEOCGSEOCGOS.entity2type        = 'SEOCGOS'  and                      \r\n"+
    	"    SEOCGSEOCGOS.entity1id          = SystemGroup.GroupId and             \r\n"+
    	"    SEOCGSEOCGOS.valto              > current timestamp and               \r\n"+
    	"    SEOCGSEOCGOS.effto              > current timestamp and               \r\n"+
    	"    SEOCGSEOCGOS.ENTERPRISE         = 'SG'                                \r\n"+
    	" inner join                                                               \r\n"+
    	" (                                                                        \r\n"+
    	" select                                                                   \r\n"+
    	"   SEOCGOS.entityid                 as OSId,                              \r\n"+
    	"   SEOCGOS.entitytype               as OSType,                            \r\n"+
    	"   SEOCGOSBDL.entityid              as OSOPTIONId,                        \r\n"+
    	"   SEOCGOSBDL.entitytype            as OSOPTIONType,                      \r\n"+
    	"   LSEOBUNDLE.entityid              as OptionId,                          \r\n"+
    	"   LSEOBUNDLE.entityType            as OptionType                         \r\n"+
    	" from opicm.flag                    as SEOCGOS                            \r\n"+
    	" inner join opicm.relator           as SEOCGOSBDL on                      \r\n"+
    	"    SEOCGOSBDL.entity1type          = 'SEOCGOS' and                       \r\n"+
    	"    SEOCGOSBDL.entity2type          = 'LSEOBUNDLE'  and                   \r\n"+
    	"    SEOCGOSBDL.entity1id            = SEOCGOS.entityid and                \r\n"+
    	"    SEOCGOSBDL.valto                > current timestamp and               \r\n"+
    	"    SEOCGOSBDL.effto                > current timestamp and               \r\n"+
    	"    SEOCGOSBDL.ENTERPRISE           = 'SG'                                \r\n"+
    	" inner join opicm.flag              as OSOPTION  on                       \r\n"+
    	"    OSOPTION.entitytype             = SEOCGOSBDL.entitytype and           \r\n"+
    	"    OSOPTION.entityid               = SEOCGOSBDL.entityid and             \r\n"+
    	"    OSOPTION.valto                  > current timestamp and               \r\n"+
    	"    OSOPTION.effto                  > current timestamp and               \r\n"+
    	"    OSOPTION.attributecode          = 'STATUS' and                        \r\n"+
    	"    OSOPTION.attributevalue         in('0040','0020') and                 \r\n"+
    	"    OSOPTION.ENTERPRISE             = 'SG'                                \r\n"+
    	" inner join opicm.flag              as LSEOBUNDLE on                      \r\n"+
    	"    LSEOBUNDLE.entitytype           = 'LSEOBUNDLE' and                    \r\n"+
    	"    LSEOBUNDLE.entityid             = SEOCGOSBDL.entity2id and            \r\n"+
    	"    LSEOBUNDLE.valto                > current timestamp and               \r\n"+
    	"    LSEOBUNDLE.effto                > current timestamp and               \r\n"+
    	"    LSEOBUNDLE.attributecode        = 'STATUS' and                        \r\n"+
    	"    LSEOBUNDLE.attributevalue       in('0040','0020') and              \r\n"+
    	"    LSEOBUNDLE.ENTERPRISE           = 'SG'                                \r\n"+
    	" where                                                                    \r\n"+
    	"    SEOCGOS.entitytype              = 'SEOCGOS' and                       \r\n"+
    	"    SEOCGOS.valto                   > current timestamp and               \r\n"+
    	"    SEOCGOS.effto                   > current timestamp and               \r\n"+
    	"    SEOCGOS.attributecode           = 'STATUS' and                        \r\n"+
    	"    SEOCGOS.attributevalue          in('0040','0020') and                 \r\n"+
    	"    SEOCGOS.ENTERPRISE              = 'SG'                                \r\n"+
    	" union all                                                                \r\n"+
    	" select                                                                   \r\n"+
    	"     SEOCGOS.entityid               as OSId,                              \r\n"+
    	"     SEOCGOS.entitytype             as OSType,                            \r\n"+
    	"     SEOCGOSSVCSEO.entityid         as OSOPTIONId,                        \r\n"+
    	"     SEOCGOSSVCSEO.entitytype       as OSOPTIONType,                      \r\n"+
    	"     SVCSEO.entityid                as OptionId,                          \r\n"+
    	"     SVCSEO.entityType              as OptionType                         \r\n"+
    	" from opicm.flag                    as SEOCGOS                            \r\n"+
    	" inner join opicm.relator           as SEOCGOSSVCSEO on                   \r\n"+
    	"    SEOCGOSSVCSEO.entity1type       = 'SEOCGOS' and                       \r\n"+
    	"    SEOCGOSSVCSEO.entity2type       = 'SVCSEO'  and                       \r\n"+
    	"    SEOCGOSSVCSEO.entity1id         = SEOCGOS.entityid and                \r\n"+
    	"    SEOCGOSSVCSEO.valto             > current timestamp and               \r\n"+
    	"    SEOCGOSSVCSEO.effto             > current timestamp and               \r\n"+
    	"    SEOCGOSSVCSEO.ENTERPRISE        = 'SG'                                \r\n"+
    	"  inner join opicm.flag             as OSOPTION  on                       \r\n"+
    	"    OSOPTION.entitytype             = SEOCGOSSVCSEO.entitytype and        \r\n"+
    	"    OSOPTION.entityid               = SEOCGOSSVCSEO.entityid and          \r\n"+
    	"    OSOPTION.valto                  > current timestamp and               \r\n"+
    	"    OSOPTION.effto                  > current timestamp and               \r\n"+
    	"    OSOPTION.attributecode          = 'STATUS' and                        \r\n"+
    	"    OSOPTION.attributevalue         in('0040','0020') and                 \r\n"+
    	"    OSOPTION.ENTERPRISE             = 'SG'                                \r\n"+
    	" inner join opicm.flag              as SVCSEO on                          \r\n"+
    	"    SVCSEO.entitytype               = 'SVCSEO' and                        \r\n"+
    	"    SVCSEO.entityid                 = SEOCGOSSVCSEO.entity2id and         \r\n"+
    	"    SVCSEO.valto                    > current timestamp and               \r\n"+
    	"    SVCSEO.effto                    > current timestamp and               \r\n"+
    	"    SVCSEO.attributecode            = 'STATUS' and                        \r\n"+
    	"    SVCSEO.attributevalue           in('0040','0020') and              \r\n"+
    	"    SVCSEO.ENTERPRISE               = 'SG'                                \r\n"+
    	" where                                                                    \r\n"+
    	"    SEOCGOS.entitytype              = 'SEOCGOS' and                       \r\n"+
    	"    SEOCGOS.valto                   > current timestamp and               \r\n"+
    	"    SEOCGOS.effto                   > current timestamp and               \r\n"+
    	"    SEOCGOS.attributecode           = 'STATUS' and                        \r\n"+
    	"    SEOCGOS.attributevalue          in('0040','0020') and                 \r\n"+
    	"    SEOCGOS.ENTERPRISE              = 'SG'                                \r\n"+
    	" union all                                                                \r\n"+
    	" select                                                                   \r\n"+
    	"     SEOCGOS.entityid               as OSId,                              \r\n"+
    	"     SEOCGOS.entitytype             as OSType,                            \r\n"+
    	"     SEOCGOSSEO.entityid            as OSOPTIONId,                        \r\n"+
    	"     SEOCGOSSEO.entitytype          as OSOPTIONType,                      \r\n"+
    	"     WWSEO.entityid                 as OptionId,                          \r\n"+
    	"     WWSEO.entityType               as OptionType                         \r\n"+
    	" from opicm.flag                    as SEOCGOS                            \r\n"+
    	" inner join opicm.relator           as SEOCGOSSEO on                      \r\n"+
    	"    SEOCGOSSEO.entity1type          = 'SEOCGOS' and                       \r\n"+
    	"    SEOCGOSSEO.entity2type          = 'WWSEO'  and                        \r\n"+
    	"    SEOCGOSSEO.entity1id            = SEOCGOS.entityid and                \r\n"+
    	"    SEOCGOSSEO.valto                > current timestamp and               \r\n"+
    	"    SEOCGOSSEO.effto                > current timestamp and               \r\n"+
    	"    SEOCGOSSEO.ENTERPRISE           = 'SG'                                \r\n"+
    	" inner join opicm.flag              as OSOPTION  on                       \r\n"+
    	"    OSOPTION.entitytype             = SEOCGOSSEO.entitytype and           \r\n"+
    	"    OSOPTION.entityid               = SEOCGOSSEO.entityid and             \r\n"+
    	"    OSOPTION.valto                  > current timestamp and               \r\n"+
    	"    OSOPTION.effto                  > current timestamp and               \r\n"+
    	"    OSOPTION.attributecode          = 'STATUS' and                        \r\n"+
    	"    OSOPTION.attributevalue         in('0040','0020') and                 \r\n"+
    	"    OSOPTION.ENTERPRISE             = 'SG'                                \r\n"+
    	" inner join opicm.flag              as WWSEO on                           \r\n"+
    	"    WWSEO.entitytype                = 'WWSEO' and                         \r\n"+
    	"    WWSEO.entityid                  = SEOCGOSSEO.entity2id and            \r\n"+
    	"    WWSEO.valto                     > current timestamp and               \r\n"+
    	"    WWSEO.effto                     > current timestamp and               \r\n"+
    	"    WWSEO.attributecode             = 'STATUS' and                        \r\n"+
    	"    WWSEO.attributevalue            in('0040','0020') and              \r\n"+
    	"    WWSEO.ENTERPRISE                = 'SG'                                \r\n"+
    	" where                                                                    \r\n"+
    	"    SEOCGOS.entitytype              = 'SEOCGOS' and                       \r\n"+
    	"    SEOCGOS.valto                   > current timestamp and               \r\n"+
    	"    SEOCGOS.effto                   > current timestamp and               \r\n"+
    	"    SEOCGOS.attributecode           = 'STATUS' and                        \r\n"+
    	"    SEOCGOS.attributevalue          in('0040','0020') and                 \r\n"+
    	"    SEOCGOS.ENTERPRISE              = 'SG'                                \r\n"+
    	"                                                                          \r\n"+
    	" ) as OSOption on                                                         \r\n"+
    	"    OSOption.OSType                 = 'SEOCGOS' and                       \r\n"+
    	"    OSOption.OSId                   = SEOCGSEOCGOS.entity2id              \r\n");
  		SEOCG_SQL.append(wherestr); 
  		return SEOCG_SQL.toString();
  	}
   
}
